# Homepage

**MCP Omni - Comprehensive Specification**

**Document Section: III. Page-by-Page Specification**

**(A) Homepage (`/`) - Unified Discovery Hub**

- **Page Name/Type:** Unified Discovery Hub / Platform Entry Point / Central Registry Interface
- **Purpose & Goals:**
    - **Instant Ecosystem Access:** Immediately immerse users in the aggregated MCP ecosystem. Function as the primary, interactive interface for discovering *all* MCP Omni components (aggregated Servers, hosted Servers, Clients, Tools, Use Cases, Posts) without preliminary steps.
    - **Facilitate All Discovery Flows:** Cater seamlessly to users who know exactly what they want (via powerful search), users exploring a specific application/service (via Integrated Service filter), users browsing component types (via Type Tabs), and users learning about the ecosystem (via sorting/exploration).
    - **Action-Oriented Design:** Every element should guide users toward finding relevant components, evaluating them quickly via enriched cards, comparing them effectively, and taking the next step (viewing details, testing in Playground, hosting, using in workflows - *links* to these features, not the features themselves on this page).
    - **Showcase Omni Value Proposition:** Implicitly demonstrate MCP Omni's value (Aggregation, Enrichment, Hosting options, Testing, Content integration) through the data presented (source logos, quality scores, tool counts, hosted status, linked use cases) and the powerful filtering/comparison tools provided.
    - **Maintain Ecosystem Pulse:** Reflect the dynamic nature of the MCP space through prominent display of counts, sort options for recency, and potentially trending tags or services.
- **Target Audience & Scenarios:** (As previously defined, focusing on immediate interaction)
    - *Developer needing specific functionality:* Lands -> Uses Omni Search for "image generation tool" -> AI suggests filtering `Type: Tool` or `Type: Server` -> User selects `Tool` -> Scans results, noting implementing Servers/Servers -> Clicks to compare two promising Tool implementations.
    - *User investigating "Slack":* Lands -> Uses "Filter by Integrated Service" -> Selects "Slack" -> Clicks `Servers` Tab (shows Slack Servers/Servers) -> Clicks `Tools` Tab (shows specific Slack API tools) -> Clicks `Use Cases` Tab (shows tutorials involving Slack).
    - *New User Exploring Clients:* Lands -> Clicks `Clients` Tab -> Uses Filter Sidebar to select `Platform OS: macOS` and `Supports Local Servers: Yes` -> Sorts by `Rating` -> Reviews top client cards -> Adds two to compare.
- **Layout & Structure:** **Dynamic, Full-Screen 3-Column Discovery Interface** (Replacing traditional Homepage content).
    - **1. Minimal Persistent Header:** (Consistent Platform Element)
        - `Left:` MCP Omni Logo (Compact).
        - `Center:` **Omni Search Bar** (Primary interaction element).
        - `Right:` Key Platform Action Links (`Host a Server`, `Playground`, `Docs`, `Pricing`), User Controls (`Sign In`/`Sign Up`/User Menu).
    - **2. Main Discovery Interface (Below Header, filling viewport):**
        - **Component Type Tabs (Horizontal Bar - Sticky/Prominent):** Positioned directly under the header or at the very top of the middle column. Acts as the primary mode switcher. Tabs: `All Items`, `Servers`, `Clients`, `Servers (Hosted)`, `Tools`, `Use Cases`, `Posts`. *Crucial: Selecting a tab instantly filters results AND adapts the Left Sidebar filters and Right Sidebar sorting options.*
        - **Left Sidebar (Filters - ~25% width):**
            - **Visibility:** Persistently visible on wider screens (desktop/large tablet), collapses to an icon-triggered drawer/off-canvas panel on smaller screens.
            - **Header:** `Filters` title, `[Refresh Icon] Clear All Filters` button.
            - **Content:** Dynamic, context-aware faceted filtering controls using accordions for organization (detailed below). Shows counts per filter option.
        - **Middle Content Area (Results Feed - ~55-60% width):**
            - **Results Header Bar:** Displays `Active Filter Pills` (removable), `Results Count` ("Showing 1-24 of 356 Servers..."), `Sorting Dropdown` (context-aware), `View Mode Toggle` (`Grid`/`List`).
            - **Results Grid/List:** Displays Component Cards matching current type tab and filters. Uses infinite scroll or robust pagination.
        - **Right Sidebar (Context & Actions - ~20% width):**
            - **Visibility:** Persistently visible on wider screens, collapses to drawer/panel on smaller screens.
            - **Content:** Dynamic contextual information, Saved Searches (logged-in), Comparison Tray access point, Submit button (detailed below).
- **Key Features & Functionality (Hyper-Detailed):**

    **1. Omni Search Bar (Header):**

    - **Functionality:** As specified before - Keyword, Semantic (AI-Enhanced), Syntax support (`type:`, `tag:`, `service:`, `author:`). AI suggests filters/types based on query. Scope defaults to active Type Tab, override to "All Items".
    - **UI:** Wide input, clear placeholder, loading indicator, clear button. AI suggestions appear below as clickable pills.

    **2. Component Type Tabs:**

    - **Functionality:** Single-select tabs acting as the primary component type filter. Updates counts dynamically as other filters are applied. Clicking a tab resets type-specific filters but preserves general filters (like Tags, Source, Service).
    - **UI:** Use styled tabs (e.g., underlined, background change) for active state. Include live count badge (`Servers (356)`). Smooth animated transition for filter sidebar adaptation if possible.

    **3. Dynamic Multi-Faceted Filtering (Left Sidebar):**

    - **Structure:** Accordion sections for `Source & Origin`, `Tags`, `Integrated Service`, `Trust & Quality`, and **Type-Specific Filters**.
    - **Interaction:** Checkboxes for multi-select, radio buttons for single-select. Applying a filter instantly updates the middle results area and counts. Filter counts update based on *other* applied filters.
    - **`Source & Origin` Facet:** Checkboxes: `MCP Omni Verified`, `Official Provider`, `Verified Author`, `Community`. `Aggregated From:` subsection with checkboxes for `[Glama Logo]`, `[Smithery Logo]`, `[mcp.so Logo]`, etc.
    - **`Tags` Facet:** Searchable multi-select input with type-ahead suggestions. Displays selected tags as removable pills. Shows "Popular Tags" relevant to the active Type Tab.
    - **`Integrated Service / App` Facet:** Searchable multi-select dropdown with Service Logos. Applies to Servers, Servers, Tools, Use Cases.
    - **`Trust & Quality` Facet:** `Security Scan:` (Checkboxes: Passed, Failed, N/A), `Quality Score:` (Range slider or Buttons: A, B, C...), `License Type:` (Checkboxes: Permissive, Copyleft, etc.).
    - **`Type-Specific Filters` Section (Dynamic):** This section *changes entirely* based on the active Component Type Tab:
        - **IF `Servers` or `Servers` Tab Active:** Shows `Server Type` (Remote/Local), `Hosting` (Omni/External - only if Servers tab active), `Technology Stack`.
        - **IF `Clients` Tab Active:** Shows `Client Type`, `Platform OS`, `LLM Compatibility`.
        - **IF `Tools` Tab Active:** Shows `Functional Category`.
        - **IF `Use Cases` Tab Active:** Shows `Difficulty Level`, `Use Case Category`.
        - **IF `Posts` Tab Active:** Shows `Post Category`.
    - **Active Filters Display:** At the top of the sidebar (and/or below the results header), show removable pills for all currently active filters.

    **4. Adaptive Sorting Controls (Middle Column Results Header):**

    - **UI:** Single dropdown labeled "Sort By:". Options are context-aware based on active Type Tab. Includes Asc/Desc toggle where relevant.
    - **Examples:** `Servers` tab shows `Popularity`, `Recency`, `Quality Score`, `Tool Count`, `A-Z`. `Clients` tab shows `Popularity`, `Recency`, `Rating`, `MCP Compat Score`, `A-Z`.

    **5. Dynamic Component Cards (Middle Content Area):**

    - **Design:** As previously detailed, emphasizing type-specific key info for rapid assessment.
        - **Mandatory Elements:** Name (Link), Author (Link+Verified `✓`), Type Badge, Description (short), Key Tags (pills). Actions: Bookmark `[Bookmark Icon]`, Add to Compare `[Checkbox]`.
        - **Server/Server Specifics:** **Tool Count Badge**, Trust Badges (`🛡️`, `⭐`, `📈`), Usage Stats (`↓`), Last Updated, **Aggregated Source Logos**.
        - **Client Specifics:** Platform Icons, Rating (`⭐`), **MCP Compat Score Badge**.
        - **Tool Specifics:** Integrated Service Logo, Implementing Server Link + Type/Rating, Test Action (`[Playground Icon]`).
        - **Use Case/Post Specifics:** Thumbnail, Difficulty/Category, Component Icons.
    - **Visual Distinction:** Use subtle background color variations or distinct icons within the cards to further differentiate component types at a glance.

    **6. Comparison Integration:**

    - **Selection:** Checkboxes on the top-left corner of each card. Visible on hover or persistently.
    - **Tray/Button:** A persistent element (e.g., bottom bar) appears when >=2 items are checked. Shows small thumbnails/names of selected items (max 4). Displays `Compare (X items)` button. Includes "Clear Selection" option. Clicking "Compare" navigates to `/registry/compare` with selected items.

    **7. Contextual Sidebar (Right):**

    - **`Featured [Type]` Section:** Dynamically shows 2-3 curated/popular items matching the active Type Tab (e.g., Featured Servers).
    - **`Saved Searches` Section:** (Logged-in users) Lists user's saved filter/search combinations for quick access. "Save Current View" button appears here when filters/search active.
    - **`Quick Links` Section:** Contextual links: `Guide: Using Filters Effectively`, `What are Hosted Servers?`, `Submit a [Type]`, `View Playground`.
    - **`Comparison Tray Access:`** Button to show/hide the comparison tray if it's implemented as collapsible.
- **Interaction & User Flows:**
    - User lands -> Sees initial view (e.g., `All Items` or `Servers`, sorted by `Popularity`).
    - **Scenario 1 (Search & Refine):** User types "database connector" in Omni Search -> AI suggests filtering by `Type: Server` and `Tag: Database` -> User clicks suggestions or sees results -> User clicks `Servers` Tab -> Filters adapt -> User further filters by `Technology: Python` and `License: Permissive` -> User sorts by `Quality Score` -> User selects top 3 using checkboxes -> Clicks "Compare".
    - **Scenario 2 (Explore App):** User clicks "Filter by Integrated Service" -> Selects "GitHub" -> Explores results across `Servers`, `Tools`, `Use Cases` tabs -> Bookmarks relevant items -> Clicks a Server card to view details.
    - **Scenario 3 (Quick Type Browse):** User clicks `Clients` Tab -> Sorts by `Rating` -> Toggles to `List View` -> Scans top-rated clients -> Clicks through to detail pages.
- **Creative Enhancements & Considerations:**
    - **"Why These Results?" Feature:** For AI-powered search/filtering, add a small link explaining *why* certain results are shown based on the semantic query and applied filters.
    - **Visual Filter Density Indicator:** In the Left Sidebar, subtly indicate how many results each filter option would yield *before* clicking (e.g., dimmed counts, mini bar chart previews).
    - **Instant Previews (Optional):** On hover over a card (Grid view), show a small pop-up/tooltip with slightly more detail (e.g., full description, top 3 tool names for a server) to reduce clicks for evaluation.
    - **Personalization (Logged-in):** Remember user's preferred Type Tab, View Mode, and potentially surface recommendations based on past activity or saved Skillsets.
    - **Performance:** The dynamic nature requires aggressive optimization. Use efficient backend indexing (Elasticsearch/Algolia), lazy-loading for images/off-screen cards, optimized API calls for filter counts, and potentially caching common filter combinations. Frontend state management needs to handle rapid updates smoothly.



# Single Server Detail

**MCP Omni - Comprehensive Specification**

**Document Section: III. Page-by-Page Specification**

**(B) MCP Server Detail & Management Page ((`/servers/[server_name]`)**

- **Page Name/Type:** MCP Server Detail & Management Page
- **Purpose & Goals:**
    - **Unified Server Hub:** Serve as the definitive, comprehensive resource for *any* MCP Server listed in the MCP Omni registry, whether it's an external community project, an official provider's offering, or a server deployed and hosted *directly on the MCP Omni platform*.
    - **Clear Context Distinction:** Immediately and unambiguously communicate the server's origin and nature (External-Remote, External-Local, Omni-Hosted) through clear visual indicators and adapt displayed information (connection methods, configuration needs, management actions) accordingly.
    - **Deep Evaluation:** Enable thorough assessment based on standardized metadata, detailed tool manifests, complete configuration schemas, security scan results, quality scores, version history, community reviews, practical use cases, and ecosystem presence. Facilitate deep evaluation through structured schema, security scores, reviews, and direct integration with the Playground for interactive testing of its Tools.
    - **Facilitate Integration & Usage:** Provide tailored, actionable guidance for connecting to or utilizing the server based on its type (Remote, Local, Omni-Hosted) across various clients (SDKs, specific apps, manual setup). Include direct links to interactive testing in the Playground. Offer guidance on client configuration ("Get Connection Info") and linking to Use Cases for all servers.
    - **Enable Platform Hosting & Management:** For servers eligible for or already hosted on MCP Omni, provide integrated controls for deployment configuration, status monitoring, log access, resource management, and lifecycle actions (Start/Stop/Configure/Redeploy/Logs/Metrics) directly within the relevant tabs. Provide the unique SSE endpoint and specific usage examples for Omni-Hosted servers.
    - **Centralize Information:** Act as the single point of access for all information pertaining to a specific server version, including its tools, schema, documentation (README), usage examples, security posture, community feedback, version history, and deployment status (if hosted).
    - **Foster Community & Trust:** Consolidate trust signals (verification, scores, scans, license, reviews) and provide a space for community discussion (comments/Q&A).
- **Target Audience & Scenarios:**
    - *Developer Evaluating External Server:* "Is this community GitHub server (STDIO) trustworthy and well-documented? What tools does it offer? How do I run it locally?" -> Checks Security/Score tab, views Tools tab, checks Schema/Config tab (`Connection` & `Runtime Config` sub-tabs) for run commands/needs, reads Reviews.
    - *Developer Evaluating Omni-Hosted Server:* "Does Omni's official hosted Salesforce Server have the 'create_lead' tool? How do I connect to its SSE endpoint? What are the resource limits?" -> Checks Tools tab, checks `Schema & Config` (`Connection` sub-tab) or `Installation & Usage` tab for SSE endpoint/auth details, checks `Deployment & Monitoring` tab for resource info.
    - *User Connecting Client:* "How do I add this specific Remote server (found via aggregator link) to Claude Desktop?" -> Goes to `Installation & Usage` tab, finds relevant client guide, uses "Get Connection Info" helper modal for tailored snippets.
    - *Server Author (External Server):* "Has Omni scanned my server repo recently? Are there any new reviews? Can I claim ownership?" -> Checks Security/Score tab, Reviews tab, sees "Claim Ownership" button in sidebar.
    - *Server Author (Omni-Hosted Server):* "My hosted Server deployment failed. What went wrong? Let me check the logs." -> Navigates to `Deployment & Monitoring` tab, views Logs section. "I need to update an API key environment variable for my hosted Server." -> Navigates to `Deployment & Monitoring` tab -> Configuration section (or `Schema & Config` -> `Runtime Config` sub-tab) -> Edits ENV VAR.
- **Layout & Structure:** **Adaptive 2-Column Layout.** The core structure remains consistent, but the *content and actions* within tabs and the sidebar dynamically adapt based on the server's `Hosting Type` (External vs. Omni-Hosted) and `Server Type` (Remote vs. Local).
    - **Main Content Area (Left, approx. 65-70% width):**
        1. Server Header Area (Comprehensive identification, including Hosting Type).
        2. Tab Navigation (Dynamically adjusts available/emphasized tabs).
        3. Tab Content Area (Content within tabs adapts contextually).
    - **Right Sidebar (Right, approx. 30-35% width):**
        1. Primary Action Buttons (Dynamically change based on Hosting Type and user permissions).
        2. Metadata Summary Card (Includes Hosting Type).
        3. Contextual Links/Info (Adapts based on Hosting Type).
- **Key UI Components & Elements (Detailed & Adaptive):**
    1. **Top Navigation Bar:** (Platform Wide, Consistent).
    2. **Breadcrumbs:** `MCP Omni > Registry > Servers > [Namespace] > [Server Name] > [Version]`.
    3. **Server Header Area (Above Tabs - Includes Hosting Context):**
        - **Title Block:** `Server Name`, `by @Author/Namespace ✓` (with Verification Checkmark), `[Badge: Official/Verified/Community]`.
        - **Version Selector:** Dropdown (`v1.0.0`, `latest`, etc.).
        - **Type & Hosting Badges (CRITICAL):** Display *both* clearly and visually distinctly:
            - `[API Icon] Remote (SSE/HTTP)` **or** `[Terminal Icon] Local (STDIO)`
            - **AND** `[External Link Icon] External Server` **or** `[Omni Logo Icon] Hosted by Omni`. These badges immediately set the context for the rest of the page.
        - **Tags Row:** Functional, Technology, License tags.
        - **Stats Row:** Usage/Downloads, Rating, Forks, Rank, Quality Score Summary (`📈 B`).
        - **Dates Row:** Published, Last Updated.
        - **External Links Row:** Source Repo, Issue Tracker, Official Docs links.
    1. **Tab Navigation (Adaptive Emphasis):**
        - **Core Tabs (Always Visible):** `Overview`, `Tools`, `Schema & Config`, `Installation & Usage`, `Security & Score`, `Reviews & Comments`, `Use Cases`, `Related Items`, `Versions`.
        - **Conditional Tab:** `Deployment & Monitoring` - **Visible *only* if `Hosting Type: Hosted by Omni` AND the current user has management permissions.**
        - **Emphasis:** While all core tabs are present, the *default active tab* might shift. For External servers, `Installation & Usage` might be default. For Hosted servers, `Deployment & Monitoring` might be default (if user has permissions and is managing).
    1. **Tab Content Areas (Detailed & Adaptive Specifications):**
        - **`Overview` Tab:**
            - **Content:** Rendered README/Description from the source. Curated summary if available.
            - **Adaptation:** May include a small banner if Omni-Hosted linking to the `Deployment` tab for management.
        - **`Tools` Tab:**
            - **Content:** Detailed list of Tools provided by *this server version*. Each tool shows: Name, Description, Parameters (Name, Type, Req, Desc, Default), Output Schema/Desc. Each tool name links to its canonical Tool Detail Page (`/registry/tools/[server-namespace]/[server-name]/[tool-name]/[version]`).
            - **Adaptation:** Include a prominent `[Playground Icon] Test This Server in Playground` button at the top. Each tool row has its own `[Playground Icon] Test in Playground` link, pre-configuring the Playground for that specific tool. The *target* for the playground test will implicitly be the external server definition or the user's specific Omni-hosted instance.
        - **`Schema & Config` Tab:** **Crucial Adaptation.** Uses Sub-Tabs: `Connection`, `Runtime Config`, `Manifest`.
            - **`Connection` Sub-Tab:** (Describes *how* to connect programmatically)
                - *External-Remote:* Shows Base URL structure, Authentication details (Header/Bearer Token etc. as defined in manifest).
                - *External-Local:* Shows required install/run commands, STDIO communication protocol explanation.
                - *Omni-Hosted:* Clearly displays the **unique, secure Omni SSE Endpoint URL** (`wss://[instance-id].omni.mcphub.ai/` example) provided for *this specific hosted instance*. Includes a "Copy Endpoint" button. Details required Authentication (Platform API Key or specific tokens associated with Skillsets). Provides link to generate/manage keys.
            - **`Runtime Config` Sub-Tab:** (Describes ENV VARS / configuration values)
                - *External Servers:* Displays the *defined* required/optional ENV VARS from the manifest/schema needed to *run the server yourself* (Read-only table: Name, Required, Secret, Description, Default). Explains what needs to be set for the server to run *anywhere*. Focus is informational for self-hosting.
                - *Omni-Hosted:* Displays ENV VARS required *for deployment on MCP Omni*. **If user has permissions**, this becomes an **editable form** showing the *actual* values configured for *this specific deployment instance* (values masked for secrets). Includes UI to *edit* these deployment-specific variables (Key, Value input, Add/Remove rows, Save button). Save triggers confirmation and potentially redeploy.
            - **`Manifest` Sub-Tab:** Displays `mcp-omni.json` content (read-only). Validation status shown. Same for both types. Includes Prompts/Resources section if defined.
        - **`Installation & Usage` Tab:** **Crucial Adaptation.** Focuses on *how clients consume* the server. May use Sub-Tabs for SDKs, Specific Clients (Claude, Cursor...), Manual/API.
            - **Content Adaptation:** All code examples (SDK Python/TS, `curl`, client setup guides with screenshots) MUST dynamically use the correct connection method based on the Server's Type & Hosting:
                - *External-Remote Examples:* Use generic endpoint placeholder based on manifest, show Header/Param auth examples.
                - *External-Local Examples:* Show process spawning, stdin/stdout interaction examples using SDKs or command line.
                - *Omni-Hosted Examples:* Use the specific `YOUR_OMNI_SKILL_ENDPOINT` and Platform API Key / Skillset token authentication methods. Include specific SDK/API examples (`curl`) demonstrating connection to *this hosted SSE endpoint*.
            - **"Get Connection Info" Helper Button:** Always present. Opens the **Install Helper Modal** providing tailored Auto/JSON/URL/STDIO configuration snippets appropriate for the *specific type and hosting model* of the server being viewed, for use in various clients.
            - **Integrating into Omni Workflows (Omni-Hosted):** Link to docs/guides on how to use this hosted Server (as a Skill) within the (future/potential) MCP Omni workflow builder.
        - **`Security & Score` Tab:**
            - **Content:** Displays score based on repo analysis, manifest validity, license check, user reviews. Security scan results (dependency, static analysis), declared required permissions.
            - **Adaptation:** For Omni-Hosted servers, security scans are performed *by MCP Omni* during build/deploy. Results are more definitive. Required permissions are *enforced* by the platform sandbox; display actual enforced permissions. For External servers, scans are *best-effort* on external repos (clearly stated) or based on submitted reports; required permissions are *declared*. Clearly label the source/scope of the scans shown.
        - **`Reviews & Comments` Tab:** (Standard) Community feedback specific to this Server (regardless of hosting). Provides space for discussion (comments/Q&A).
        - **`Use Cases` Tab:** (Standard) Links to Use Cases (tutorials, guides) featuring this Server or its Tools.
        - **`Related Items` Tab:** (Standard) Related Servers (external or hosted), potentially compatible Clients. Includes Comparison feature access.
        - **`Versions` Tab:** (Standard) Version history, changelog rendering (from repo/submissions). Allows comparing versions.
        - **`Deployment & Monitoring` Tab (Conditional: Omni-Hosted & User has Permissions Only):** (Integrates previous "Deployed Skills Management" features)
            - **Status & Controls Section:** Clear status indicator (`Running`, `Stopped`, `Building`, `Failed`, etc.). Buttons: `Start`, `Stop`, `Restart`, `Redeploy Latest` (triggers rebuild from linked repo/version using current config), `Delete Deployment` (with confirmation).
            - **Endpoint & Access Section:** Displays the live SSE Endpoint URL. Button/link to manage API Keys associated with platform access. Link to configure access control/sharing within Org (if applicable).
            - **Resource Usage Section:** Show live/recent metrics graphs/values for CPU Usage, Memory Usage, Network IO/Bandwidth, Call Counts, Error Rates for *this specific deployment*. Time range selector for metrics. Link to more detailed historical metrics/tracing in main `/settings/observability` section.
            - **Configuration Section:** *Mirror/Link* to the editable Runtime Config ENV VAR form from the `Schema & Config` tab for convenience. Changes here affect the live deployment after save/redeploy.
            - **Logs Section:** Embedded terminal-like log viewer showing recent build and runtime logs from the hosted Server instance. Filter by log level (stdout/stderr), search logs, specify time range. Option to download logs. Set retention period based on plan.
            - **Link:** Clear link to the main `/settings/hosting` page for managing *all* hosted Servers.
    1. **Right Sidebar (Adaptive Actions & Info):**
        - **Primary Action Buttons Block:** **Dynamically Changes Based on Hosting Type & Permissions:**
            - *External Server:* `[Playground Icon] Test in Playground`, `[Code Icon] Get Connection Info` (Opens Modal), `[Bookmark Icon] Bookmark Server`, `[Compare Icon] Add to Compare`, `[Claim Icon] Claim Ownership` (if unclaimed by author).
            - *Omni-Hosted Server (User has management permissions):* `[Settings Icon] Manage Deployment` (Scrolls/activates Deployment Tab), `[Playground Icon] Test Hosted Instance`, `[Skillset Icon] Add to Skillset`, `[Bookmark Icon] Bookmark Server`, `[Compare Icon] Add to Compare`.
            - *Omni-Hosted Server (User viewing public listing, no manage permission):* `[Playground Icon] Test in Playground` (may use a generic test instance or prompt user to deploy), `[Code Icon] Get Connection Info` (provides generic endpoint info/auth requirements for platform connection), `[Bookmark Icon] Bookmark Server`, `[Compare Icon] Add to Compare`, `[Skillset Icon] Add to Skillset` (if applicable).
        - **Metadata Summary Card:** Includes the prominent `Type:` and `Hosting:` badges along with Author, License, Score Summary, Security Status, Last Updated.
        - **Registry Source Card:** Shows aggregator source logos (Glama, Smithery, etc.) if applicable.
        - **Quick Links Card:** Source Repo, Issues, Official Docs.
        - **Hosting Status / Info Snippet:**
            - *IF External/Community:* "This is an externally managed server. Connect using methods under 'Installation & Usage'." Optionally add: "Want to run this securely without self-hosting?" `[Deploy Icon] Host this Server on Omni` button (initiates a flow to deploy this external server's code onto the platform, if compatible).
            - *IF Omni-Hosted:* "Hosted by MCP Omni. Connect using the platform endpoint and credentials. Manage in the 'Deployment' tab (if permitted)."
    1. **Install Helper Modal Component (Triggered by "Get Connection Info"):**
        - **Adaptation:** Provides tabs/options for different clients/methods (Auto-config JSON, Connection URL, Manual Setup Snippets, STDIO command examples). The generated JSON/URL/STDIO snippets MUST be tailored to the specific Server Type & Hosting model being viewed. E.g., for Omni-Hosted, it provides the platform SSE URL and guidance on using Platform API keys.
- **Information Architecture & Content:**
    - The core `Server` entity needs fields to track `hosting_type` (`external`, `omni_hosted`) and `server_type` (`remote`, `local`).
    - For `omni_hosted` servers, link to `Deployment` entities storing runtime state, configuration overrides, unique endpoint URLs, logs, metrics, etc.
    - Backend logic required to dynamically show/hide tabs, adapt content within tabs (e.g., editable config form vs. read-only), and change sidebar actions based on `hosting_type`, `server_type`, and user permissions (RBAC).
    - Requires robust parsing and display of manifest data (tools, schema, config defs).
    - Requires tight integration with hosting infrastructure (provisioning, runtime, monitoring, logging) for Omni-Hosted server features.
    - **Version Sync:** Ensure that when viewing an Omni-Hosted Server, the displayed version clearly corresponds to the *deployed* version, while still allowing browsing of other available versions (potentially leading to a redeploy action) via the `Versions` tab.
- **Interaction & User Flows:**
    - User lands on page -> Immediately sees Hosting/Type badges setting the context.
    - Tabs and Sidebar actions adapt based on this context and user permissions.
    - *If External:* User focuses on understanding (`Overview`, `Tools`, `Schema`), evaluating (`Security`, `Reviews`), and connecting (`Installation & Usage`, `Get Connection Info`, `Playground`). May consider clicking "Host this Server on Omni".
    - *If Omni-Hosted (with permissions):* User focuses on managing (`Deployment & Monitoring`), understanding capabilities (`Tools`, `Schema`), connecting (`Installation & Usage`), and checking status/logs/metrics (`Deployment & Monitoring`).
    - *If Omni-Hosted (no permissions):* User evaluates like an external server but sees platform-specific connection info/examples on `Installation & Usage` tab. Can bookmark or add to Skillset.
- **Considerations & Notes:**
    - **Clarity of Distinction:** Use consistent and unambiguous language/visuals throughout the page to differentiate External vs. Omni-Hosted states and the implications for configuration/usage/management. This is paramount.
    - **Hosting Eligibility & Flow:** Define clear criteria for which external servers are eligible for the "Host this Server on Omni" feature (e.g., source availability, licensing, compatibility with Omni's execution environment - Wasm/Containers?). The hosting initiation flow needs careful design.
    - **Permissions Model:** Robust Role-Based Access Control (RBAC) needed for managing access to Deployment tab features, configuration editing, and start/stop actions on Omni-Hosted servers, especially within Organizations.
    - **Performance:** Ensure dynamic content adaptation based on hosting type is performant and doesn't introduce significant page load delays. API calls for deployment status, logs, metrics must be efficient. Caching strategies may be needed.



# Universal Registry > All Servers

**Document Section: III. Page-by-Page Specification**

**(B) Unified Registry Explore - Servers View (`/ via Server View`)**

- **Page Name/Type:** MCP Server Directory / Unified Registry Explore (Servers Tab Active)
- **Purpose & Goals:**
    - **Targeted Server Discovery:** Provide the definitive interface for users specifically looking for MCP Servers (external community/official servers OR platform-hosted instances fulfilling a server role), enabling them to find components based on functionality, type, hosting model, trust signals, and technical attributes.
    - **Rapid Evaluation & Comparison:** Allow users to quickly assess and compare different servers directly from the listing using highly informative cards that surface critical differentiators like Server Type (Remote/Local), Hosting Model (External/Omni), Tool Count, Security/Quality scores, and community metrics.
    - **Seamless Integration Pathway:** Guide users naturally from discovering a server in the list towards evaluating its details, testing its capabilities (via Playground links), understanding its setup (`Get Connection Info` implications), and potentially deploying it on the platform (`Host this Server` action).
    - **Contextual Filtering & Sorting:** Offer powerful filtering and sorting options specifically relevant to servers (e.g., filter by Technology Stack, sort by Tool Count or Quality Score) while maintaining consistency with the overall Discovery Hub interaction patterns.
    - **Showcase Aggregation & Hosting Value:** Clearly indicate the origin of server listings (aggregated sources, user submissions, Omni-hosted) and visually distinguish platform-hosted options, highlighting MCP Omni's unique value proposition.
- **Target Audience & Scenarios:**
    - *Developer seeking specific integration:* "I need a **Remote** server to interact with the **GitHub API** using **Python**, preferably **Official** or **Verified**." -> Selects `Servers` tab -> Uses Filters: `Server Type: Remote`, `Integrated Service: GitHub`, `Technology: Python`, `Source: Official Provider / Verified Author`.
    - *User comparing database options:* "Show me all **Local (STDIO)** servers tagged **#database**, sorted by **Quality Score**." -> Selects `Servers` tab -> Filters `Server Type: Local`, `Tags: #database` -> Sorts by `Quality Score` -> Examines top results.
    - *User looking for managed solution:* "Which **CRM** servers can be **Hosted by Omni**?" -> Selects `Servers` tab -> Filters `Hosting: Hosted by Omni`, `Tags: #CRM`.
    - *Security-conscious user:* "List **Remote** servers with **Security Scan: Passed** and **License: Permissive**." -> Selects `Servers` tab -> Filters `Server Type: Remote`, `Security Scan Status: Passed`, `License Type: Permissive`.
- **Layout & Structure:** **Consistent 3-Column Discovery Interface** (Inherited from `/registry` Homepage Spec).
    - **Minimal Persistent Header:** Logo, Omni Search Bar, Key Platform Links, User Controls.
    - **Main Discovery Interface:**
        - **Component Type Tabs:** The `Servers ([Count])` tab is visually selected and active.
        - **Left Sidebar (Filters - ~25% width):** Filters are dynamically adjusted to be relevant specifically for Servers.
        - **Middle Content Area (Results Feed - ~55-60% width):**
            - Results Header Bar: Active Filter Pills, Results Count, `Sorting Dropdown` (Server-specific options), `View Mode Toggle` (`Grid`/`List`).
            - Main Grid/List Area: Displays **Server Cards (Detailed Listing Version)**.
            - Pagination Controls.
        - **Right Sidebar (Sorting & Context - ~20% width):** Contains Server-specific sorting options and contextual information.
- **Key Features & Functionality (Detailed - Server View Context):**

    **1. Omni Search Bar:**

    - Functionality remains the same (Keyword, Semantic, Syntax), but search scope defaults to `Servers` when this tab is active. AI suggestions prioritize server names, authors, tool names within servers, integrated services, and relevant tags.

    **2. Component Type Tabs:**

    - `Servers ([Count])` tab is active. Counts reflect servers matching current filters.

    **3. Dynamic Multi-Faceted Filtering (Left Sidebar - Server Context):**

    - **Key Adaptation:** The `Type-Specific Filters` section is tailored for Servers. `Integrated Service / App` remains highly relevant.
    - **Visible Facets:**
        - **`Source & Origin`:** (Standard: Omni Verified, Official, Verified Author, Community, Aggregated From [Logos]).
        - **`Tags`:** (Standard: Searchable multi-select). Popular Tags shown are those most common *among servers*.
        - **`Integrated Service / App`:** (Standard: Searchable multi-select with logos). Filters servers designed for specific apps.
        - **`Trust & Quality`:** `Security Scan Status`, `Quality Score Range`, `License Type`.
        - **`Server Type` (Crucial Server Filter):** Radio Buttons or Checkboxes: `Remote (SSE/HTTP)`, `Local (STDIO)`.
        - **`Hosting Model` (Crucial Server Filter):** Radio Buttons or Checkboxes: `Hosted by Omni`, `External / Self-Hosted`.
        - **`Technology Stack`:** Checkboxes/Searchable list: `Python`, `TypeScript`, `Go`, `Rust`, `Java`, etc.
        - **`Author/Namespace`:** Text input filter.
        - **`Stats Filters`:** Range sliders for `Tool Count`, `Downloads/Usage`, `Rating`.
    - **Active Filters Display:** Prominently show applied server-specific filters.

    **4. Adaptive Sorting Controls (Right Sidebar - Server Context):**

    - **UI:** Dropdown labeled "Sort Servers By:". Includes Asc/Desc toggle.
    - **Options:** `Relevance` (search), `Popularity` (Downloads/Usage or Rating - user selectable?), `Recency` (Last Updated), **`Quality Score` (Desc/Asc)**, **`Security Status`** (e.g., Passed first), **`Tool Count` (Desc/Asc)**, `A-Z`, `Z-A`.

    **5. Server Card Component (Middle Content Area - Detailed Listing Version):**

    - **Goal:** Provide maximum scannable information for evaluating and comparing servers directly in the list/grid, emphasizing key differentiators identified in the Server Detail Page spec.
    - **Design (Adaptable for Grid/List - List view allows more horizontal space):**
        - **Layout:** Clear sections within the card boundary. Consistent padding. Hover effect enhances clickability. Comparison Checkbox (`[Checkbox]`) always visible top-left. Bookmark Icon (`[Bookmark Icon]`) always visible top-right.
        - **Content Sections:**
            1. **Header Block:**
                - `Logo/Icon`: Server-specific or generic category icon.
                - `Server Name`: **Prominent, Bold, Clickable Link** to detail page.
                - `Author/Namespace`: `by @author ✓` (Linked, with Verification Badge).
                - `[Badge: Official/Community...]` Source/Verification Badge.
            1. **Type & Hosting Block (CRITICAL Badges):** Display these *immediately* below the header for instant context:
                - `[API Icon] Remote` **or** `[Terminal Icon] Local`
                - `[Omni Logo Icon] Hosted by Omni` **or** `[External Link Icon] External`
            1. **Description Block:** Concise 1-2 line summary of the server's purpose. Ellipsis for overflow, full text on hover/tooltip.
            2. **Capabilities Snippet:**
                - `[Tools Icon] Tool Count:` **`25 Tools`** (Bold number).
                - *(Enhancement)* `Key Tools:` List 1-2 representative tool names (e.g., `get_files`, `send_message`). Tooltip shows more.
            1. **Tags Block:** Display ~3-5 relevant functional/tech tags as pills (clickable).
            2. **Trust & Quality Block (Compact):** Row of key indicators with icons/tooltips:
                - `Rating:` `⭐ 4.7 (15)`
                - `Quality:` `📈 B+`
                - `Security:` `🛡️ Passed`
                - `License:` `[License Icon] MIT`
            1. **Activity & Stats Block:**
                - `Usage:` `↓ 1.7M/wk`
                - `Updated:` `[Calendar Icon] 2w ago`
            1. **Aggregation Source Block (Conditional):** If aggregated, show row of small source registry logos (`[Glama] [Smithery]...`).
        - **Card Actions (Subtle, potentially on hover in Grid View):**
            - `[Playground Icon] Quick Test`: Direct link to Playground pre-configured for this server (might prompt for tool selection if many exist).
            - `[Compare Icon] Compare`: Alternative way to add to comparison (if checkbox isn't used).
    - **List View Adaptation:** Arrange content blocks more horizontally within the row to leverage width. Potentially show more tags or key tools directly. Stats might become sortable columns.

    **6. Comparison Integration:**

    - Checkboxes on Server Cards add items to the persistent Comparison Tray. Comparing servers uses the detailed attribute list defined previously.

    **7. Contextual Sidebar (Right - Server Context):**

    - **`Featured Servers`:** Curated list relevant to current filters.
    - **`Popular Tags (Servers)`:** List of clickable tags frequently applied to servers.
    - **`Quick Links:`** "Guide: Choosing an MCP Server", "Guide: Hosting Servers on Omni", "Submit a Server", "View Playground".
    - **`Comparison Tray Access.`**
- **Information Architecture & Content:**
    - Requires the full `Server` entity data model, including fields for `hosting_type`, `server_type`, `tool_count`, `quality_score`, `security_status`, aggregated `source_registries`, detailed stats, tags, license, etc.
    - Filter facets need to be populated accurately based on this data. Tagging system needs to be robust.
- **Interaction & User Flows:**
    - User selects `Servers` Tab -> View loads, showing servers sorted by default (e.g., Popularity). Filters adapt to Server context.
    - User applies filters (e.g., `Server Type: Local`, `Tag: #filesystem`) -> Results update instantly.
    - User changes sort order (e.g., `Sort By: Quality Score`).
    - User scans cards, quickly identifying Type (Remote/Local) and Hosting (External/Omni) from badges. Compares Tool Counts, Ratings, Security status.
    - User hovers over stats/icons for tooltips.
    - User clicks "Quick Test" to jump to Playground.
    - User selects several interesting servers using checkboxes -> Clicks "Compare" in the tray.
    - User clicks a Server Name -> Navigates to the full Server Detail Page.
- **Creative Enhancements & Considerations:**
    - **"Omni Certified" Badge:** Introduce a higher tier than just "Verified Author" for servers (especially Omni-Hosted) that meet stringent quality, security, and documentation standards set by the platform.
    - **Direct "Host This" Button on External Server Cards:** For compatible external servers, add a subtle `[Deploy Icon] Host on Omni` action directly to the card, streamlining the path to using the platform's hosting.
    - **Visual Tool Preview on Hover:** On card hover (Grid view), briefly show a small overlay listing the top 5 most used/important tool names provided by that server.
    - **Performance:** Rendering potentially thousands of detailed server cards with dynamic data requires significant optimization (virtual scrolling/infinite scroll, efficient data fetching, potentially server-side rendering or optimized client-side rendering). Ensure filters and sorts are extremely fast.
    - **Card Density vs. Clarity:** Balance providing enough information on the card for quick assessment against keeping the card uncluttered and easy to scan. The List view allows more density.

# Single Server Detail > Single Tool Detail

**MCP Omni - Comprehensive Specification**

**Document Section: III. Page-by-Page Specification**

**(E) MCP Tool Detail Page (`/servers/[server_name]/[tool-unique-identifier]`)**

- **Page Name/Type:** MCP Tool Detail & Implementation Comparison Page
- **Purpose & Goals:**
    - **Canonical Function Hub:** Serve as the definitive reference page for a specific *conceptual* MCP Tool/Function (e.g., `send_email`, `get_calendar_events`, `summarize_text`), regardless of which server implements it. Define the tool's purpose, standard parameters, and expected outcomes.
    - **Implementation Discovery & Comparison:** **Crucially, list *all* known MCP Servers (both external/community and platform-hosted) within the MCP Omni registry that provide an implementation of this specific tool.** Enable users to easily compare these different implementations side-by-side based on the providing server's attributes (type, hosting, trust signals, performance, cost if applicable).
    - **Deep Technical Understanding:** Provide detailed specifications for the tool's input parameters (names, types, descriptions, required status, validation) and expected output schemas (success and error structures), potentially highlighting variations between implementations if significant.
    - **Facilitate Correct Usage:** Offer illustrative usage examples (code snippets) demonstrating how to call this tool via different implementing servers (using their specific connection methods – Remote URL, Local Command, Platform Hosted Endpoint) and potentially via the platform's SDK or Unified API (if that feature were present).
    - **Contextual Learning:** Link directly to practical Use Cases that utilize this specific tool, showcasing its real-world application and value.
    - **Promote Best Practices & Standardization (Future):** Serve as a potential focal point for defining or converging on standardized schemas/behaviors for common tool functions across the ecosystem.
- **Target Audience & Scenarios:**
    - *Developer Choosing Implementation:* "I need to send emails via MCP. I see tools named `send_email` implemented by the official `@sendgrid/server`, a community `@resend/server`, and an Omni-hosted `generic-smtp-server`. Which one is best for my needs?" -> Compares implementations side-by-side on this page (security, hosting type, features, limits).
    - *Workflow Builder:* "What exactly does the `create_jira_issue` tool require? What fields are mandatory?" -> Consults this page for detailed parameter specifications before configuring the node in the (hypothetical) builder.
    - *Client Developer:* "How should I structure the request and parse the response for the standard `lookup_stock_price` tool?" -> Uses schema definitions and example responses on this page.
    - *Server Developer (New):* "I'm building a new calendar server. What are the common parameters for a `list_events` tool?" -> Uses this page as a reference for standard practices or common schemas.
    - *Learner:* "What does the `vector_search` tool actually do?" -> Reads the detailed description and looks at linked Use Cases.
- **Layout & Structure:** **Dynamic 2-Column Layout, focused on the Tool's definition and comparing its implementations.**
    - **Main Content Area (Left, approx. 60-65% width):** Defines the canonical tool information and usage patterns.
        1. Tool Header (Canonical Name, Core Function Description).
        2. Detailed Description & Purpose Section.
        3. Canonical Input Parameters Schema Section (with variations noted).
        4. Canonical Output Schema Section (Success & Error examples, variations noted).
        5. Generic Usage Examples Section (showing *how* to conceptually call the tool via different server types).
        6. Linked Use Cases Section.
    - **Right Sidebar (Right, approx. 35-40% width):** Lists and allows comparison of the *implementations*.
        1. "Implementations" Header & Count.
        2. Filter/Sort controls *for implementations*.
        3. Scrollable List/Grid of Implementation Cards.
        4. (Potentially) "Request New Implementation" / "Implement This Tool Yourself" CTA.
- **Key Features & Functionality (Detailed):**

    **1. Tool Header (Main Content):**

    - **Canonical Tool Name:** Prominent `<h1>` displaying the standardized or most common name for this function (e.g., `create_calendar_event`). Use a clear function icon (`[fx]` or similar).
    - **Core Function Description:** Concise (1-2 sentences) explanation of the tool's primary goal, independent of any specific implementation.
    - **Key Tags:** Display relevant functional category and domain tags (e.g., `#Scheduling`, `#Data Mutation`, `#Google Calendar`).
    - **Integrated Service Link (If Applicable):** If the tool *primarily* targets one external service, show its Logo/Name prominently (e.g., `[Google Calendar Icon] Primarily targets Google Calendar`).

    **2. Detailed Description & Purpose (Main Content):**

    - Expanded explanation of the tool's functionality, common use cases, expected inputs, outputs, and any important conceptual prerequisites or side-effects (e.g., "Creates a new event in the user's calendar. Requires authenticated access. May trigger notifications.").
    - Discuss potential variations in behavior users might encounter across different implementations (e.g., "Some implementations might support recurring events, others may not.").

    **3. Canonical Input Parameters Schema (Main Content):**

    - **Goal:** Define the *ideal* or *most common* set of input parameters for this tool function.
    - **UI:** Use a detailed table or definition list: `Parameter Name`, `Canonical Type` (string, number, boolean, object, array, *standardized date/time format*), `Typical Requirement` (Usually Required / Optional), `Description` (Explaining the parameter's purpose clearly), `Common Default` (If applicable).
    - **Handling Variations:**
        - Use dedicated notes or badges (`⚠️ Implementation Specific`) next to parameters known to have significant variations (e.g., differing required status, different object structures).
        - Provide expandable sections for complex object/array schemas, showing the typical structure.
        - Link directly from a parameter row to filter the Implementations list (Right Sidebar) showing only those supporting a specific optional parameter or variation.
    - **Example Request Body:** Show a canonical JSON example illustrating a typical input structure.

    **4. Canonical Output Schema (Main Content):**

    - **Goal:** Define the typical structure of successful and error responses.
    - **Success Response:** Describe the expected output data. Provide a JSON Schema definition for the typical success response structure. Include a formatted JSON example. Note common variations (`⚠️ Some implementations may return additional fields...`).
    - **Error Responses:** Describe common logical errors *related to this tool's function* (e.g., `INVALID_DATE_RANGE`, `PERMISSION_DENIED`, `EVENT_CONFLICT`). Provide example error structures (JSON) including common fields like `errorCode`, `errorMessage`.

    **5. Generic Usage Examples (Main Content):**

    - **Goal:** Show *how* to call a tool conceptually, abstracting specific server details slightly but highlighting differences based on server type.
    - **Structure:** Use language-specific tabs (Python SDK, TS SDK, `curl`, Management API - if applicable).
    - **Content (per language):** Provide *three distinct examples* demonstrating how to call this tool assuming it's implemented by:
        1. A **Remote (SSE/HTTP) Server:** Show SDK/curl usage with URL endpoint placeholder (`YOUR_SERVER_ENDPOINT`) and authentication header placeholder (`YOUR_API_KEY`).
        2. A **Local (STDIO) Server:** Show SDK/command-line usage involving process spawning, sending input via stdin, and reading output from stdout (using placeholders like `YOUR_SERVER_COMMAND`).
        3. An **Omni-Hosted Server:** Show SDK/curl usage with the specific MCP Omni provided endpoint placeholder (`YOUR_OMNI_SKILL_ENDPOINT`) and authentication using platform API keys or Skillset context.
    - **Clarity:** Each example should clearly label which server type it applies to. Snippets should include parameter construction and basic response handling.

    **6. Linked Use Cases Section (Main Content):**

    - **UI:** Display a grid/list of Use Case cards (Thumbnail, Title, Description) that demonstrably feature *this specific tool* (regardless of implementation).
    - **Functionality:** Links navigate to the full Use Case detail page. Limit to 3-6 most relevant/popular use cases, with a link to "View all Use Cases featuring this tool" (pre-filters the Use Case Directory).

    **7. Implementations List & Comparison (Right Sidebar - CRITICAL):**

    - **Header:** `Implementations ([Count])`. Include text like "Servers & Hosted Servers providing this tool:".
    - **Filter Controls:** *Mini-filters specific to the implementations list:*
        - `Type:` Checkboxes (`Remote`, `Local`, `Hosted by Omni`).
        - `Source:` Checkboxes (`Official`, `Verified`, `Community`).
        - `Sort By:` Dropdown (`Popularity`, `Rating`, `Security`, `Recency`).
    - **Implementation Card List (Scrollable):** Display a compact card for each Server/Server providing this tool.
        - **Content:**
            - `Server/Server Logo & Name` (Linked to its detail page).
            - `Author/Namespace` (+ Verified `✓`).
            - `Type Badge` (`Remote`/`Local`/`Hosted`).
            - `Rating` (`⭐ 4.5`).
            - `Security Status` (`🛡️ Passed`).
            - `Key Difference Highlight (Optional):` A small tag if this implementation has notable parameter/output variations from the canonical schema described left (e.g., `Supports Recurring Events`).
            - `Actions:` `[Playground Icon] Test`, `[Compare Icon] Add to Compare`.
        - **Interaction:** Clicking the card navigates to the full Server/Server Detail Page. "Test" links to Playground pre-configured. "Add to Compare" adds *this specific Server/Server* to the comparison tray.
    - **"Implement This Tool" / "Request Implementation" CTA (Conditional):**
        - If few or no implementations exist, or if common apps lack an implementation, show a button like "Guide: Build Your Own Implementation" (links to docs) or "Request Implementation for [Service Name]" (links to community forum/feature request).
- **Information Architecture & Content:**
    - Requires a canonical "Tool Definition" entity in the database, storing its name, description, standard parameter/output schemas (potentially versioned).
    - Requires a many-to-many mapping between Tool Definitions and specific Server/Server versions that implement them. The platform needs to parse Server manifests to populate this mapping.
    - Needs logic to detect and potentially flag variations between a specific implementation's schema and the canonical Tool Definition schema.
    - Needs links curated to external service API documentation relevant to the tool's function.
- **Interaction & User Flows:**
    - User searches for a function (e.g., "add jira comment") -> Lands on Tool Detail Page for `add_comment` (targeting Jira).
    - User reads description, understands canonical parameters/output.
    - User examines the Implementations list in the sidebar -> Filters by `Hosted by Omni`.
    - User sees the `@omni/jira-Server` implementation -> Clicks "Test" -> Experiments in Playground.
    - User returns -> Reviews Usage Examples for connecting via Omni-Hosted endpoint -> Copies SDK snippet.
    - Alternatively, user sees a Community implementation -> Checks its Rating/Security -> Adds it to Compare alongside the Omni one -> Navigates to Comparison Page.
    - User explores linked Use Cases to see the tool in action.
- **Creative Enhancements & Considerations:**
    - **Schema Diffing:** Visually highlight differences between an implementation's specific parameter/output schema and the canonical schema shown on the main page (e.g., strikethrough for removed params, green for added params).
    - **Standardization Score:** For each implementation, potentially show a score indicating how closely it adheres to the canonical tool definition (parameter names, types, output structure).
    - **Community Schema Proposals:** Allow logged-in users to suggest improvements or variations to the canonical Tool Definition (with moderation).
    - **Tool Dependency Graph (Advanced):** Visualize how this tool might be typically used in sequence with other tools within common workflows (based on Use Case analysis or Workflow data if that feature existed).
    - **Performance Implications:** Displaying performance metrics (average latency, error rate) *per implementation* in the sidebar list would be highly valuable but requires extensive data collection from Playground usage or hosted Server monitoring.
- **Deprecation Note:** This **Tool Detail Page** replaces the previous concepts of a standalone "Tool Directory" and the platform-hosted "Skill Detail Page". Discovery starts here or at the main Registry Explore page. Details about *how* a specific server/server is hosted or managed are found on *its* specific detail page, linked from the Implementations list here.

---

This revised specification elevates the Tool Detail Page from a simple definition lookup to a powerful hub for understanding a specific function, discovering *all* its implementations across the ecosystem, comparing them directly, and accessing context-specific usage examples and testing environments. It directly addresses the need to see implementations side-by-side and understand their context (external, local, hosted).



# Universal Registry > All Tools

**MCP Omni - Comprehensive Specification**

**Document Section: III. Page-by-Page Specification**

**(D) MCP Tool Directory in Homepage (View within `/`via `Tools` Tab)**

- **Page Name/Type:** Unified Registry Explore of Homepage - **Tools View**
- **Purpose & Goals:**
    - **Function-Centric Discovery:** Provide the definitive interface for users to find specific MCP capabilities ("Tools") based on desired function or the external service/app they interact with.
    - **Implementation Mapping:** Clearly list and differentiate *all* known implementations of each tool across *all* registered Servers (External-Remote, External-Local, Omni-Hosted).
    - **Application-Centric Browsing:** Enable users to instantly see *every* tool available for a specific application (e.g., "All Gmail Tools", "All Database Tools").
    - **Rapid Implementation Assessment:** Allow users to quickly evaluate the *context* of each tool implementation directly from the list view – assessing the trustworthiness, type, popularity, and status of the *Server* providing the tool.
    - **Direct Action Pathways:** Provide immediate links to test a specific tool implementation in the Playground or view its detailed specification.
- **Target Audience & Scenarios:** (Same as previous Tool Directory definition, focusing on finding functions and comparing implementations).
- **Layout & Structure:** Uses the **exact same 3-column layout** as the main `/registry` page (Homepage specification), ensuring perfect consistency. The key difference lies in:
    - The **`Tools` Component Type Tab** being active.
    - The **Left Sidebar Filters** dynamically adapting to show facets relevant to Tools and their implementing Servers.
    - The **Middle Content Area** displaying a **List View** (highly recommended default, Grid optional) of specialized **Tool Implementation Cards**.
    - The **Right Sidebar Sorting Options** adapting to keys relevant for comparing tool implementations.
- **Key Features & Functionality (Focusing on Refinements for Tools View):**

    **1. Omni Search Bar (Header):**

    - **Enhanced for Tools:** When the `Tools` tab is active, AI suggestions prioritize matching tool names, functional descriptions, parameter names, and Integrated Service names. Syntax like `tool:send_email` or `service:slack` is explicitly supported.

    **2. Component Type Tabs:**

    - The `Tools ([Count])` tab is visually selected.

    **3. Dynamic Multi-Faceted Filtering (Left Sidebar - Tool Context):**

    - **`Integrated Service / App` Facet:** **Elevated to the top**, most prominent filter. Searchable multi-select with logos. This is the primary way users will explore tools related to specific applications.
    - **`Functional Category` Facet:** Checkboxes for broad tool functions (Data Retrieval, Data Mutation, File Ops, Communication, Scheduling, AI/LLM, etc.).
    - **`Tags` Facet:** Searchable multi-select for granular tags specific to tool actions (`#parsing`, `#crud`, `#vector-search`, `#oauth-helper`, `#image-resize`).
    - **Implementing Server Filters (Crucial Context):** Allow filtering based on the *attributes of the Server providing the tool*:
        - `Server Type:` Checkboxes (`Remote (SSE/HTTP)`, `Local (STDIO)`).
        - `Hosting:` Checkboxes (`Hosted by Omni`, `External/Self-Hosted`).
        - `Server Source:` Checkboxes (`Omni Verified`, `Official Provider`, `Verified Author`, `Community`, `Aggregated [Logos]`).
        - `Server Trust/Quality:` Filters for `Security Scan Status`, `Quality Score Range`, `License Type`.
    - **Active Filters Display:** Clearly show applied filters.

    **4. Adaptive Sorting Controls (Right Sidebar - Tool Context):**

    - **Primary Key Selection:** `Relevance` (search), `Tool Name (A-Z)`, `Implementing Server Name (A-Z)`, **`Implementing Server Popularity`** (Usage/Rating), **`Implementing Server Quality Score`**, `Implementing Server Recency`.
    - **Direction Control:** Asc/Desc toggles.

    **5. Tool Implementation List (Middle Content Area - List View Highly Recommended):**

    - **View Mode:** Default to List View for optimal information density and comparison. Grid view can be an option but needs careful card design.
    - **List Item Component ("Tool Implementation Card"):** This is where the creativity and detail focus lies. Each row represents **one tool implementation by one server**.
        - **Layout:** Structured horizontal layout within the list row, optimized for scanning key information quickly. Clear visual separation between Tool info and Implementing Server info.
        - **Content (Left-to-Right Flow):**
            - **`Select Checkbox`:** For adding to comparison.
            - **`Tool Info Block`:**
                - **`Tool Name:`** Prominent, bold text (e.g., `create_or_update_file`). Clickable link to the canonical Tool Detail Page (`/registry/tools/.../[tool-name]`).
                - **`Integrated Service:`** Small Logo + Service Name (`[GitHub Icon] GitHub`) immediately below or next to the tool name. Establishes context.
                - **`Tool Description:`** Concise (1 line) description of the tool's function. Truncated with ellipsis if needed, full text on hover/tooltip.
            - **`Implementation Context Block`:** (Provides info about the *Server* offering this tool)
                - **`Server/Server Name:`** Clickable link to the *Server's* detail page (`@github/server-official v2.1` or `@omni/skill-github v1.0`).
                - **`Author/Namespace:`** (`by @github ✓` or `by @omni-team ✓`). With Verification Badge.
                - **`Server Type Badges:`** Display *both* crucial badges clearly: `[API Icon] Remote` + `[External Link Icon] External` **OR** `[Terminal Icon] Local` + `[External Link Icon] External` **OR** `[Omni Logo Icon] Hosted by Omni`. These instantly tell the user *how* this specific implementation is accessed.
            - **`Trust & Quality Block (Server):`** (Compact indicators for the *implementing server*)
                - `Rating:` `⭐ 4.9 (250)`
                - `Security:` `🛡️ Passed`
                - `Quality:` `📈 A`
                - `License:` `[License Icon] MIT` (Tooltip shows full name).
            - **`Stats Block (Server):`**
                - `Usage:` `↓ 2.5M/wk`
                - `Updated:` `[Calendar Icon] 3d ago`
            - **`Actions Block`:**
                - `[Info Icon] Details` (Link to the *specific* Tool Detail page for *this implementation* - `/servers/.../[tool-name]`). Tooltip: "View detailed parameters, schema, and usage examples for this specific implementation."
                - `[Playground Icon] Test` (Direct link to Playground pre-configured for this server/skill and this tool). Tooltip: "Test this tool implementation live in the Playground."
                - `[Bookmark Icon] Bookmark` (Saves this specific tool implementation).
        - **Hover Interaction:** Subtle background highlight on the entire row. Tooltips appear for icons and truncated text.
        - **Visual Cues:** Use consistent icons and badges from other registry views. Potentially use subtle background color variations for rows based on Server Type or Hosting status for easier scanning.
    - **Pagination:** Standard controls.

    **6. Comparison Integration:**

    - Selecting items via checkbox populates the Comparison Tray. The comparison focuses on comparing *different implementations* of potentially the *same* conceptual tool, using attributes from the implementing servers.

    **7. Contextual Sidebar (Right):**

    - **`Popular Integrated Services`:** List of clickable logos/names (e.g., Slack, Google Drive, Jira) acting as quick filters.
    - **`Popular Tool Categories`:** List of clickable links for functional categories (e.g., Data Retrieval, File Operations).
    - **`Quick Links:`** "What are MCP Tools?", "Guide: Choosing Implementations", "Submit a Server/Server".
    - **`Comparison Tray Access:`** Button if tray is collapsible.
- **Information Architecture & Content:**
    - Relies heavily on the robust data model linking Tools to Servers/Servers, and the rich metadata associated with each Server/Server (Type, Hosting, Trust, Stats, License, Service Mapping, Tags).
    - The "Integrated Service / App" mapping for each Server/Server is paramount for this view's effectiveness.
- **Interaction & User Flows:**
    - User navigates via `Tools` Tab on `/registry` or searches for a function.
    - User likely applies the `Integrated Service` filter first (e.g., "Show me all 'Salesforce' tools").
    - User scans the list, comparing implementations based on Server Type (Remote/Local/Hosted), Trust signals (Rating, Security), and provider (Official vs. Community).
    - User clicks "Details" to understand parameters for a specific implementation.
    - User clicks "Test" to try it in the Playground.
    - User adds multiple implementations to compare their parent Servers side-by-side via the Comparison feature.
    - User clicks the Server/Server name link to get the full context of the implementing component.
- **Creative Enhancements & Considerations:**
    - **Visual Grouping:** Option to group results *by canonical tool name* (if that mapping exists), showing different implementations indented below each tool name for direct comparison within the list.
    - **Implementation Badges:** Add small badges directly on the list item indicating key differences if compared to a canonical definition (e.g., `+ Extra Params`, `Different Output`).
    - **Direct Credential Status:** If a user has credentials configured in a Skillset for the *implementing server*, show a small indicator (`✓ Creds Available`) on the list item, signaling readiness for Playground testing.
    - **Filtering by Parameter/Output Schema:** Advanced filter allowing users to find tools that accept specific input parameters or return specific output structures (requires deep schema indexing).
    - **Performance:** Efficiently querying and joining Tool data with implementing Server/Server metadata for filtering and sorting is critical. Avoid N+1 query problems when rendering the list.

---





# Single Client Detail

---

**MCP Omni - Comprehensive Specification**

**Document Section: III. Page-by-Page Specification**

**(F) MCP Client Detail Page (`/clients/[client_name]`)**

- **Page Name/Type:** MCP Client Detail & Evaluation Page
- **Purpose & Goals:**
    - **Definitive Client Encyclopedia:** Serve as the most comprehensive, trustworthy, and actionable resource within MCP Omni for understanding a specific MCP Client application, regardless of its type (Desktop, IDE, CLI, Framework, Web App, etc.).
    - **Deep Evaluation & Informed Choice:** Enable users (developers selecting tools, end-users choosing apps, architects assessing frameworks) to perform a deep evaluation based on detailed features, precise compatibility specifications (OS, LLM, MCP features), user experience insights (reviews, setup guides), practical application examples (Use Cases), and trust signals (verified author, license).
    - **Demystify Setup & Integration:** Provide **visually guided, client-specific instructions** on the critical task of connecting both Remote (SSE/HTTP) and Local (STDIO) MCP Servers within that client's unique interface, removing ambiguity and significantly lowering the barrier to successful integration.
    - **Contextualize Capabilities:** Clearly articulate the client's core purpose, its key features beyond MCP, *how* it leverages MCP (e.g., simple tool calls vs. complex agentic workflows), and its strengths/weaknesses relative to other clients through direct comparison links and structured data.
    - **Showcase Real-World Value:** Connect the client directly to concrete Use Cases on MCP Omni, demonstrating how it's used practically to solve problems and achieve outcomes, reinforcing its value proposition.
    - **Build Community & Trust:** Foster confidence through verified information, transparent licensing, structured user reviews/ratings, active Q&A, and links to official resources and community channels.
    - **Support Extensibility Understanding:** For clients that are platforms/frameworks, clearly delineate their own APIs or plugin architectures to guide further development.
- **Target Audience & Scenarios:**
    - *Developer choosing an IDE plugin:* "I use VS Code and need an MCP client that supports local STDIO servers and works well with Anthropic models. How does 'Continue' compare to 'Cody' or 'Copilot Agent Mode'?" -> Lands on `Continue` page, checks `Compatibility` tab (OS, LLM support, STDIO ✅), checks `Setup` tab for VS Code specific screenshots, reads Reviews, adds to Compare.
    - *Agent Builder selecting framework:* "I need a Python framework with full MCP support, including Resources and Prompts, and good documentation." -> Filters Clients by `Type: Agent Framework`, `Technology: Python` -> Examines detail pages for `fast-agent` vs. `mcp-agent`, focusing on the `Compatibility` (MCP Matrix) and `API & Extensibility` tabs.
    - *Non-technical user exploring options:* "I want a simple Desktop app to chat with Claude and occasionally use a hosted MCP server like the Google Search one." -> Filters Clients by `Type: Desktop App` -> Looks at `Claude Desktop App`, `BoltAI`, `Tome` -> Checks `Overview & Features` for ease of use, `Setup` for simplicity, `Reviews` for user feedback.
    - *User trying to connect a specific server:* "I have the `@omni/hosted-gmail` server endpoint. How do I add this *specifically* in the 'Lutra' client?" -> Navigates to Lutra Client Detail Page -> Goes to `Setup & Configuration` tab -> Finds "Connecting Remote Servers" section with Lutra UI screenshots showing where to paste the URL and API key.
- **Layout & Structure:** **Adaptive 2-Column Layout** (Consistent with Server Detail Page for platform coherence).
    - **Main Content Area (Left, approx. 65-70% width):** Hosts the deep-dive information, organized logically via tabs.
        1. Client Header Area (Rich identification, key stats, primary actions).
        2. Tab Navigation (Comprehensive, logical flow).
        3. Tab Content Area (Detailed, context-rich information).
    - **Right Sidebar (Right, approx. 30-35% width):** Provides glanceable summary data, quick actions, and contextual discovery links.
- **Key UI Components & Elements (Hyper-Detailed & Adaptive):**
    1. **Top Navigation Bar:** (Platform Wide).
    2. **Breadcrumbs:** `MCP Omni > Registry > Clients > [Namespace/Author] > [Client Slug] > [Version]`.
    3. **Client Header Area (Rich block above tabs):**
        - **Identification Block:**
            - `Client Logo`: High-quality application icon.
            - `Client Name`: **Large `<h1>` heading.**
            - `Author/Company`: `by [Name/Company](link) ✓` (With Verification Badge).
        - **Type & Platform Block (Key Context):**
            - `Primary Client Type Badge`: Prominent, styled badge (e.g., `[IDE Icon] IDE Extension`, `[App Icon] Desktop App`, `[Code Icon] Agent Framework`, `[CLI Icon] CLI Tool`, `[Web Icon] Web Application`).
            - `Platform Compatibility Icons:` Row of clear icons (`[Apple]`, `[Windows]`, `[Linux]`, `[Web]`, `[CLI]`). Tooltips provide detailed version info if available.
        - **Concise Tagline:** 1-sentence summary of the client's main purpose.
        - **Primary Action Buttons Row:**
            - `[Download/Link Icon] Download / Visit Official Website`: *Must* link to the authoritative source.
            - `[GitHub Icon] View Source Code`: Prominently displayed *if* license is OSI-approved Open Source.
            - `[Compare Icon] Add to Compare`: Adds this client to the comparison feature.
        - **Key Stats Row:**
            - `Rating:` `⭐ 4.8 (120 Reviews)` (Clickable link to Reviews tab).
            - `Installs/Usage:` `↓ 150k+ Est.` (Display if reliable data exists - source clearly indicated in tooltip, e.g., "via VS Code Marketplace" or "Platform estimates"). Use "N/A" if unavailable.
            - `Version:` `v1.2.0` (Clickable link to Versions tab).
            - `License:` `[License Icon] MIT` (Clickable link to Compatibility tab License section).
    1. **Tab Navigation (Comprehensive Tab Bar):**
        - **Tabs:** `Overview & Features`, **`Setup & Configuration`** (Critical), **`Compatibility & Specs`** (Critical), `Use Cases`, `Reviews & Comments`, `API & Extensibility` (Conditional), `Versions & Changelog`.
        - **UI:** Clear visual separation, strong active state indication.
    1. **Tab Content Areas (Hyper-Detailed Specifications):**
        - **`Overview & Features` Tab:**
            - **Visual Showcase:** Embed a short (~30s) official demo video if available. Supplement with a carousel/grid of high-quality screenshots showcasing the client UI, *especially demonstrating MCP integration points* (e.g., server list, tool invocation). Ensure images have captions and alt text.
            - **Detailed Description:** Rendered Markdown (from README or curated). Explain the client's philosophy, primary use cases (beyond MCP), target users, and unique selling points.
            - **Structured Key Features List:** Use checkmarks/icons and brief descriptions, grouped logically:
                - *General:* Multi-LLM Support, Local LLM Support, UI Theme (Light/Dark), Collaboration Features, etc.
                - *MCP-Specific:* Built-in Server Browser, UI for Tool Invocation, Supports Remote Servers, Supports Local Servers, Secure Credential Storage Method, Configuration Method (UI/File/CLI), Automatic Tool Discovery, etc.
        - **`Setup & Configuration` Tab:** **(Paramount Importance)**
            - **Goal:** Provide *foolproof*, visual guides specific to *this client*.
            - **Structure:** Use sub-sections or potentially nested tabs for clarity.
            - **Installation Guide:** Platform-specific steps (Download link, `brew install`, Marketplace search term). Clear instructions for initial launch/setup.
            - **Connecting Remote Servers (SSE/HTTP) Section:**
                - **Step-by-Step Text:** Numbered instructions detailing the *exact sequence of actions* within the client's UI (e.g., "1. Go to `Settings > Connections > MCP Servers`.", "2. Click `Add Remote Server`.", "3. Paste the Server Endpoint URL provided by MCP Omni...").
                - **Annotated Screenshots/GIFs:** **Mandatory.** For each step, show a clear screenshot of the relevant client UI screen with arrows, boxes, or highlights indicating *precisely* where to click or enter information (URL field, Authentication token field, Server Name field). A short GIF demonstrating the flow is even better.
                - **Authentication Guidance:** Explain *how* this client expects credentials (Bearer token field, specific header input, OAuth flow initiation button?). Reference where users can get these details on the MCP Omni Server Detail page (`Schema & Config > Connection` tab).
                - **Example:** Provide a concrete example using a known public/test server.
            - **Connecting Local Servers (STDIO) Section:**
                - **Prerequisites:** Remind users they need the server installed locally first (link to server's install guide if known). Mention potential path/environment issues.
                - **Step-by-Step Text:** Detail the sequence of actions in the client's UI for adding an STDIO server (e.g., "1. Go to `Settings > MCP Servers`.", "2. Click `Add Local Server`.", "3. Enter the `Command` (e.g., `node`).", "4. Enter the `Arguments` (e.g., `path/to/your/server.js`).", "5. Set `Working Directory` if needed.").
                - **Annotated Screenshots/GIFs:** **Mandatory.** Show the client's UI for configuring STDIO commands/arguments clearly.
                - **Security Warning:** Include a clear note about the security implications of allowing a client application to execute arbitrary local commands.
            - **Managing Servers Section:** Explain how to view connected servers, edit configurations, disable/enable servers, or remove them within *this client*. Show relevant UI screenshots.
            - **Managing Credentials Section:** Explain where/how API keys or other secrets are stored by *this client* (if known - e.g., "Uses macOS Keychain", "Stores encrypted in local config file", "Prompts each time"). Link to client's own security documentation if possible.
        - **`Compatibility & Specs` Tab:** **(Data-Rich & Precise)**
            - **MCP Feature Support Matrix:**
                - **UI:** Clear table format. Rows: `Tools`, `Prompts`, `Resources`, `Sampling`, `Roots`. Columns: `Supported?` (✅ Yes / ❌ No / ⚠️ Partial / `[Info Icon]` Note).
                - **Notes Column:** Crucial for explaining partial support (e.g., "⚠️ Resources: List/Read only via Tools", "⚠️ Sampling: Only for specific backends"). Link to official MCP spec docs for each feature.
                - **Data Source:** Clearly state if data is "Verified by Author", "Verified by MCP Omni", or "Community Reported".
            - **Calculated MCP Compat. Score:** Display score prominently (`[MCP Icon] 85% Compatible`). Tooltip explains weighting/calculation (e.g., "Based on support for Tools, Resources, Prompts, and Transport Types").
            - **Server Connectivity:**
                - `Remote Server Support:` ✅/❌ (SSE/HTTP). Specify supported auth methods if known (Bearer, Custom Header...).
                - `Local Server Support:` ✅/❌ (STDIO).
            - **LLM Integration:**
                - `Integration Method(s):` Tags/List (Direct API Keys, Built-in Provider List, OpenRouter Compatible, Local Model Interface [Ollama/etc.]).
                - `Known Compatible Providers:` Logos/List (OpenAI, Anthropic, Gemini, Mistral, Ollama...).
                - `Model Agnostic?:` Yes/No/Partially.
            - **Platform Support (Detailed):** Table listing OS/Browser/IDE and specific supported versions (e.g., `Windows: 10+`, `macOS: 12+ (Intel/ARM)`, `VS Code: 1.80+`).
            - **License Details:** Full License Name (linked to SPDX/source), simplified summary badge/text (Permissive/Copyleft/Proprietary).
            - **Technology Stack Snippet:** (Optional) e.g., `Built with: Electron, React, TypeScript`.
        - **`Use Cases` Tab:**
            - Grid/List of Use Case cards from `/use-cases` where *this client* is prominently featured. Filterable within the tab by category/difficulty.
            - CTA: "Submit a Use Case featuring [Client Name]".
        - **`Reviews & Comments` Tab:**
            - **Structured Reviews:** Overall Rating + Specific Ratings (`Ease of Setup`, `MCP Support`, `Stability`, `Features`). Rating distribution chart.
            - **Comments/Q&A:** Threaded discussion, sortable, filterable, login required to post. Author/Admin highlighting for replies.
        - **`API & Extensibility` Tab (Conditional):**
            - Show only for frameworks, IDEs, or apps with documented extension points.
            - **Overview:** Explain the extensibility model (Plugins, SDK, API).
            - **Key Links:** Direct links to relevant Developer Docs, API Reference, SDK Repositories, Plugin Marketplace (if applicable).
            - **Simple Example:** A minimal code snippet demonstrating basic extension/API usage.
        - **`Versions & Changelog` Tab:**
            - Selectable version history. Rendered `CHANGELOG.md` or release notes for the selected version.
    1. **Right Sidebar (Contextual Summary & Actions):**
        - **Primary Action Buttons:** `[Download/Link Icon] Download / Visit Website`, `[Compare Icon] Add to Compare`, `[Bookmark Icon] Bookmark Client`.
        - **Metadata Summary Card:** `Author`, `Primary Type Badge`, `Platforms Icons`, `License`, `MCP Compat Score`, `Overall Rating`.
        - **Compatibility Quick View Card:** Icons/Checkmarks for `Remote Support`, `Local Support`, `Tools ✅`, `Prompts ❌`, `Resources ✅`.
        - **Featured Use Case Card:** Link to one relevant Use Case.
        - **Quick Links Card:** `Official Documentation`, `Source Repository` (if OSS), `Issue Tracker`, `Community Forum/Discord`.
    1. **Comparison Integration:** Seamless integration with the `/registry/compare?type=client` page. Attributes compared should align with the detailed fields specified here.
- **Information Architecture & Content:**
    - Client entity requires numerous fields covering all specified attributes, especially detailed compatibility data (MCP matrix, LLM support, OS versions) and potentially structured feature lists.
    - Requires a robust system for sourcing, verifying, and updating compatibility information (Author submission with validation, community reports, platform testing).
    - Needs links to external resources curated and validated.
    - Use Case relationships need to be maintained.
- **Interaction & User Flows:**
    - User finds client via Registry Explore -> Lands on Detail Page.
    - User checks Overview/Features and Visual Showcase.
    - User dives into `Setup & Configuration`, following client-specific visual guides to connect servers.
    - User verifies technical needs via `Compatibility & Specs` (MCP Matrix, LLM support, OS).
    - User explores `Use Cases` for practical examples.
    - User reads `Reviews` for community perspective.
    - User clicks `Download/Visit Website` or adds to Compare.
- **Considerations & Notes:**
    - **Data Accuracy is Paramount:** Especially for Compatibility and Setup guides. Outdated information severely diminishes trust. Needs a clear update/verification strategy (e.g., "Verified for v1.2.0", prompts for community updates).
    - **Client Diversity Handling:** The layout and content structure must gracefully handle the wide variety of client types (a simple CLI tool needs less info than a complex Agent Framework). Use conditional display for irrelevant sections.
    - **Visual Consistency vs. Client Specificity:** While Setup guides need client-specific screenshots, maintain overall MCP Omni styling for frames, buttons, typography within those guides.
    - **Collaboration with Authors:** Encourage client authors to claim their listings and contribute/verify detailed compatibility and setup information via a dedicated portal/process.

# Universal Registry > All Clients

**MCP Omni - Comprehensive Specification**

**Document Section: III. Page-by-Page Specification**

**(G) Unified Registry Explore - Clients View (`/registry?type=clients`)** *(Revised Index)*

- **Page Name/Type:** MCP Client Directory / Unified Registry Explore (Clients Tab Active)
- **Purpose & Goals:**
    - **Targeted Client Discovery:** Provide the definitive interface for users specifically searching for MCP Client applications (Desktop, Web, IDE, CLI, Frameworks, etc.), enabling them to find clients based on platform, features, MCP compatibility, LLM integration, and intended use case.
    - **Rapid Evaluation & Comparison:** Allow users to quickly assess and compare different clients directly from the listing using highly informative cards that surface critical differentiators like Client Type, Platform Support, Key Features (e.g., Local Server support), MCP Compatibility Score, and User Ratings.
    - **Facilitate Selection for Need:** Help users find the right client for their specific context (e.g., "a macOS desktop app supporting local servers", "an IDE plugin for VS Code that works with Claude", "Absolutelyan open-source agent framework").
    - **Showcase Ecosystem Diversity:** Highlight the variety of applications being built on top of the MCP standard, from simple chat interfaces to complex development tools and agent platforms.
    - Action! Let's define the **Clients View** within the  **Guide users seamlessly from discovering a promising client in the list to viewing its detailed setup guides, exploring use cases, comparing**. This view needs to be highly effective at helping users discover and perform initial evaluations of MCP Clients, leveraging the detailed information we it with alternatives, or navigating to its official website/download source.
- **Target Audience & Scenarios:**
plan to capture on the Client Detail page, presented concisely on informative cards.

---

**MCP Omni - Comprehensive Specification**    *   *Developer setting up environment:* "I need a **VS Code extension** that supports **Local (STDIO) MCP

**Document Section: III. Page-by-Page Specification**

**(G) Unified Registry Explore - Clients View (`/ Servers** and has good **user ratings**." -> Selects `Clients`tab -> Filters`Client Type: IDEregistry?type=clients`)** *(Revised Index)*

- **Page Name/Type:** MCP Client Directory / Unified Registry Explore (Clients Tab Active)
- **Purpose & Goals:**
    - **Targeted Client Discovery Plugin`, `Platform OS: VS Code`(or via tag),`Supports Local Servers: Yes`-> Sorts by:** Provide the primary interface for users specifically seeking MCP Client applications (Desktop, Web, IDE, CLI, Frameworks, etc.),`Rating`.
    - *Non-technical user:* "I want a **simple Desktop App** for **mac enabling efficient finding based on type, platform, features, compatibility, and community trust.
    - **Rapid EvaluationOS** to use with my **Claude account**." -> Selects `Clients` tab -> Filters `Client Type: Desktop of Suitability:** Allow users to quickly assess a client's relevance and potential fit for their needs directly from the listing App`, `Platform OS: macOS`, `LLM Compatibility: Claude`.
    - *Agent Builder:* "Compare using cards rich with critical information (Type, Platforms, Key MCP Support, LLM Integration hints, Rating).
    - ** **Agent Frameworks** that are **Open Source** and have high **MCP Compatibility Scores**." -> Selects `Clients` tab -> Filters `Client Type: Agent Framework`, `License: Open Source` -> Sorts by `MCP Compat Score`Highlight Client Diversity:** Effectively showcase the variety of available clients, from simple chat interfaces to complex agent frameworks, using clear type -> Selects top frameworks -> Clicks "Compare".
    - *User exploring:* "What are the most ** indicators and feature tags.
    - **Facilitate Comparison:** Enable easy selection of multiple clients for side-by-sidepopular Web Apps** for interacting with MCP?" -> Selects `Clients` tab -> Filters `Client Type: Web App` -> Sorts by `Popularity (Installs/Usage)`.
- **Layout & Structure:** **Consistent comparison based on the initial assessment from the cards.
    - **Consistent Discovery Experience:** Maintain the familiar 3-column layout and powerful search/filtering/sorting interaction patterns established for the overall Unified Discovery Hub.
- **Target Audience & Sc 3-Column Discovery Interface** (Inherited from `/registry` Homepage Spec).
    - **Minimal Persistent Header:** Logo, Omni Search Bar, Key Platform Links, User Controls.
    - **Main Discovery Interface:**
        - **enarios:**
    - *Developer seeking IDE integration:* "I need a **VS Code** extension that supports **Component Type Tabs:** The `Clients ([Count])` tab is visually selected and active.
        - **Leftlocal (STDIO) servers** and is highly rated." -> Selects `Clients` tab -> Filters `Client Type: IDE Sidebar (Filters - ~25% width):** Filters are dynamically adjusted to be relevant specifically for Clients.
        - ** Plugin`, `Platform OS: VS Code`, `Server Type Support: Local (STDIO)`-> Sorts by`Rating`.
Middle Content Area (Results Feed - ~55-60% width):**
            - Results Header Bar    *   *End-user wanting a desktop chat app:* "Show me **Desktop Apps** compatible with **macOS: Active Filter Pills, Results Count, `Sorting Dropdown` (Client-specific options), `View Mode Toggle` (`** that work with **Claude**." -> Selects `Clients`tab -> Filters`Client Type: Desktop App`, `PlatformGrid`/`List`).
            - Main Grid/List Area: Displays **Client Cards (Detailed Listing Version)**.
OS: macOS`, `LLM Compatibility: Claude`.
    - *Agent builder looking for frameworks:* "List            *   Pagination Controls.
        - **Right Sidebar (Sorting & Context - ~20% width):** Contains **Agent Frameworks** that are **Open Source** and have strong **MCP Tool support**." -> Selects `Clients` Client-specific sorting options and contextual information.
- **Key Features & Functionality (Detailed - Client View Context tab -> Filters `Client Type: Agent Framework`, `License Type: Open Source (OSI)`, `MCP Compatibility Score >):**

    **1. Omni Search Bar:**

    - Functionality remains consistent, but when `Clients` tab is active, AI suggestions prioritize matching client names, features, authors, target platforms, supported LLMs, and relevant tags. Syntax like `client:cursor` or `platform:vscode` is supported.

    **2. Component Type Tabs:** 80%` (using range slider).

    - *User comparing options:* Scans cards, noting
    - `Clients ([Count])` tab is active. Counts reflect clients matching current filters.

    **3. Dynamic differences in supported platforms, MCP features, and ratings -> Selects 3 clients via checkboxes -> Clicks "Compare". Multi-Faceted Filtering (Left Sidebar - Client Context):**

    - **Key Adaptation:** The `Type-Specific Filters
- **Layout & Structure:** **Consistent 3-Column Discovery Interface** (Inherited from `/registry` Homepage Spec).
    - **Minimal Persistent Header:** Logo, Omni Search Bar, Key Platform Links, User Controls.
`section is tailored for Clients.`Integrated Service / App` is less relevant here than for Servers/Tools, but might be kept*   **Main Discovery Interface:**
        - **Component Type Tabs:** The `Clients ([Count])` tab for filtering clients *designed* for specific services (e.g., a "Salesforce Client").
    - is visually selected and active.
*   **Left Sidebar (Filters - ~25% width):** Filters**Visible Facets:**
*   **`Source & Origin`:** (Standard: Omni Verified, Official Provider dynamically adjusted for Clients.
*   *Middle Content Area (Results Feed - ~55-60%, Verified Author, Community, Aggregated From [Logos]). 
        - Results Header Bar: Active Filter Pills, Results Count, `Sorting Dropdown` (Client.*
*   **`Tags`:** (Standard: Searchable multi-select). Tags relevant to clients (e.g-specific), `View Mode Toggle` (`Grid`/`List`).
        - Main Grid/List Area:., `#AgentUI`, `#CodeAssistant`, `#NoCode`, `#LocalLLM`, `#PlaybookAutomation`, `#CLI Displays **Client Cards (Detailed Listing Version)**.
        - Pagination Controls.
*   **Right Sidebar (Sorting & Context - ~20% width):** Contains Client-specific sorting and context.
- **Key Features &`). Popular Tags shown are those most common *among clients*. *   **`Trust & Quality`:** ` Functionality (Detailed - Client View Context):**

    **1. Omni Search Bar:**

    - ScopeLicense Type`(Permissive OSS, Copyleft OSS, Proprietary, etc.),`Author Verification`. *(Security Scan defaults to `Clients`. AI suggestions prioritize client names, authors, supported platforms, key features (e.g., "agent framework", "vscode plugin"), compatible LLMs. Syntax support like `type:desktop`, `platform:macos`, `llm:claude`.

    **2. Component Type Tabs:**

    - `Clients ([Count])` tab is active/Quality Score less applicable directly to client apps compared to servers)*.
        - **`Client Type` (Cru.

    **3. Dynamic Multi-Faceted Filtering (Left Sidebar - Client Context):**

    - **Keycial Client Filter):** Checkboxes/Buttons: `Desktop App`, `Web Application`, `IDE Extension`, `CLI Adaptation:** The `Type-Specific Filters`section is tailored for Clients.`Integrated Service / App` filter is less relevant here Tool`, `Agent Framework/Library`, `Mobile App (iOS/Android)`, `Testing Tool`.
        - **` and might be hidden or deprioritized.
    - **Visible Facets:**
        - **`Source & OriginPlatform / OS` (Crucial Client Filter):** Checkboxes/Icons: `Windows`, `macOS`, `Linux`, `Web (Browser)`, `VS Code`, `JetBrains IDEs`, `Neovim`, `Emacs`, ``:** (Standard: Omni Verified, Official Provider [e.g., Anthropic for Claude Desktop], Verified Author, Community, Aggregated From [Logos]).
        - **`Tags`:** (Standard: Searchable multi-select).iOS`, `Android`, `CLI`. Allow selecting multiple.
        - **`MCP Capability Filters` (Crucial Client Filter Popular tags relevant to clients (e.g., `#CodeGeneration`, `#AgentOps`, `#NoCode`, `#Local):**
            - `Supports Remote Servers`: Yes / No / Maybe (toggle/checkbox).
            - `SupportsLLM`, `#IDE`).
        - **`Client Type` (Primary Client Filter):** Checkboxes: `Desktop Local Servers (STDIO)`: Yes / No / Maybe (toggle/checkbox).
            - `Supports Tools App`, `Web Application`, `IDE Extension`, `CLI Tool`, `Agent Framework/Library`, `No-Code`: Yes / No / Maybe (based on matrix).
            - `Supports Prompts`: Yes / No / Maybe ( Platform`, `Testing Tool`.
        - **`Platform / OS`:** Checkboxes with icons: `[based on matrix).
            - `Supports Resources`: Yes / No / Maybe (based on matrix).
Win] Windows`, `[Mac] macOS`, `[Linux] Linux`, `[Web] Web Browser`, `[CLI*   **`LLM Integration Filters`:** Checkboxes/Searchable list: `Supports OpenAI`, `Supports Claude] Command Line`, `[iOS] iOS`, `[Android] Android`. Allow multi-select.
        - `, `Supports Gemini`, `Supports Ollama`, `Supports OpenRouter`, `Direct API Key Input`, `Model Ag**`IDE Support` (Conditional filter, shown if `Client Type: IDE Extension` selected):** Checkboxes: `nostic`.
        - **`Pricing Model`:** Checkboxes: `Free`, `Open Source`, `FreVS Code`, `JetBrains IDEs`, `Neovim`, `Zed`, `Cursor`, etc.
emium`, `Paid Subscription`, `Enterprise`.
        - **`Stats Filters`:** Range slider for `User Rating*   **`Trust & Quality`:** `License Type` (Permissive, Copyleft, Proprietary, etc`.
    - **Active Filters Display:** Show applied client-specific filters clearly.

    **4. Adaptive Sorting.), `Author Verification`. (Security/Quality Scores less applicable to clients themselves, focus on Server scores).
* Controls (Right Sidebar - Client Context):**

    - **UI:** Dropdown labeled "Sort Clients By:". Includes   **`Pricing Model`:** Checkboxes: `Free`, `Open Source`, `Freemium`, `Paid Subscription Asc/Desc toggle.
    - **Options:** `Relevance` (search), **`Rating` (Desc/Asc)**, `Recency` (Last Updated), **`MCP Compatibility Score` (Desc/Asc)**, `Popularity`.
        - **`MCP Compatibility Filters:`**
            - `MCP Feature Support:` Checkboxes: `Supports Tools`, `Supports Prompts`, `Supports Resources`.
            - `Server Type Support:` Checkboxes: `` (Est. Installs/Usage - if available), `A-Z`, `Z-A`.

    **5.Connects to Remote Servers`, `Connects to Local Servers`. *   `MCP Compatibility Score:` Range slider (` Client Card Component (Middle Content Area - Detailed Listing Version):**

    - **Goal:** Provide a rich summary0% - 100%`).
        - **`LLM Compatibility Filters:`** Checkboxes/ enabling users to quickly understand the client's core identity, platform, key MCP capabilities, and community standing. Adaptable for Grid/Searchable list: `OpenAI`, `Anthropic Claude`, `Google Gemini`, `Ollama`, `OpenRouter CompatibleList.
    - **Design (Adaptable for Grid/List - List view preferred for comparing structured data):**
`, `Model Agnostic`.
        - **`Key Features:`** Checkboxes: `Multi-LLM Backend        *   **Layout:** Consistent card structure, clear visual hierarchy. Comparison Checkbox (`[Checkbox]`) top-left.`, `Plugin System`, `Workflow Capabilities`, `Secure Credential Store`.
    - **Active Filters Display:** Bookmark Icon (`[Bookmark Icon]`) top-right.
        - **Content Sections:**
            1. ** Prominently show applied client-specific filters.

**4. Adaptive Sorting Controls (Right Sidebar - Client Context):**Header Block:**
*   `Logo/Icon`: Client's official logo.
*   `Client

    - **UI:** Dropdown labeled "Sort Clients By:". Includes Asc/Desc toggle.
    - Name`: **Prominent, Bold, Clickable Link** to detail page. *   `Author/Company`: `by   **Options:** `Relevance` (search), **`Rating` (Desc/Asc)**, `Popularity` [Name/Company](link) ✓`(With Verification Badge). 2.  **Type & Platform Block (Key (Downloads/Installs if available, otherwise maybe based on Recent Activity/Bookmarks),`Recency`(Last Updated), Context):** *  `Primary Client Type Badge`: (e.g., `IDE Plugin`, `Desktop App`). *   `Platform Icons Row`: Show key supported platform icons (`[Win][Mac][Web]... **`MCP Compatibility Score` (Desc/Asc)**, `A-Z`, `Z-A`.

    5.`). Tooltip lists all supported.
3.   **Concise 1-2 line summary.
Client Card Component (Middle Content Area - Detailed Listing Version):**

    - **Goal:** Provide a rich summary enabling quick evaluation of a client's core purpose, platform support, key compatibilities, and community standing.
    1. **Capabilities/Compatibility Snippet:** **(Crucial Differentiators)**
*   `MCP Support:` Icons/Badges: `[Tools Icon] Tools ✅`, `[Prompts Icon] Prompts ❌`,*   **Design (Adaptable for Grid/List):**
        - **Layout:** Consistent card structure. Comparison Checkbox (`[Checkbox]`) top-left. Bookmark Icon (`[Bookmark Icon]`) top-right.
`[Resources Icon] Resources ✅`. Tooltips explain level of support.
*   `Server Types:` Icons/Badges: `[API Icon] Remote ✅`, `[Terminal Icon] Local ✅`. Instantly shows connection*   **Content Sections:**
            1. **Header Block:**
                - `Client Logo`: Prominent.
                - `Client Name`: **Bold, Clickable Link** to detail page.
                - `Author capability.
                - `Compat Score:` `[MCP Icon] 85%` (Tooltip links to detailed matrix/Company`: `by [Name](link) ✓` (With Verification Badge).
            1. **Type).
            2. **Tags Block:** Display ~3-5 relevant functional or LLM tags (e.g., `#CodeAssistant`, `#LocalLLM`, `#Claude`).
            3. **Trust & Community Block:**
                - & Platform Block (Key Info):**
                - `Primary Client Type Badge`: (e.g., `[`Rating:` `⭐ 4.8 (120)`
                - `License:` `[License Icon] MIT` (Tooltip shows full name).
                - `Pricing:` `[Tag: Freemium]` /App Icon] Desktop App`).
                - `Platform Icons Row:` Compact display of key supported platforms (`[Mac `[Tag: Paid]`/`[Tag: Open Source]`.
            1. **Activity Stat:** `][Win][Linux]`). Tooltip lists all.
            2. **Description Block:** Concise 1-2 line summary of the client's purpose.
            3. **MCP Compatibility Snippet (Crucial):** IconsUpdated:` `[Calendar Icon] 1mo ago`.
    - **Card Actions (Subtle, potentially + Text conveying core MCP capabilities *at a glance*:
*   `[Tools Icon] Tools ✅` / on hover):**
        - `[Link Icon] Visit Website`: Direct link to official site/download.
`[Tools Icon] Tools ❌`
*   `[Prompt Icon] Prompts ✅` / `[Prompt Icon*   `[Compare Icon] Compare`: Add to comparison.
    - **List View Adaptation:** Arrange content] Prompts ❌`*  `[Resource Icon] Resources ✅`/`[Resource Icon] Resources blocks horizontally. Might allow showing more detailed stats or tags directly in columns.

    **6. Comparison Integration:**

    - ❌`*  `[Link Icon] Remote Srv ✅`/`[Link Icon] Remote S   Checkboxes on Client Cards add items to the persistent Comparison Tray. Comparing clients uses the detailed, client-specific attributerv ❌`*  `[Terminal Icon] Local Srv ✅`/`[Terminal Icon] Local list defined previously.

    **7. Contextual Sidebar (Right - Client Context):**

    - ` Srv ❌`
***   (Optional) `[MCP Icon] Compat: 85%` (Featured Clients`:** Curated list relevant to current filters/search.
    - **`Popular Client Categories`:** ClickShow score if space allows, otherwise rely on filter/detail page).
5.  **Key Features/Tags Block:** ~able links (IDE Plugins, Desktop Apps, Frameworks).
    - **`Quick Links:`** "Guide: Choosing an2-3 important tags as pills (e.g., `#OpenSource`, `#Multi-LLM`, `#Agent MCP Client", "Guide: Connecting Servers in [Popular Client]", "Submit a Client", "View Playground" (toFramework`).
6.  **Community & Activity Block:**
*   `Rating:` `⭐ 4. test servers compatible with clients).
    - **`Comparison Tray Access.`**
- **Information Architecture & Content:**
8 (120 reviews)`*  `Updated:` `[Calendar Icon] 1mo ago`*   Requires the full`Client` entity data model, rich with structured compatibility data (MCP matrix, LLM support7.  **Aggregation Source Block (Conditional):** Small source registry logos (`[Anthropic Logo]`, `[PulseMCP Logo]...`) if aggregated. *   **Card Actions (Subtle):** *   `[Compare, platform versions), feature tags, license, pricing model, etc.
    - Relies heavily on accurate data Icon] Compare`. *   `(Optional)` `[Link Icon] Visit Website`: Direct link if primary action sourcing (author submissions with validation, community reports, platform curation/testing). The MCP feature matrix is particularly important and needs clear is external.
    - **List View Adaptation:** Arrange content blocks horizontally. Show more tags or full platform list directly definitions.
- **Interaction & User Flows:**
    - User selects `Clients` Tab -> View loads, showing. Rating and Update Date could be sortable columns.

    **6. Comparison Integration:**

    - Checkboxes add clients sorted by default (e.g., Rating or Popularity). Filters adapt to Client context.
    - User applies filters (e.g., `Client Type: Desktop App`, `Platform OS: macOS`, `Supports Local Servers: Yes`) -> clients to the Comparison Tray. Comparison Page (`/registry/compare?type=client`) uses the detailed client-specific attributes. Results update instantly.
    - User changes sort order (e.g., `Sort By: MCP Compatibility Score`).

    **7. Contextual Sidebar (Right - Client Context):**

    - **`Featured Clients`:** Curated list relevant to current filters or overall popularity.
    - **`Popular Client Categories`:** Clickable links (*   User scans cards, quickly identifying Type, Platforms, MCP capabilities (Tool/Prompt/Resource support, Local/Remote serverDesktop Apps, IDE Extensions, Agent Frameworks...).
    - **`Quick Links:`** "Guide: Choosing an MCP Client", "What is MCP?", "Submit a Client".
    - **`Comparison Tray Access.`**
support), Rating, and License.
    - User selects several clients using checkboxes -> Clicks "Compare" in the tray.
    - User clicks a Client Name -> Navigates to the full Client Detail Page for deep dive and setup guides.
- **Information Architecture & Content:**
    - Requires the detailed `Client` entity data model, including structured    *   User clicks "Visit Website" to go directly to the client's official page.
- **Creative fields for Type, Platforms, MCP Feature Matrix support, LLM Compatibility, License, Pricing Model, etc.
    - Needs Enhancements & Considerations:**
    - **"Works Best With..." Snippet:** On the card, subtly indicate known robust filtering logic based on these specific client attributes. Tagging system needs relevant client-focused tags.
    - Source for highly compatible Servers or LLMs based on documentation or community feedback (e.g., "Optimized for Claude 3.5", "Pairs well with GitHub Server").
    - **Setup Complexity Indicator:** A simple badge (`Easy Setup`, `Moderate Setup "Installs/Usage" metrics needs to be defined or omitted if unreliable. User Ratings are crucial.
- **Interaction`, `Advanced Setup`) based on review data or platform assessment of the connection process detailed in the Setup guide.
& User Flows:**
    - User selects `Clients` Tab -> View loads.
    - User filters*   **Visual Matrix Filter (Advanced):** Allow users to filter directly by checking boxes in a mini MCP feature matrix within the by `Client Type: IDE Extension` and `IDE Support: VS Code`.
    - User examines cards, focusing filter sidebar (`Tools` ✅, `Prompts` ❌, etc.).
    - **Performance:** Efficient on MCP Compatibility snippet (Does it support Local? Does it support Resources?). Compares Ratings and Last Updated dates.
*ly filtering/sorting clients based on multi-value compatibility fields (Platforms, LLMs, MCP features) requires optimized backend queries   User sorts by `MCP Compatibility Score`.
    - User adds promising clients to compare -> Navigates to Comparison.
    - **Data Verification:** Establish a clear process for verifying submitted compatibility information (e.g., community Page.
    - User clicks a Client Name -> Navigates to the full Client Detail Page for setup guides and deep flagging, author attestation, periodic platform checks).

---

This specification for the **Clients View** within the MCP Omni Registry dives.

- **Creative Enhancements & Considerations:**
    - **"Works Best With..." Indication:** On Client Cards, subtly indicate (e.g., small logos) specific Servers or Server types this client is known to work particularly Explore page focuses on providing users with the specific filters, sorting options, and crucial card information needed to effectively discover and evaluate well with, based on Use Cases or explicit linking.
    - **Visual MCP Matrix on Card (Compact):** Instead of the diverse landscape of MCP Client applications based on their platform needs, technical requirements, and desired MCP capabilities.



# Single Use Case Detail

**MCP Omni - Comprehensive Specification**

**Document Section: III. Page-by-Page Specification**

**(L) Use Case Detail Page (`/use-cases/[use-case-slug]`)** *(Revised Index)*

- **Page Name/Type:** Use Case / Solution Tutorial Page
- **Purpose & Goals:**
    - **Practical Solution Blueprint:** Provide a comprehensive, step-by-step guide demonstrating how to achieve a specific real-world goal (e.g., "Automated Customer Support Triage", "Code Generation based on GitHub Issues", "Personalized News Digest") by orchestrating a combination of **multiple MCP Servers, Clients, platform-hosted Skills, specific Tools, and potentially external services or LLMs.**
    - **Illustrate Interoperability:** Explicitly showcase the power of MCP and the MCP Omni platform by demonstrating how different components (potentially from different authors, with different hosting models) can be combined seamlessly to build sophisticated applications and automations.
    - **Contextual Learning:** Teach users not just *how* to perform individual steps, but *why* specific components are chosen for particular tasks within the broader solution, explaining the role and interaction of each piece.
    - **Actionable & Reproducible Guidance:** Ensure the tutorial is exceptionally clear, accurate, and provides all necessary prerequisites, configuration details, code snippets, commands, and visual aids (screenshots, diagrams) to allow users to successfully reproduce the solution themselves.
    - **Component Discovery Driver:** Serve as a powerful discovery mechanism by linking prominently to the detail pages of *all* MCP Omni components featured in the tutorial, driving traffic back to the registry and encouraging exploration.
    - **Inspire Innovation:** Spark new ideas by showcasing creative combinations of tools and techniques, encouraging users to adapt and extend the demonstrated solution for their own purposes.
    - **Community Knowledge Sharing:** Provide a platform for the community and the MCP Omni team to share best practices, common patterns, and innovative solutions built using the ecosystem.
- **Target Audience & Scenarios:**
    - *Developer Learning Integration:* "I want to see how to combine the `@google/gmail-server` with the `@openai/summarizer-skill` using the `mcp-omni-python-sdk`." -> Finds a Use Case demonstrating this specific combination.
    - *Team Evaluating a Workflow:* "Can we automate our bug reporting from Sentry to Jira using MCP? What components would we need?" -> Searches Use Cases for "Sentry Jira automation", finds a tutorial listing required Servers/Skills and steps.
    - *User Seeking Solution:* "How can I get a daily summary of my team's Slack channel activity sent to my email?" -> Searches Use Cases, finds one using Slack Server, Summarization Skill, and Email Server.
    - *Component Author Promoting Usage:* Submits a Use Case demonstrating a novel application of their Server/Skill in combination with popular clients or other servers.
- **Layout & Structure:** **Optimized for Tutorial Consumption & Component Context.**
    - **Main Content Area (Center/Left, wide):** Single-column flow for the primary step-by-step tutorial content. Maximizes readability and focus on instructions.
    - **Right Sidebar (Sticky/Floating, narrower):** Provides persistent context, navigation within the tutorial, and links to featured components. Contains:
        1. "On This Page" Table of Contents (auto-generated).
        2. **"Components Used in this Use Case" Box (CRITICAL):** List of all featured MCP Servers, Clients, Skills with logos/names/types, linking to their detail pages.
        3. (Optional) "Estimated Difficulty / Time" box.
        4. Action buttons (Bookmark, Share, Report Issue).
        5. (Optional) Link to a pre-configured Playground session demonstrating a key part of the tutorial.
- **Key Features & Functionality (Hyper-Detailed):**

    **1. Header Section (Main Content):**

    - **`Title:`** Clear, compelling, and **goal-oriented** (e.g., "Generate Weekly Project Reports by Combining Jira Server and OpenAI Skill using Python SDK"). Use H1.
    - **`Author Block:`** Author Avatar/Name (linked to profile), `Published Date: [Date]`, `Last Updated: [Date]`.
    - **`Metadata Badges:`** `Difficulty Level:` (Beginner/Intermediate/Advanced/Expert), `Est. Time:` (`⏱️ 45 min`), `Primary Category:` (`Workflow Automation`/`Data Analysis`).
    - **`Abstract/TLDR:`** 2-3 sentence summary outlining the problem, the solution approach using MCP Omni components, and the final outcome.

    **2. Introduction Section:**

    - **Problem Statement:** Clearly define the real-world problem or goal this use case addresses.
    - **Solution Overview:** Explain the high-level strategy for solving the problem using the chosen MCP Omni components. Briefly describe the role of each major component.
    - **Architecture Diagram (Highly Recommended):** A simple visual diagram showing the key components (Clients, Servers/Skills, LLMs, External Services) and the flow of data/interaction between them for this specific solution.
    - **Target Audience/Prerequisites:** Briefly mention who this tutorial is for and the assumed baseline knowledge (e.g., "Familiarity with Python and basic API concepts recommended").

    **3. "Components Used" Section (Visually Distinct - Below Intro OR Mirrored in Sidebar):**

    - **Purpose:** Immediately show the user *all* the building blocks required from the MCP Omni ecosystem.
    - **UI:** Use a grid or structured list of compact "Component Cards".
    - **Card Content:** For each required Server, Client, or Skill:
        - `Logo/Icon`.
        - `Name` (e.g., `@jira/server-official`, `Claude Desktop App`, `@openai/summarizer-skill`).
        - `Type Badge` (Server (Remote), Client (Desktop), Hosted Server).
        - **Crucially:** Direct `Link` to its detail page on MCP Omni.
    - **External Services:** Also list required non-MCP services (e.g., "OpenAI Account", "Jira Cloud Account").

    **4. Prerequisites Section:**

    - **Structure:** Detailed checklist (`[ ] Requirement`). Grouped by category (Accounts, Software, MCP Omni Setup, Credentials).
    - **Content:**
        - *Accounts:* List all necessary external service accounts (link to signup).
        - *Software:* Specific local software needed (link to install guides).
        - *MCP Omni Setup:* Actions needed within the platform (e.g., "Ensure `@jira/server-official` and `@openai/summarizer-skill` are added to an active `Skillset` called `reporting-set`", "Generate an MCP Omni Platform API Key"). Link directly to relevant settings pages (`/settings/skillsets`, `/settings/api-keys`).
        - *Credentials:* List the *types* of credentials needed (e.g., "Jira API Token", "OpenAI API Key"). **Do not ask for keys here.** Link to the MCP Omni `Credentials Manager` (`/settings/credentials`) where users should securely store them. Explain that the Skillset will make these available where needed.

    **5. Step-by-Step Instructions Section (The Core):**

    - **Structure:** Clear, logical numbering (`Step 1`, `Step 2`, ...). Use expandable sections for major phases if the tutorial is long.
    - **Content Formatting (As detailed previously):** Mix clear text instructions, explanations ("Why?"), **annotated screenshots** (essential for UI steps in clients or platform setup), **copyable code blocks** (for SDK usage, CLI commands, config files), callout boxes (Notes, Warnings).
    - **Highlighting Component Interaction:** Explicitly point out when specific components are being configured or used. E.g.:
        - "Now, configure the **Jira Server** connection in your chosen **MCP Client** (see prerequisites)..." (with screenshot).
        - "In this Python script, we'll use the `mcp_omni_sdk` to call the `search_issues` tool from the **Jira Server** and then pass the results to the `summarize` tool on the **OpenAI Skill**..." (with code block).
        - Reference components using their linked names.
    - **Handling Credentials Safely:** Demonstrate referencing credentials stored in MCP Omni's `Credentials Manager` or accessed via `Skillsets` rather than hardcoding keys in examples. Show environment variable usage for local testing where appropriate, advising users to use secure methods in production.
    - **(Enhancement) Embedded Playground Snippets:** For steps involving a single tool call where parameters are mostly static or illustrative, embed a Playground snippet pre-configured for the relevant *implementing server/skill* and tool, allowing inline testing (requires Skillset selection for auth).

    **6. Verification / Results Section:**

    - Clear instructions on how to verify the entire workflow/solution is working.
    - Show expected final output (screenshots of generated reports, messages in Slack, data updated in CRM, etc.).
    - Include example output logs or data snippets.

    **7. Troubleshooting Section:**

    - FAQ format addressing potential errors specific to the interactions shown in *this tutorial* (e.g., "Authentication error with Jira Server", "Summarizer Skill returning empty results", "Permission denied when writing file").

    **8. Conclusion & Next Steps Section:**

    - Summarize the achievement.
    - Suggest ways to customize or extend the solution.
    - Link to related Use Cases, documentation for featured components, or more advanced concepts.

    **9. Community Q&A Section:**

    - Dedicated, threaded comment system for questions and discussion *about this specific Use Case*. Login required. Moderated. Upvoting/Verified Answers.

    **10. Right Sidebar (Sticky):**

    - **`On This Page` Navigation:** Auto-generated, links to H2/H3s in main content. Highlights current section on scroll.
    - **`Components Used` Box:** Compact list of featured Servers/Clients/Skills with icons/names, linking to their detail pages. (Mirrors/summarizes section below intro).
    - **`Metadata` Box:** Difficulty, Est. Time, Category Tags, Author Link.
    - **Action Buttons:** `[Bookmark Icon] Bookmark Use Case`, `[Share Icon] Share`, `[Flag Icon] Report Issue with Tutorial`.
    - **(Optional) `Link to Playground Session:`** If a key part can be pre-configured, provide a direct link to open the Playground with relevant server/tool/parameters loaded.
- **Information Architecture & Content:**
    - `UseCase` entity needs fields for Title, Author, Dates, Difficulty, Time, Category, Tags, Abstract, Rich Text Content (Markdown preferred), Video URL, relationships to multiple `Server`, `Client`, `Skill` entities.
    - Requires a robust Markdown renderer supporting code highlighting, images, custom callouts.
    - Needs tight integration with the component registry for linking.
    - Comment system backend with moderation tools.
- **Interaction & User Flows:**
    - User finds Use Case via Directory, Search, or links from Component pages.
    - User reads Intro, checks Components Used and Prerequisites.
    - User follows Steps sequentially, using code snippets, screenshots, and explanations. Uses "On This Page" nav for jumping sections.
    - User potentially tests steps via embedded Playground snippets or the main Playground link.
    - User verifies the result.
    - User asks questions in the Q&A section (if needed).
    - User bookmarks or shares the Use Case.
    - User clicks component links to learn more about specific servers/clients/skills used.
- **Considerations & Notes:**
    - **Maintainability:** Keeping multi-component tutorials up-to-date as individual components evolve (new versions, changed parameters) is a significant challenge. Requires a process for authors/platform team to review and update Use Cases periodically. Clearly display the "Last Updated" date. Potentially allow community suggestions for updates.
    - **Quality Control:** Ensure submitted Use Cases are technically accurate, reproducible, clearly written, and follow security best practices (especially around credentials). Implement a thorough review process.
    - **Component Versioning:** Tutorials should ideally specify the versions of the MCP Omni components they were tested with to aid reproducibility.
    - **Complexity Management:** Break down very complex solutions into multiple, linked Use Cases if necessary. Use expandable sections effectively.



# Universal Registry > All Use Cases

**MCP Omni - Comprehensive Specification**

**Document Section: III. Page-by-Page Specification**

**(K) Use Cases Directory (`/` view `Use Case`)**

- **Page Name/Type:** Use Case & Tutorial Directory / Solution Library
- **Purpose & Goals:**
    - **Centralized Solution Hub:** Create the primary destination within MCP Omni for users seeking practical, step-by-step guides on how to solve specific problems or implement common patterns using combinations of MCP Servers, Clients, and platform-hosted Skills.
    - **Targeted Problem Solving:** Enable users to efficiently find tutorials relevant to their specific goals, technical environment, or desired application domain (e.g., "automating code reviews," "building a RAG system with local data," "summarizing customer feedback from Zendesk").
    - **Inspiration & Ideation:** Spark creativity by showcasing diverse and innovative applications of the MCP ecosystem, encouraging users to explore new possibilities and combinations of tools.
    - **Skill & Component Promotion:** Indirectly promote the adoption of specific Servers, Clients, and Skills by demonstrating their practical value within the context of solving real-world problems.
    - **Learning Pathway:** Serve as a structured learning resource, allowing users to filter by difficulty and category to progress from basic examples to more complex implementations.
    - **Community Knowledge Showcase:** Provide a platform for both the MCP Omni team and the broader community to share their expertise and practical solutions, creating a valuable, crowd-sourced knowledge base.
- **Target Audience & Scenarios:** (As defined previously, emphasizing finding solutions/examples)
    - *Developer stuck on a problem:* "How do others typically handle real-time data ingestion via MCP for analysis?" -> Searches "real-time data analysis", filters by `Category: Data Processing & Analysis`.
    - *Team exploring platform potential:* "What are some advanced workflow automation examples possible with Omni-hosted Skills?" -> Filters by `Difficulty: Advanced`, `Category: Workflow Automation`, potentially `Component Type Used: Hosted Server`.
    - *User browsing for ideas:* Sorts by `Popularity`, browses cards in Grid View, looking for interesting thumbnails and titles.
    - *User looking for client examples:* "Show me Use Cases specifically featuring the `Cursor` client." -> Filters by `Featured Component: Cursor`.
- **Layout & Structure:** **Consistent 3-Column Discovery Interface** (Inherited from `/registry` Homepage Spec, ensuring seamless user experience).
    - **Minimal Persistent Header:** Logo, Omni Search Bar, Key Platform Links, User Controls.
    - **Main Discovery Interface:**
        - **Component Type Tabs:** The `Use Cases ([Count])` tab is visually selected and active.
        - **Left Sidebar (Filters - ~25% width):** Filters are dynamically adjusted to be relevant specifically for Use Cases.
        - **Middle Content Area (Results Feed - ~55-60% width):**
            - Results Header Bar: Active Filter Pills, Results Count, `Sorting Dropdown` (Use Case-specific options), `View Mode Toggle` (`Grid`/`List`).
            - Main Grid/List Area: Displays **Use Case Cards (Detailed Listing Version)**.
            - Pagination Controls.
        - **Right Sidebar (Sorting & Context - ~20% width):** Contains Use Case-specific sorting options and contextual information.
- **Key Features & Functionality (Detailed - Use Case View Context):**

    **1. Omni Search Bar:**

    - When `Use Cases` tab is active, search prioritizes Use Case Titles, Descriptions, Tags, Categories, Author names, and **names of components featured within the Use Cases**. Semantic search understands problem descriptions (e.g., "summarize meetings automatically").

    **2. Component Type Tabs:**

    - `Use Cases ([Count])` tab is active.

    **3. Dynamic Multi-Faceted Filtering (Left Sidebar - Use Case Context):**

    - **Key Adaptation:** Filters focus on classifying the tutorial's goal, complexity, and the key components it utilizes.
    - **Visible Facets:**
        - **`Use Case Category` (Primary Filter):** Multi-select checkboxes based on the defined hierarchy (e.g., `Workflow Automation -> Ticket Routing`, `Data Processing -> RAG Pipeline`, `Code Generation -> PR Review Assistant`). Display counts.
        - **`Featured Components`:** Searchable multi-select input with auto-complete for Servers, Clients, and Skills. Allows users to find tutorials using specific components they are interested in (e.g., "Show Use Cases using `@openai/summarizer-skill` AND `Slack Client`").
        - **`Difficulty Level`:** Radio buttons/Styled buttons: `Beginner`, `Intermediate`, `Advanced`, `Expert`. Tooltip explains criteria.
        - **`Tags`:** Searchable multi-select for granular topics/techniques demonstrated (e.g., `#webhook-trigger`, `#vector-database`, `#image-processing`, `#multi-agent`, `#LangChain-integration`).
        - **`Primary LLM Featured`:** Checkboxes/Dropdown (OpenAI GPT-4, Claude 3, etc., "Any/Agnostic"). Filters tutorials focused on specific model integration.
        - **`Author Type`:** Checkboxes (`MCP Omni Team`, `Verified Author`, `Community`).
        - **`Content Type`:** Checkboxes (`Includes Video`, `Interactive Snippets`, `Code-Heavy`).
    - **Active Filters Display:** Show applied use case-specific filters clearly.

    **4. Adaptive Sorting Controls (Right Sidebar - Use Case Context):**

    - **UI:** Dropdown labeled "Sort Use Cases By:". Includes Asc/Desc toggle.
    - **Options:** `Popularity` (Views/Bookmarks/Comments), `Recency` (Newest First), `Difficulty` (Asc/Desc), `Estimated Time` (Asc/Desc), `Title (A-Z)`.

    **5. Use Case Card Component (Middle Content Area - Detailed Listing Version):**

    - **Goal:** Provide enough visual appeal and key information to allow users to quickly assess if a tutorial matches their interests and needs *before* clicking through. Must be scannable and informative.
    - **Design (Adaptable for Grid/List):**
        - **Layout:** Consistent card structure with clear zones for image, title, metadata, and actions. Comparison Checkbox typically not needed here, focus on Bookmark/Save. Bookmark Icon (`[Bookmark Icon]`) top-right.
        - **Content Sections (Grid View - Visually Oriented):**
            1. **`Thumbnail Image/Video Placeholder:`** **Crucial visual hook.** High-quality, relevant custom image or auto-generated thumbnail (e.g., collage of featured component logos, diagram snippet). If video exists, overlay a Play icon. Clickable to detail page.
            2. **`Category Tag:`** Small tag overlayed or above title (e.g., `Workflow Automation`).
            3. **`Title:`** **Compelling, Goal-Oriented, Clickable Link.** Max 2-3 lines. (e.g., "Auto-Summarize Zoom Meetings & Post to Slack").
            4. **`Author Info:`** `by @username` / `MCP Omni Team` (Linked).
            5. **`Metadata Bar:`** Row of Icon + Text snippets:
                - `[Difficulty Badge: Intermediate]`
                - `[Clock Icon] ⏱️ 45 min`
                - `[Calendar Icon] Updated: 1 mo ago`
            1. **`Featured Components Row:`** Display 3-5 small logos of the *key* Servers/Clients/Skills used. Tooltip lists all components. Critical for seeing required tech at a glance.
            2. **`Short Description/Excerpt:`** 1-2 lines explaining the core outcome or technique.
            3. **`Stats Row:`** Subtle display: `👁️ Views`, `❤️ Bookmarks`, `💬 Comments`.
        - **Content Sections (List View - Information Dense):**
            - `Thumbnail` (Smaller, optional).
            - `Title` (Prominent Link).
            - `Author` & `Last Updated`.
            - `Excerpt/Description`.
            - `Metadata Columns:` Category, Difficulty, Est. Time, Featured Components (Icons or Text List), Stats (Views, Bookmarks, Comments).
            - `Actions:` Bookmark button visible.
    - **Hover Interaction:** Subtle highlight. Tooltips for icons, full description.

    **6. Submit CTA:**

    - Prominent "Submit Your Use Case" button in the Right Sidebar or near the page title. Links to `/submit/use-case`.

    **7. Contextual Sidebar (Right - below Sorting):**

    - **`Featured Use Cases`:** Curated list relevant to filters or overall popularity.
    - **`Popular Categories/Tags`:** Clickable links based on Use Case content.
    - **`Quick Links:`** "Guide: Writing Effective Use Cases", "Browse All Servers", "Browse All Clients".
- **Information Architecture & Content:**
    - `UseCase` entity needs strong relationships to multiple `Server`, `Client`, `Skill` entities (for the "Featured Components" filter/display).
    - Requires well-defined `Category` taxonomy and consistent `Tagging`.
    - Needs reliable metrics for `Difficulty`, `Estimated Time` (author-set, potentially community-refined).
    - Requires tracking Views, Bookmarks, Comments for sorting/display.
- **Interaction & User Flows:**
    - User navigates via `Use Cases` Tab on `/registry` or searches for a solution.
    - User applies filters based on their goal (`Category`), technical constraints (`Featured Components`, `Primary LLM`), or skill level (`Difficulty`).
    - User sorts results (e.g., by `Popularity` or `Recency`).
    - User scans cards, looking at Thumbnails, Titles, Featured Component logos, and Difficulty.
    - User clicks a compelling Use Case Card title -> Navigates to the full Use Case Detail Page.
    - User clicks "Submit Your Use Case" -> Navigates to the submission form.
- **Creative Enhancements & Considerations:**
    - **Use Case Difficulty Algorithm:** Instead of just author-set difficulty, could the platform estimate difficulty based on the number of steps, complexity of code snippets, number of components involved, and required prerequisites?
    - **Component Synergy Visualization:** On card hover, subtly highlight connections between the featured component icons, hinting at the workflow.
    - **"Try a Key Step" Link:** For Use Cases featuring Omni-Hosted Skills or common patterns, add a "Quick Try" link on the card that jumps directly to a pre-configured step in the main platform Playground, allowing users to experience a core part of the tutorial instantly.
    - **Community Curated Lists:** Allow trusted community members or the platform team to create curated lists of Use Cases (e.g., "Best Use Cases for Beginners", "Top Code Generation Examples") featured on this page or linked from the sidebar.
    - **Card Content A/B Testing:** Experiment with different information arrangements and visual elements on the Use Case cards to optimize click-through rates and user understanding.



# Universal Registry > Compare {Servers|Tools|Clients}

**MCP Omni - Comprehensive Specification**

**Document Section: III. Page-by-Page Specification**

**(L) Unified Component Comparison Page (`/compare`)** *(Revised Index)*

- **Page Name/Type:** Unified Component Comparison Engine
- **Purpose & Goals:**
    - **Multi-Type, Side-by-Side Analysis:** Provide a powerful, unified interface for users to conduct detailed, side-by-side comparisons of 2-4 selected MCP components, regardless of whether they are **Servers (External/Omni-Hosted)**, **Clients**, or **Tools** (via their implementations). *(Focusing initially on Servers & Clients as primary comparable entities, but design should allow future extension)*.
    - **Reveal Critical Differences & Similarities:** Go beyond simple spec listings to intelligently highlight key differentiating factors (e.g., hosting model, MCP feature support, unique tools, security posture, platform compatibility, licensing) and areas of commonality across the selected items.
    - **Facilitate Informed Decision-Making:** Empower users to make confident choices by presenting complex data in an easily scannable, comparative format, supported by contextual explanations (tooltips) and direct links for deeper dives.
    - **Contextual Relevance:** Dynamically adapt the displayed comparison attributes (rows) based on the *type* of components being compared, ensuring relevance and avoiding clutter (e.g., don't show "Tool Count" when comparing Clients).
    - **Seamless Workflow Integration:** Integrate smoothly with the main Registry Explore page (triggering comparison) and link clearly back to individual component detail pages for further investigation. Enable easy modification of the comparison set.
    - **Shareable Insights:** Allow users to easily share their specific comparison view with colleagues or the community via a unique URL.
- **Target Audience & Scenarios:**
    - *Developer choosing Server:* "Compare `@google/gmail-server` (Remote, Official) vs. `@community/smtp-skill` (Omni-Hosted) vs. `my-local-mailer` (Local, External)." -> Uses Compare page to see differences in Hosting, Tool Count, Security Score, Setup Complexity (implied via config).
    - *End-user choosing Client:* "Compare `Claude Desktop App` vs. `Cursor` vs. `BoltAI` for macOS, focusing on MCP feature support and ease of connecting Local Servers." -> Uses Compare page, focuses on Platform, MCP Matrix rows, Setup Method rows.
    - *Team Lead selecting Framework:* "Compare `fast-agent` vs. `mcp-agent` frameworks based on MCP completeness, extensibility, and license." -> Uses Compare page, focuses on MCP Matrix, Extensibility rows, License row.
    - *User comparing Tool Implementations:* (Accessed via Tool Detail Page potentially) "Compare the `vector_search` tool implementation from `@pinecone/server` vs. `@omni/weaviate-skill`." -> Compares parent server attributes (Type, Hosting, Rating, Security).
- **Layout & Structure:** **Adaptive Multi-Column Tabular Layout with Smart Attribute Grouping.**
    - **Header Area:**
        - Page Title: Dynamically generated, e.g., `Comparing 3 MCP Servers` or `Comparing 2 Clients`.
        - Brief Instruction: "Review key differences and similarities side-by-side."
        - Action Buttons: `[+ Icon] Add/Remove Items` (Opens search modal filtered by current comparison type), `[X Icon] Clear All Items`, `[Share Icon] Share Comparison`.
    - **Comparison Table Area:**
        - **Columns:** One column dedicated to each compared component (2-4 recommended). Max width to ensure readability, horizontal scroll if needed on smaller viewports.
        - **First Column (Sticky):** Lists the Comparison Attributes, grouped into logical, potentially expandable sections (e.g., `Identification & Origin`, `Core Type & Platform`, `Capabilities & Features`, `MCP Integration`, `Trust & Community`, `Activity & Support`).
        - **Component Columns (Headers - Sticky):** Display component Logo, Name (linked to detail page), Author/Namespace. Includes an `[X]` icon in the corner to remove *this specific column* from the comparison. Primary CTA relevant to type (`Test`, `Visit Website`, `View Details`) below the name.
        - **Data Cells:** Display the corresponding attribute value for each component in its column. Use consistent formatting (text, badges, icons, mini-charts) and **visual diff highlighting** (subtle background color or text styling) to draw attention to differing values between columns.
- **Key Features & Functionality (Detailed - Focusing on Adaptivity & Attributes):**

    **1. Dynamic Attribute Row Selection:**

    - The core intelligence of this page. Based on the `type` parameter in the URL (`?type=server`, `?type=client`, or potentially `?type=mixed` if comparing across types becomes feasible), the system dynamically selects and orders the relevant attribute rows from the master list below.
    - For mixed comparisons (if implemented), show only attributes common to *all* selected types, clearly indicating which items lack certain attributes. (Initial focus on comparing items of the *same* type is recommended for clarity).

    **2. Master List of Potential Comparison Attributes (Rows):**

    *(System selects relevant rows based on comparison type. Visual Diff Highlighting applied where values differ.)*

| **Section**                 | **Attribute Row Name**                | **Applicable To**    | **Data Display & Enhancement Ideas**                                                                                                                        | **Tooltip/Info (`ℹ️`)**                                                                                                      |
| --------------------------- | ------------------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |
| **Identification & Origin** | Logo / Icon                           | Server, Client       | Display component Logo/Icon consistently.                                                                                                                   | Visual identifier.                                                                                                           |
|                             | Author/Namespace                      | Server, Client       | `[@author ✓](link)` with Verification Checkmark. Highlight differences.                                                                                     | Indicates origin and verified status.                                                                                        |
|                             | Source / Verification                 | Server, Client       | `[Badge: Official/Verified/Community]`. Compare badges.                                                                                                     | Level of platform/provider validation.                                                                                       |
|                             | Aggregated From                       | Server, Client       | Row of small source registry logos (`[Glama] [Smithery]...`). Show differences in presence across registries.                                               | Ecosystem visibility indicator. Presence on multiple known registries might signal broader adoption.                         |
| **Core Type & Platform**    | **Component Type**                    | Server, Client       | **Explicitly state type if comparing mixed types.** Badges: `Server (Remote)`, `Server (Local)`, `Client (Desktop)`, `Hosted Server`, etc.                  | Clarifies the fundamental nature of each compared item.                                                                      |
|                             | **Hosting Model**                     | Server               | `[Omni Logo Icon] Hosted by Omni` vs. `[External Link Icon] External`. **Key Server Differentiator.**                                                       | Where the server logic executes. Affects setup, management, cost, and security model.                                        |
|                             | **Platform Support**                  | Client               | Row of Platform Icons (`[Win][Mac][Web][VS Code]...`). Highlight differing platform availability.                                                           | Which operating systems, browsers, or IDEs does this client run on? Critical for compatibility.                              |
|                             | Installation Method                   | Client               | Text: `Download`, `Web`, `Marketplace`, `npm/pip`, etc. Compare methods.                                                                                    | How users acquire and install the client.                                                                                    |
| **Capabilities & Features** | **Total Tool Count**                  | Server               | `[Tools Icon] 25 Tools`. Bold number + Mini bar chart comparison.                                                                                           | Total number of distinct MCP functions provided. Indicator of functional breadth.                                            |
|                             | **Tool List Comparison (Expandable)** | Server               | **Visual Diff:** Side-by-side lists. Green=Unique, Yellow=Partial Overlap, Grey=Common. Links to Tool details. *Crucial for server comparison.*             | Detailed view of functional overlap and unique capabilities.                                                                 |
|                             | Key Features Checklist                | Client               | Checklist comparing presence (`✓`/`❌`) of core client features (e.g., `Multi-LLM`, `Local LLM`, `Server Browser`, `Cred Store`, `Workflow/Agent Features`). | Quick comparison of non-MCP functionalities.                                                                                 |
|                             | Primary Functional Tags               | Server, Client       | Display key functional tags as pills. Highlight overlapping vs. unique tags.                                                                                | Quick glance at the primary intended domain or capability area.                                                              |
| **MCP Integration**         | **Server Type Support**               | Server, Client       | `[API Icon] Remote ✅`, `[Terminal Icon] Local ❌`. Compare client support vs. server type.                                                                   | Does the client support connecting to this type of server? Does the server operate this way?                                 |
|                             | **MCP Feature Matrix (Expandable)**   | Client               | Detailed matrix (`Tools`, `Prompts`, `Resources`, `Sampling`, `Roots`) with `✅`/`❌`/`⚠️`. **Key Client Differentiator.**                                    | Granular view of which parts of the MCP spec the client supports. Determines compatibility with advanced server features.    |
|                             | **MCP Compatibility Score**           | Client               | `[MCP Icon] 85%`. Bold score + Mini bar chart comparison.                                                                                                   | Aggregated score reflecting overall MCP feature support completeness for clients.                                            |
|                             | Server Connection Method              | Client               | Text: `UI Config`, `Config File`, `CLI`, `SDK`. Compare methods.                                                                                            | How servers are configured *in this client*. Impacts ease of setup.                                                          |
|                             | Tool Invocation UX                    | Client               | Text/Tags: `Manual Picker`, `Slash Command`, `Agent Logic`, `SDK Call`. Compare UX paradigms.                                                               | How tools are triggered *by the user/system* within the client. Impacts workflow.                                            |
| **Configuration**           | **# Required Config Vars (Runtime)**  | Server               | `[Config Icon] 5 Required`. Number + Bar chart. (Refers to *running* the server).                                                                           | Setup complexity indicator for self-hosting or Omni deployment.                                                              |
|                             | **# Secret Vars (Runtime)**           | Server               | `[Lock Icon] 2 Secrets`. Number + Bar chart.                                                                                                                | Credential management needs for running the server.                                                                          |
|                             | Required Connection Auth              | Server               | Text/Tags: `API Key Header`, `Bearer Token`, `OAuth`, `None`. Compare requirements.                                                                         | What credentials a client needs to provide to *connect* to this server.                                                      |
| **Trust & Community**       | **Quality Score (Omni)**              | Server               | `[Gauge Icon] B+ (88%)`. Score/Grade + Bar chart.                                                                                                           | Platform's automated assessment of server quality (repo health, docs, etc.).                                                 |
|                             | **Security Scan (Omni)**              | Server               | `[Shield Icon] Passed` / `[Yellow/Red Icon + CVE Count]`. Compare status.                                                                                   | Summary of platform-run or reported security scans for servers.                                                              |
|                             | **License**                           | Server, Client       | `[License Icon] MIT`. Link + Color-coded background based on permissiveness. Compare licenses.                                                              | Critical for legal compliance and usage rights.                                                                              |
|                             | **User Rating (Omni)**                | Server, Client       | `⭐ 4.7 (15 reviews)`. Rating + Count. Bar chart comparison.                                                                                                 | Aggregated community feedback score from MCP Omni reviews.                                                                   |
|                             | Community Activity (Repo)             | Server, Client (OSS) | `[Chart Icon] High`/`Medium`/`Low`. Compare activity levels.                                                                                                | Indicator of active maintenance and community involvement based on source repo activity.                                     |
| **Activity & Support**      | **Last Updated (Component)**          | Server, Client       | `[Calendar Icon] 2w ago`. Relative date. Highlight most recent.                                                                                             | How recently the server code or client application itself was updated.                                                       |
|                             | Official Documentation Quality        | Client               | Badges/Text: `Excellent`, `Good`, `Basic`, `Missing`. Compare assessed quality.                                                                             | Assessment of the client's own official documentation clarity and completeness.                                              |
|                             | Primary Support Channel               | Server, Client       | Text/Link: `GitHub Issues`, `Discord`, `Email`, `Forum`, `None`. Compare channels.                                                                          | Where to go for help or to report issues for this specific component.                                                        |
| **Ecosystem Integration**   | **Featured Use Cases Count**          | Server, Client       | `[Case Icon] 5 Use Cases`. Number + Link to filtered Use Case list. Compare counts.                                                                         | Number of tutorials on MCP Omni demonstrating this component. Indicates documented value and practical application examples. |
|                             | **Known Compatible Components**       | Server <=> Client    | Row of small Logos/Names of known compatible counterparts (e.g., show clients compatible with server, or servers compatible with client). Compare overlaps. | Helps users find components known to work well together based on Use Cases or explicit linking.                              |

**3. Add/Remove Items Modal:**

    - **Trigger:** Click `[+ Icon] Add/Remove Items` button in header.
    - **UI:** Simple modal with a search bar (filtered to the current comparison type: Servers or Clients). Shows results as a list with checkboxes. Checked items are currently in comparison. Users can check/uncheck items. "Update Comparison" button applies changes. Allows easily swapping items in/out.

    **4. Share Functionality:**

    - Clicking `[Share Icon] Share Comparison` generates a unique, persistent URL (e.g., `/registry/compare?type=server&ids=xxx,yyy,zzz`). Opening this URL reconstructs the exact comparison view.
- **Information Architecture & Content:**
    - Relies on the comprehensive, structured data collected for both Server and Client entities, including all the detailed attributes listed above.
    - Requires backend logic to:
        - Dynamically select relevant attribute rows based on the `type` being compared.
        - Fetch data for multiple components efficiently.
        - Perform comparisons and generate visual diff highlights (especially for Tool Lists).
        - Generate shareable comparison links.
- **Interaction & User Flows:**
    1. User selects items on `/registry` -> Clicks Compare button in tray.
    2. Lands on `/registry/compare` page with selected items displayed in columns.
    3. User scrolls through attribute rows, using visual diff highlighting and tooltips to quickly identify key differences (e.g., Server Type, Hosting, MCP Support Matrix, License, Scores).
    4. User expands detailed sections like "Tool List Comparison" for deeper analysis.
    5. User decides one item isn't relevant -> Clicks 'X' on its column header to remove it.
    6. User clicks "Add/Remove Items" -> Searches for another item -> Checks its box, unchecks another -> Clicks "Update Comparison".
    7. User finds the best fit -> Clicks the component name in the column header to go to its detail page.
    8. User clicks "Share Comparison" -> Copies URL to send to a colleague.
- **Creative Enhancements & Considerations:**
    - **"Highlight Differences" Toggle:** Add a toggle switch that, when enabled, significantly increases the visual prominence of rows where values differ between columns, making it even faster to spot key distinctions.
    - **Attribute Weighting/Prioritization (Advanced):** Allow logged-in users to indicate which attributes are most important to them (e.g., drag-and-drop row priority, or select top 3 factors). The UI could then subtly emphasize these rows or even calculate a personalized "match score" for each column based on user priorities.
    - **Direct Action Integration:** Include key actions directly in the column headers beyond just linking to details (e.g., a mini "Test in Playground" button for servers, a direct "Bookmark" button).
    - **Save Named Comparisons:** Allow logged-in users to save specific sets of compared items with a name for later reference (e.g., "My Top 3 Database Server Options").
    - **Extensibility:** While focusing on Servers & Clients initially, design the backend data model and frontend components flexibly to potentially accommodate comparing Tools (via implementations) later by defining relevant attribute sets for them.

**(L) Unified Component Comparison Page (`/registry/compare?type=client&ids=cursor,windsurf,cline,claude-desktop`)** *(Specific Instance)*

- **Page Name/Type:** MCP Client Comparison: Cursor vs. Windsurf vs. Cline vs. Claude Desktop
- **Purpose & Goals:**
    - **Targeted Analysis:** Provide developers and technically-inclined users with an in-depth, side-by-side comparison of four prominent, often developer-focused, MCP Clients: Cursor, Windsurf, Cline, and the official Claude Desktop App.
    - **Highlight Key Trade-offs:** Illuminate the specific strengths, weaknesses, philosophical approaches, and compatibility differences relevant when choosing between an AI-native IDE (Cursor), an agentic IDE (Windsurf), an autonomous agent within an existing IDE (Cline), and a dedicated chat interface with deep MCP support (Claude Desktop).
    - **Facilitate Informed Selection:** Enable users to choose the best client based on their primary workflow (coding vs. chat vs. agent tasks), preferred environment (standalone app vs. IDE integration), technical needs (Local vs. Remote server support, specific MCP feature requirements), and ecosystem preferences (Open Source vs. Proprietary, LLM choice).
- **Layout & Structure:** **Standard Multi-Column Tabular Layout** (as defined previously).
    - **Header:** Title: `Comparing MCP Clients: Cursor, Windsurf, Cline, Claude Desktop`. Actions: `Add/Remove Clients`, `Clear All`, `Share Comparison`.
    - **Comparison Table:** Sticky first column for Attributes. Four columns for the selected clients. Sticky column headers with Logo, Name, Author, Primary CTA.
- **Key Comparison Attributes (Rows - Filled for these specific clients):**

*(Note: Some data points like specific ratings, usage stats, or exact pricing models are simulated or estimated based on typical patterns and available descriptions. Ease of Setup and Docs Quality are qualitative estimates. Last Updated is simulated.)*

| **Section**                   | **Attribute Row Name**             | **Cursor**                                        | **Windsurf (by Codeium)**                      | **Cline (by cline/cline)**                           | **Claude Desktop App (by Anthropic)**                | **Tooltip / Explanation (`ℹ️`)**                                                                                                           |
| ----------------------------- | ---------------------------------- | ------------------------------------------------- | ---------------------------------------------- | ---------------------------------------------------- | ---------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| **Core Identity**             | Author/Company                     | `Cursor (Anysphere, Inc.)`                        | `Codeium ✓`                                    | `@cline (Community/OSS) ✓`                           | `Anthropic ✓`                                        | Developer/Maintainer. Verified status (`✓`) shown if applicable via MCP Omni process.                                                      |
|                               | **Primary Client Type / Paradigm** | `[IDE Icon] AI-Native Code Editor`                | `[IDE Icon] Agentic IDE`                       | `[Code Icon] IDE Extension / Agent`                  | `[App Icon] Desktop Chat App`                        | **Crucial:** What *kind* of application is it? Influences core features and UX.                                                            |
|                               | Core Focus / Niche                 | Deep AI integration for faster coding             | "AI Flow" paradigm, agentic dev workflows      | Autonomous coding agent (VS Code), permissions       | General chat interface, deep MCP context integration | What specific problem or workflow is it primarily designed for?                                                                            |
| **Platform & Access**         | **Supported Platforms**            | `[Mac][Win][Linux]` (Typical IDE)                 | `[Mac][Win][Linux]` (Assumed IDE)              | `[VS Code Icon] VS Code` (Implies Desktop OS)        | `[Mac][Win][Linux]` (Explicit or Implied Download)   | Where can you run this client?                                                                                                             |
|                               | Installation Method                | `Downloadable App`                                | `Downloadable App`                             | `IDE Marketplace / GitHub`                           | `Downloadable App`                                   | How users acquire and install the client.                                                                                                  |
|                               | Pricing Model                      | `Freemium / Paid Subscription` (Typical)          | `Freemium / Paid Subscription` (Likely)        | `Open Source`                                        | `Tied to Claude Account (Free/Paid Tiers)`           | Cost structure.                                                                                                                            |
|                               | License                            | `[License Icon] Proprietary`                      | `[License Icon] Proprietary`                   | `[License Icon] Permissive OSS` (Assumed MIT/Apache) | `[License Icon] Proprietary`                         | Governs usage, modification, and redistribution rights.                                                                                    |
| **Core Functionality**        | Key Non-MCP Features               | Advanced Code Editing, AI Chat/Refactor, Debugger | "AI Flow" system, Code Gen/Analysis, Multi-LLM | File Editing, Command Execution, Browser Control     | Advanced Chat Features, File Upload/Analysis         | Checklist comparison of relevant features *besides* MCP (✅=Yes, ❌=No, ❔=Unknown): Multi-LLM(✅/?/✅/❌), Local LLM(❔/❔/✅/❔), Plugins(❔/❔/✅/❌) |
| **MCP Integration**           | **MCP Feature Matrix:**            |                                                   |                                                |                                                      |                                                      | Which parts of the MCP specification does this client support? Essential for compatibility.                                                |
|                               |    *Tools*                         | `✅ Yes`                                           | `✅ Yes`                                        | `✅ Yes`                                              | `✅ Yes`                                              | Support for standard MCP tool calls.                                                                                                       |
|                               |    *Prompts*                       | `❌ No`                                            | `❌ No`                                         | `❌ No`                                               | `✅ Yes`                                              | Support for server-provided prompt templates (e.g., as slash commands).                                                                    |
|                               |    *Resources*                     | `❌ No`                                            | `❌ No`                                         | `✅ Yes`                                              | `✅ Yes`                                              | Support for clients accessing server-provided resources (e.g., attaching files from server).                                               |
|                               |    *Sampling*                      | `❌ No`                                            | `❌ No`                                         | `❌ No`                                               | `❌ No`                                               | Support for advanced LLM sampling parameter requests via MCP.                                                                              |
|                               |    *Roots*                         | `❌ No`                                            | `❌ No`                                         | `❌ No`                                               | `❌ No`                                               | Support for server-provided root context information.                                                                                      |
|                               | **Calculated MCP Compat. Score**   | `[MCP Icon] Low (~20%)`                           | `[MCP Icon] Low (~20%)`                        | `[MCP Icon] Medium (~40%)`                           | `[MCP Icon] High (~60%)`                             | Quick glance score based on core feature support (Tools, Prompts, Resources). *Estimate based on matrix.*                                  |
|                               | **Server Type Support:**           |                                                   |                                                |                                                      |                                                      | Can this client connect to different types of servers? **Key Differentiator.**                                                             |
|                               |    *Remote (SSE/HTTP)*             | `✅ Yes` (Explicitly SSE)                          | `✅ Yes` (Assumed for IDE)                      | `✅ Yes` (Assumed flexibility)                        | `✅ Yes` (Explicitly Mentioned)                       | Ability to connect to servers over the network.                                                                                            |
|                               |    *Local (STDIO)*                 | `✅ Yes` (Explicitly STDIO)                        | `❓ Unknown` (Assume No unless confirmed)       | `✅ Yes` (Assumed flexibility for dev tool)           | `✅ Yes` (Explicitly Mentioned)                       | Ability to run and connect to local command-line servers.                                                                                  |
|                               | Server Connection Method           | `UI Config / File` (Likely)                       | `UI Config` (Likely)                           | `UI Config (VS Code) / File` (Likely)                | `UI Configuration`                                   | *How* does the user add/configure servers?                                                                                                 |
|                               | Tool Invocation UX                 | `Editor Actions / Chat / Composer`                | `"AI Flow" System`                             | `Agent Logic (w/ Permission)`                        | `Chat Commands / Contextual`                         | *How* are tools actually triggered by the user or system?                                                                                  |
|                               | Multi-Server Support               | `❓ Unknown` (Assume Basic Switchable)             | `❓ Unknown`                                    | `✅ Yes` (Implied via config folder)                  | `✅ Yes` (Likely, common for chat apps)               | Can the client connect to/use tools from multiple servers concurrently or easily switch between them?                                      |
| **LLM Support**               | LLM Integration Method             | `Built-in / Direct Keys` (Likely)                 | `Built-in / Direct Keys` (Likely)              | `Configurable Backend (Direct Keys/Local)`           | `Anthropic Backend (Uses Claude Account)`            | How the client connects to LLMs. Affects cost, flexibility, privacy.                                                                       |
|                               | Supported Providers (Examples)     | `[OpenAI][Claude]` (Likely primary)               | `Multi-model Support`                          | `[OpenAI][Claude][Ollama]...` (Flexible)             | `[Claude Logo] Anthropic Claude`                     | Which specific LLM providers are known to be compatible?                                                                                   |
| **Usability & Community**     | User Rating (MCP Omni)             | `⭐ 4.6 (Simulated)`                               | `⭐ 4.4 (Simulated)`                            | `⭐ 4.7 (Simulated - OSS often rated high)`           | `⭐ 4.8 (Simulated - Official usually good)`          | Aggregated community feedback score from MCP Omni reviews. *Simulated data.*                                                               |
|                               | Ease of Setup (Estimate)           | `Moderate` (IDE Setup)                            | `Moderate` (IDE Setup)                         | `Moderate` (IDE Ext + Agent Config)                  | `Easy` (Standalone App)                              | Subjective estimate of effort needed for initial install and connecting first server.                                                      |
|                               | Documentation Quality (Estimate)   | `Good` (Likely from vendor)                       | `Good` (Likely from vendor)                    | `Variable` (OSS - depends on community)              | `Excellent` (Likely from Anthropic)                  | Subjective estimate of the client's *own official documentation*.                                                                          |
|                               | Community Support Link             | `[Link Icon] Official Forum/Support`              | `[Link Icon] Official Forum/Support`           | `[GitHub Icon] GitHub Issues/Discussions`            | `[Link Icon] Official Support/Community`             | Primary channel for user support and community interaction.                                                                                |
|                               | Last Updated (Client App)          | `[Calendar Icon] 1 wk ago` (Simulated)            | `[Calendar Icon] 3 wks ago` (Simulated)        | `[Calendar Icon] 5 days ago` (Simulated)             | `[Calendar Icon] 2 wks ago` (Simulated)              | How recently the client *application itself* was updated. *Simulated data.*                                                                |
| **Ecosystem & Extensibility** | Open Source?                       | `❌ No`                                            | `❌ No`                                         | `✅ Yes`                                              | `❌ No`                                               | Is the client's source code publicly available?                                                                                            |
|                               | Extensibility / Plugin System      | `❓ Unknown`                                       | `❓ Unknown` (Beyond MCP)                       | `✅ Yes` (Agent Framework nature)                     | `❌ No` (Likely closed system)                        | Can developers build custom integrations *into* this client itself?                                                                        |
|                               | **Unique Selling Proposition**     | Deep AI Code Gen/Refactor within Editor           | Novel "AI Flow" Paradigm for Dev Workflows     | Open Source Autonomous Agent in VS Code              | Official Claude App w/ Strong Core MCP Support       | **Summary:** What makes this client stand out *in this specific comparison set*?                                                           |

- **Key UI Components & Elements:**
    - **Comparison Table:** With sticky headers/columns as previously defined.
    - **Visual Diff Highlighting:** Automatically apply subtle background highlights to cells where values differ significantly across columns (e.g., Platform Support icons, MCP Matrix checkmarks, License type).
    - **Badges & Icons:** Consistent use for Client Type, Platforms, MCP Features (✅/❌/⚠️), License, Pricing.
    - **Tooltips (`ℹ️`):** Provide detailed explanations for every attribute row, crucial for understanding nuances like the MCP Matrix features or LLM integration methods.
    - **Links:** Ensure all relevant items (Client Names, Author Names, Licenses, Community Links, Source Repos) are clickable, navigating appropriately.
    - **Add/Remove/Share Controls:** As defined previously.
- **Interaction & User Flows:**
    1. User selects Cursor, Windsurf, Cline, Claude Desktop on `/registry?type=client`.
    2. User clicks "Compare".
    3. User lands on `/registry/compare?type=client&ids=...` page.
    4. User immediately scans the `Primary Client Type / Paradigm` row to understand the fundamental differences.
    5. User checks `Platform Support` for OS compatibility.
    6. User examines the `MCP Feature Support Matrix` and `Server Type Support` rows carefully to determine technical compatibility with their needed MCP servers/features. Notes Claude Desktop has best core MCP support, Cline supports Resources, all support Tools. Notes Cursor/Claude explicitly support Local, Cline likely does, Windsurf unknown.
    7. User compares `LLM Integration Method` based on whether they want to use specific models (Claude) or need broader flexibility (Cline/Cursor/Windsurf).
    8. User checks `License` and `Pricing Model`. Notes Cline is OSS.
    9. User reads the `Unique Selling Proposition` row to solidify understanding of core strengths.
    10. User removes Windsurf (due to unknown Local support) by clicking 'X' on its column.
    11. User focuses comparison on remaining three. Clicks `Claude Desktop App` name to view its full detail page and setup guides.
- **Considerations & Notes:**
    - **Data Accuracy:** This comparison relies heavily on accurately reflecting the MCP Feature Matrix support and other technical details. Sourcing this requires careful checking of official documentation, potentially community input, and clear indication of the data source/verification level for each data point. The provided Anthropic list is a great starting point but needs ongoing verification.
    - **Subjectivity:** Ratings, Ease of Setup, Docs Quality are estimates here. In the real platform, these would ideally be based on aggregated user reviews or structured platform assessments.
    - **Dynamic Updates:** Client features change rapidly. The platform needs a mechanism (manual curation, author updates, community reporting) to keep this comparison data reasonably up-to-date. Clearly displaying the "Data Last Verified" date might be useful.

**(M) Unified Component Comparison Page (`/compare?type=tool_implementation&tool=send_email&ids=serverA:send_email,serverB:send_email,...`)** *(Focusing on Tool Implementation Comparison)*

- **Page Name/Type:** MCP Tool Implementation Comparison
- **Trigger & Context:**
    - User is on the Tool Detail Page for a canonical tool like `send_email` (targeting Gmail).
    - The right sidebar lists multiple Servers/Skills implementing this tool.
    - User selects 2-4 specific implementations using checkboxes next to each implementing server in the sidebar list.
    - The persistent "Compare Tray/Button" updates (e.g., `Compare (3 Implementations of send_email)`).
    - Clicking "Compare" navigates to `/compare?type=tool_implementation&tool=send_email&ids=serverA:send_email,serverB:send_email,...` (or similar URL structure).
- **Purpose & Goals:**
    - **Implementation Choice Guidance:** Provide a detailed side-by-side comparison of different MCP Servers/Skills that implement the *same conceptual tool*, enabling users to choose the *best implementation* for their specific needs based on the implementing server's context, schema details, trust signals, and performance indicators.
    - **Highlight Implementation Nuances:** Expose subtle but potentially critical differences between implementations, such as required parameters, optional features (e.g., attachment support, scheduling), output variations, authentication methods, and the underlying server's type and reliability.
    - **Contextualize Tool within Server:** Emphasize that a tool doesn't exist in isolation; its usability depends heavily on the attributes of the Server/Skill providing it (Is it Remote/Local/Hosted? Is it secure? Is it well-maintained? What other tools does it offer?).
    - **Simplify Schema Comparison:** Provide tools or visualizations to easily compare the input parameter requirements and output structures across different implementations, identifying mandatory fields vs. optional extensions.
    - **Actionable Comparison:** Allow users to quickly jump from the comparison view to testing a specific implementation in the Playground or viewing the full detail page of the implementing Server/Skill.
- **Layout & Structure:** **Adaptive Multi-Column Tabular Layout** (Consistent with other comparisons).
    - **Header Area:** Title: `Comparing Implementations of '[Tool Name]'` (e.g., `Comparing Implementations of 'send_email' for Gmail`). Actions: `Add/Remove Implementations` (opens search modal focused on other implementations *of this specific tool*), `Clear All`, `Share Comparison`. Link back to the Canonical Tool Detail Page.
    - **Comparison Table Area:**
        - **Columns:** One for each selected implementation (representing a specific `Server/Skill : Tool` pair).
        - **First Column (Sticky):** Lists Comparison Attributes, grouped logically (Implementation Context, Tool Parameters, Tool Output, Trust & Performance).
        - **Implementation Column Headers (Sticky):** Display **Implementing Server/Skill Logo & Name** (linked), Author, **Server Type & Hosting Badges**. Primary CTA: `[Playground Icon] Test This Implementation`. Remove (`X`) icon.
        - **Data Cells:** Display attribute values, using visual diff highlighting and specialized components for schema comparison.
- **Key Features & Functionality / Comparison Attributes (Rows - Detailed & Creative for Tool Implementations):**

    (Rows focus on comparing the *implementations* and their *, referencing the parent Server/Skill data)*

| **Section**                | **Attribute Row Name**                | **Applicable To** | **Data Display & Enhancement Ideas**                                                                                                                                                                                                                                           | **Tooltip/Info (`ℹ️`)**                                                                                                                                                                            |
| -------------------------- | ------------------------------------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Implementation Context** | **Implementing Server/Skill**         | Tool Impl.        | Logo + `[Server Name](link)` + `vX.Y`. Already in header, but reinforce here.                                                                                                                                                                                                  | The specific MCP Server or platform-hosted Skill providing this version of the tool.                                                                                                               |
|                            | Author/Namespace                      | Tool Impl.        | `[@author ✓](link)` + Verification Badge. Compare authors.                                                                                                                                                                                                                     | Who created this implementation? Is their ownership verified?                                                                                                                                      |
|                            | **Server Type & Hosting**             | Tool Impl.        | **Crucial.** Display both badges: `[API Icon] Remote` / `[Terminal Icon] Local` **AND** `[Omni Logo Icon] Hosted` / `[External Link Icon] External`. **Visually highlight differences.**                                                                                       | How must this implementation be accessed (Network vs Local Process)? Is it managed by the platform or self-hosted?                                                                                 |
|                            | Source / Verification                 | Tool Impl.        | `[Badge: Official/Verified/Community]`. Compare source trustworthiness.                                                                                                                                                                                                        | Validation level of the implementing server.                                                                                                                                                       |
| **Tool Schema: Input**     | **Required Parameters**               | Tool Impl.        | List parameter names marked as `required: true` in *this* implementation's schema. **Use visual diff:** Highlight params required here but optional in others, or vice-versa. Link param name to full definition below.                                                        | Which inputs are *absolutely necessary* to call this specific implementation? Differences highlight variations in minimum requirements.                                                            |
|                            | **Optional Parameters**               | Tool Impl.        | List parameter names marked as `required: false` or not present in the 'Required' list for this implementation. **Visual diff:** Highlight unique optional params offered here (e.g., `+ attachments`, `+ schedule_send`). Link to definition.                                 | What extra features or configurations does this implementation support? Unique optional params often represent enhanced functionality.                                                             |
|                            | **Parameter Details (Expandable)**    | Tool Impl.        | **Initially collapsed.** On expand: Show **side-by-side tables** detailing *all* input parameters for each implementation. Columns: `Name`, `Type`, `Req?`, `Description Snippet`. **Visually highlight differences** in Type, Requirement, or presence/absence of parameters. | Detailed view allowing direct comparison of parameter names, expected data types, required status, and descriptions across implementations. Essential for identifying subtle compatibility issues. |
|                            | **Input Schema Compatibility Score**  | Tool Impl.        | `[Schema Icon] 95% Match (Canonical)`. Score + Mini bar chart. Based on how closely the input parameters match the canonical Tool Definition (name, type, requirement).                                                                                                        | How standard is this implementation's input structure compared to the typical definition for this tool? Higher scores suggest easier interchangeability.                                           |
| **Tool Schema: Output**    | **Success Output Structure**          | Tool Impl.        | Brief text summary (e.g., "Returns {id, status}"). **Visual Diff:** Use background color/icons to indicate major structural differences (e.g., "Returns additional user info", "Standard output"). Link to expandable details.                                                 | Quick indicator of the expected successful result structure. Highlights implementations providing richer or non-standard output.                                                                   |
|                            | **Output Details (Expandable)**       | Tool Impl.        | **Initially collapsed.** On expand: Show side-by-side JSON schema snippets or key field lists for the *success response* of each implementation. **Visually highlight differing fields or structures.**                                                                        | Detailed comparison of the data returned on success. Crucial for developers needing specific output fields.                                                                                        |
|                            | **Known Error Codes**                 | Tool Impl.        | List key specific `errorCode` values documented or observed for *this implementation* (e.g., `AUTH_FAILED`, `RATE_LIMITED`, `INVALID_RECIPIENT`). Compare lists.                                                                                                               | Helps anticipate and handle specific failure modes for each implementation.                                                                                                                        |
| **Trust & Performance**    | **Implementing Server Quality Score** | Tool Impl.        | `[Gauge Icon] B+ (88%)`. Score/Grade + Bar chart. (Pulls from parent Server score).                                                                                                                                                                                            | Overall quality score of the Server providing this tool. Reflects maintainability, documentation, etc.                                                                                             |
|                            | **Implementing Server Security Scan** | Tool Impl.        | `[Shield Icon] Passed`. Status + Link to parent server's Security tab.                                                                                                                                                                                                         | Security posture of the parent Server. Crucial for trust.                                                                                                                                          |
|                            | **Implementing Server License**       | Tool Impl.        | `[License Icon] MIT`. Link + Color-coded background.                                                                                                                                                                                                                           | License governing the *server* providing the tool. Affects overall usage rights.                                                                                                                   |
|                            | **Avg. Tool Latency (Platform)**      | Tool Impl.        | `[Timer Icon] ~150ms`. Display average execution time *for this specific tool* based on Playground/Hosted Server data (if available). Bar chart comparison. Mark as "N/A" if insufficient data.                                                                                | **Creative Enhancement:** Real performance data (where available) for this specific tool implementation. Highly valuable for choosing performant options. Needs platform data collection.          |
|                            | **Avg. Tool Success Rate (Platform)** | Tool Impl.        | `[Check Icon] 99.8%`. Display success rate *for this specific tool* based on platform data (if available). Bar chart comparison. Mark as "N/A".                                                                                                                                | **Creative Enhancement:** Reliability indicator based on actual platform usage (Playground/Hosted).                                                                                                |
| **Ecosystem & Usage**      | **Implementing Server Usage**         | Tool Impl.        | `↓ 1.7M calls/wk`. Usage metric for the *parent server*. Bar chart comparison.                                                                                                                                                                                                 | Popularity of the overall server providing this tool.                                                                                                                                              |
|                            | **Implementing Server Rating**        | Tool Impl.        | `⭐ 4.7 (15 reviews)`. Rating + Count for the *parent server*. Bar chart comparison.                                                                                                                                                                                            | Community sentiment for the overall server.                                                                                                                                                        |
|                            | **Featured Use Cases Count**          | Tool Impl.        | `[Case Icon] 3 Use Cases`. Number, linked to filtered Use Case list showing tutorials using *this specific tool implementation* (if possible, otherwise uses parent server).                                                                                                   | Number of practical examples demonstrating this implementation or its parent server.                                                                                                               |
|                            | **Known Compatible Clients**          | Tool Impl.        | Row of small Client Logos known to work well with the *parent server*. Compare compatibility signals.                                                                                                                                                                          | Helps users find clients already vetted for use with the server providing this tool.                                                                                                               |

- **Key UI Components & Elements:**
    - **Comparison Table:** With sticky headers/columns, optimized for potentially complex data cells.
    - **Expandable Sections:** For detailed Parameter/Output comparisons without cluttering the initial view.
    - **Visual Diff Highlighting:** Crucial for drawing attention to variations in required parameters, optional parameters, output structures, and other key attributes.
    - **Mini Bar Charts:** For quick quantitative comparisons (Counts, Scores, Latency, Success Rate).
    - **Badges & Icons:** Consistent visual language for Type, Hosting, Scores, Status, etc.
    - **Tooltips (`ℹ️`):** Essential for explaining every attribute, especially nuanced ones like Schema Compatibility Score or performance metrics.
    - **Links:** Deep links to Canonical Tool Page, Implementing Server/Skill Detail Pages (and specific tabs), Playground, Use Cases, Licenses.
    - **Add/Remove Implementations Modal:** Focused search showing only other implementations of the *same canonical tool*.
    - **Share Functionality:** Generates URL specific to this tool implementation comparison.
- **Interaction & User Flows:**
    1. User is on a Canonical Tool Detail Page (e.g., for `send_email`) -> Examines Implementations list -> Selects 2-3 implementations via checkboxes -> Clicks "Compare Selected Implementations".
    2. User lands on `/registry/compare?type=tool_implementation&tool=...&ids=...`.
    3. User scans high-level differentiators: Implementing Server Type & Hosting, Quality/Security Scores, Rating.
    4. User expands "Input Parameters" section -> Uses visual diff highlighting to see which implementation requires `cc_address` while others don't, or which supports `attachments`.
    5. User expands "Output Details" -> Compares the structure of the success response JSON provided by each implementation.
    6. User checks "Avg. Tool Latency" and "Success Rate" (if available) to assess real-world performance.
    7. User identifies the implementation best matching their needs (e.g., needs attachments, prefers Omni-Hosted, has highest success rate) -> Clicks the Implementing Server/Skill name in the header to view its full details OR clicks "Test This Implementation" to try it in the Playground.
    8. (Optional) User clicks "Add/Remove" -> Finds another implementation -> Updates comparison.
- **Creative Enhancements & Considerations:**
    - **Parameter Mapping Aid:** If comparing implementations with different *names* for semantically *similar* parameters (e.g., `recipient` vs. `to_address`), could the tool suggest potential mappings or highlight semantic similarities? (Requires advanced NLP/mapping).
    - **"Standard Compliance" Score:** Beyond schema matching, could we score implementations based on adherence to other best practices for this *type* of tool (e.g., idempotent design for creation tools, proper error code usage)?
    - **Cost Comparison (If Applicable):** If different implementations have different per-call costs when run via Omni Hosting or a potential future Unified API, display estimated cost per execution side-by-side.
    - **Visual Schema Diff:** Instead of just highlighting text differences in expandable sections, potentially render simplified visual representations of the input/output schemas side-by-side and highlight structural differences graphically.
    - **Data Source Transparency:** Clearly indicate the source for performance metrics (Playground? Hosted instances? Estimated?) and update frequency. Acknowledge limitations if data is sparse.



# About Us + Privacy + Contact Us + Legal + ToS 

**MCP Omni - Comprehensive Specification**

**Document Section: IV. Informational & Legal Pages**

**(A) About Us Page (`/about`)**

- **Page Name/Type:** Informational - About MCP Omni & Team
- **Purpose & Audience:** Establish trust and transparency by introducing the organization/team, mission, vision, and values. Explain the platform's purpose (integrated MCP lifecycle hub) and differentiate it. Target audience includes potential users, developers, security officers, partners, and contributors seeking to understand the platform's origins, commitment, and the people behind it.
- **Layout & Structure:** Clean, professional, narrative-driven layout aligned with platform branding (respecting Light/Dark themes). Use headings, whitespace, quality imagery, and potentially alternating column structures for readability. Structure includes: Header, Mission/Vision, Story (Optional), Values (Optional), Team Showcase, Join Us/Contribute section, and a link to Contact.
- **Key Content & Structure:**
    - **1. Header:** `<h1>` (e.g., "About MCP Omni"), compelling introductory statement, optional hero image/graphic.
    - **2. Mission & Vision:** Clear, concise statements defining the platform's current purpose and long-term goals for the MCP ecosystem. Visually distinct presentation.
    - **3. The MCP Omni Story (Optional):** Brief narrative (3-5 paragraphs) covering origin, motivation, key milestones, and future direction.
    - **4. Our Values / Guiding Principles (Optional):** 3-5 core values (e.g., Open Ecosystem, Security & Trust, Developer Experience, Community Collaboration, Innovation) with brief explanations specific to MCP Omni. Use icons or distinct layout.
    - **5. Meet the Team / Contributors:** Introduction, responsive grid of "Team Member Cards" (Photo/Avatar, Name, Title/Role, Brief relevant bio, Optional professional links). Group by function if needed.
    - **6. Join Us / Get Involved:** Links encouraging contribution (Submit page), community engagement (Discord/Forum), careers (`/careers`), and partnerships (`/contact`). Use text links or CTAs.
    - **7. Contact Link:** Clear link/button to the main `/contact` page.
- **Considerations:** Maintain authenticity. Keep team information current. Reinforce trust, especially regarding security and ecosystem commitment due to the hosting role.

**(B) Contact Us Page (`/contact`)**

- **Page Name/Type:** Contact & Support Gateway
- **Purpose & Audience:** Provide a centralized, efficient way for users (free, paid, enterprise, researchers, press, partners) to get help or information. Route inquiries effectively, promote self-service (Docs, FAQ, Community) first, set response time expectations, and offer multiple appropriate contact methods.
- **Layout & Structure:** Clean, task-oriented layout prioritizing clarity. Potentially 2-column (Guided Contact/Form vs. Self-Service/Direct Links). Consistent platform theme.
- **Key Content & Structure:**
    - **1. Header:** `<h1>` (e.g., "Contact Us"), introductory text encouraging self-service first with links to Docs/Community.
    - **2. Self-Service Resources:** Prominent section with icons/links to Docs, FAQ, Community Forum/Discord, Platform Status page.
    - **3. Guided Contact / Primary Form:**
        - **Heading:** (e.g., "Contact Our Team").
        - **Inquiry Type Dropdown (CRITICAL):** Routes inquiry (General, Tech Support [Tiered], Sales, Partnership, Security, Press, Other). *Dynamically adjusts form/guidance based on selection.*
        - **Standard Fields:** Name (`*`), Email (`*`), Subject (auto-populated/editable), Message (`*`).
        - **Conditional Fields:** Org Name, Plan Level, Affected URL, File Upload (optional, secure handling required).
        - **Anti-Spam:** reCAPTCHA or similar.
        - **Submit Button:** Shows loading/success/error states. Clear confirmation message with expected response time.
    - **4. Alternative Contact Methods (Optional/Specific):** Clearly list direct emails or links *if* the form isn't sufficient for certain types (group by purpose):
        - `Sales:` Email, "Book a Demo" link.
        - `Security:` Dedicated `security@...` email (mandatory), link to `/security` policy. **Emphasize using this channel for vulnerabilities.**
        - `Press:` Dedicated `press@...` email.
        - *(Avoid generic support email if routing via form/community is preferred).*
    - **5. Physical Address / Map (Optional):** If relevant for company presence.
- **Considerations:** Ensure backend routing works correctly based on inquiry type. Manage response time expectations clearly. Provide a secure, dedicated channel for vulnerability reporting. Make self-service prominent.

**(C) Legal Pages (General Requirements - Link from Footer)**

- **Common Requirements:** All legal pages must prioritize **Clarity, Readability, and Accessibility**. Use clear headings and structured formatting. Include a **Version Number & Last Updated Date**, potentially linking to a history. Maintain **Consistency** in definitions across documents. **Mandatory Legal Review** is required before publishing.

**(C.1) Terms of Service Page (`/terms`)**

- **Purpose:** Legally binding contract governing platform use (Registry, Hosting, Playground, API, Content). Protects platform and users.
- **Key Content Sections (MCP Omni Specifics Emphasized):**
    - Introduction (Parties, Acceptance, **Definitions** specific to MCP Omni: `Platform`, `Hosted Server`, `Skillset`, `Registry`, etc.).
    - Account Registration & Use.
    - Platform Services & License Grant (Registry aggregation, **Server Hosting**, Playground, API).
    - Acceptable Use Policy (**Specifics:** No malicious Servers, no sandbox breach attempts, respect resource limits, no Registry abuse).
    - User Content & **Hosted Server Submissions** (User retains IP; **License Grant to Omni** for hosting, running, scanning, indexing, displaying; User Warranties re: code/APIs used; **Security Scanning Acknowledgment**; Platform Moderation Rights).
    - Intellectual Property (Platform IP vs User IP; DMCA).
    - **Fees, Payment, Subscriptions** (Reference `/pricing`; Detail billing for hosted resources/API usage; Payment terms, Cancellation, Refunds).
    - Confidentiality (Obligations regarding private hosted Servers/data).
    - Data Processing Addendum (DPA) Reference (If applicable).
    - **Disclaimers** (Standard "as-is"; **Specifics:** Third-party registry data accuracy, hosted Server performance/uptime unless SLA exists).
    - **Limitation of Liability** (Standard cap, scoped for hosting/registry risks).
    - **Indemnification** (User indemnifies Omni for their hosted Server issues).
    - Termination (Procedures, **Data/Hosted Server deletion**).
    - Changes to Terms.
    - Governing Law & Dispute Resolution.
    - Contact Information (Legal).
- **Layout:** Structured legal text, clear headings (H1-H3), numbered sections, Table of Contents recommended, Version/Date stamp.

**(C.2) Privacy Policy Page (`/privacy`)**

- **Purpose:** Inform users about data handling practices (Registry, Hosting, Playground, API, Account Management). Ensure compliance (GDPR, CCPA etc.). Build trust.
- **Key Content Sections (MCP Omni Specifics Emphasized):**
    - Introduction (Controller, Scope, Link to ToS).
    - **Information We Collect:**
        - *User Provided:* Account info, Payment info (via processor), Submitted content (Server URLs/Code, Use Cases, Reviews), **Code & Config for Hosted Servers**, **Credentials in Credentials Manager/Skillsets**.
        - *Automatically Collected:* Logs, Usage analytics (UI, Playground, API calls), Cookies, **Monitoring Data from Hosted Servers** (resource use, logs - *distinguish from user data processed BY server*).
        - *From Third Parties:* OAuth, Payment confirmation, **Aggregated registry sources** (public metadata).
    - **How We Use Information:** Provide Service (incl. **hosting/running/securing Servers**), Improve Service, Communicate, Billing, **Security & Fraud Prevention (incl. scanning submitted/hosted code)**, Compliance. **Explicitly state purpose for Hosted Server execution/monitoring data.**
    - **How We Share Information:** Consent, Service Providers (Cloud, Payment, etc.), Legal Needs. **Crucially: Policy on accessing user Hosted Server code/data/credentials** (Confidential, limited access for security/operations/support w/ consent). Clarify **Public Data** (public registry submissions).
    - **Data Security:** Detail measures (Encryption, Access Controls, Scanning). User responsibility for credentials.
    - Data Retention (Specify periods for account data, **hosted server data/logs**, registry metadata).
    - International Transfers.
    - User Rights (GDPR/CCPA) & How to Exercise.
    - Cookie Policy (Detail specific cookies, purpose, management).
    - Children's Privacy.
    - Changes to Policy.
    - Contact Information (Privacy-specific, e.g., `privacy@mcponmi.ai`).
- **Layout:** Structured legal text, clear headings, lists, easy navigation, Version/Date stamp.



# Blog + View + Profile

**MCP Omni - Comprehensive Specification**

**Document Section: VII. Content & Community Hub**

**(A) Posts / Blog Listing Page (`/posts`)**

- **Page Name/Type:** Blog / Articles / Ecosystem News Hub
- **Purpose & Goals:**
    - **Centralized Content Feed:** Serve as the primary destination for users seeking news, technical insights, tutorials (in article format), community highlights, platform updates, and thought leadership related to MCP Omni and the broader MCP ecosystem.
    - **Facilitate Content Discovery:** Enable users to easily find relevant articles through effective search, intuitive categorization, tag filtering, and sorting options (recency, popularity).
    - **Showcase Platform Value & Activity:** Regularly feature articles highlighting new platform capabilities (hosting enhancements, security features), successful use cases (linking to `/use-cases`), notable community-submitted Servers/Clients, and evolution of the MCP standard itself.
    - **Drive Engagement & Community Building:** Encourage readership through compelling previews (cards), facilitate discussion via comments (on detail pages), promote sharing, and capture leads/build audience via newsletter integration.
    - **Establish Thought Leadership:** Position MCP Omni as a knowledgeable and central voice within the MCP community through high-quality, insightful content.
- **Target Audience & Scenarios:**
    - *Platform User:* "What's the latest MCP Omni platform update?" -> Filters by `Category: Platform Updates`.
    - *Developer Seeking Techniques:* "Are there articles on best practices for securing MCP Servers hosted on Omni?" -> Searches "secure hosting best practices", filters by `Category: Technical Deep Dives`.
    - *Community Member:* "Any interesting new community projects featured this week?" -> Filters by `Category: Community Spotlight`, sorts by `Recency`.
    - *Anyone Staying Current:* Browses the main feed sorted by `Newest First`, reads titles and excerpts. Signs up for the newsletter.
- **Layout & Structure:** **Flexible 2 or 3-Column Layout**, providing space for both content browsing and discovery tools.
    - **Main Content Area (Center/Left):** Displays the primary list or grid of post preview cards. Includes pagination or infinite scroll.
    - **Sidebar (Right or Left):** Contains essential discovery tools: Search bar (scoped to posts), Category list, Tag cloud/list, Newsletter signup, links to Featured/Popular posts, potentially Author list/filter.
- **Key Features & Functionality (Detailed):**
    - **Dynamic Post Display:**
        - **Default Sort:** Chronological, newest first.
        - **View Modes:** Toggle between `Grid View` (emphasizes featured images, visually engaging) and `List View` (more compact, focuses on text, better for scanning titles/excerpts). User preference remembered (if logged in).
    - **Featured Posts Section (Optional):** At the top, a distinct area (e.g., full-width banner slider, dedicated row of larger cards) showcasing 1-3 manually selected, high-priority posts.
    - **Post-Specific Search (Sidebar):** Search bar clearly labeled "Search Posts". Searches titles, excerpts, full content, tags, categories, authors. Live results dropdown or updates main feed.
    - **Content Filtering (Sidebar):**
        - **`Categories`:** Clickable list of defined categories (`Platform Updates`, `Ecosystem News`, `Technical Deep Dives`, `Tutorials & Guides`, `Use Case Spotlights`, `Community Spotlight`, `Interviews`, `Security Notes`, `Getting Started`). Show post count per category. Allow selecting one category to filter.
        - **`Tags`:** Searchable tag input with suggestions OR a clickable Tag Cloud displaying popular/relevant tags (#Hosting, #Wasm, #Security, #AgentFrameworks, #Use-Case-Finance, etc.). Allows filtering by one or multiple tags.
        - **`Authors`:** (Optional) Filter by author (MCP Omni Team, specific verified community authors).
    - **Sorting Controls:** Dropdown (near results count or in sidebar) to sort by `Newest First`, `Oldest First`, `Most Popular` (Views/Comments), `Most Commented`.
    - **Newsletter Signup Block (Sidebar):** Visually appealing block with brief description, email input field, and "Subscribe" button. Integrated with marketing automation backend.
    - **Post Card Component (Adaptable for Grid/List):**
        - **`Featured Image / Illustration`:** High-quality, required for visual appeal. Consistent style. Alt text mandatory.
        - **`Category Badge(s)`:** Clearly display primary category(ies).
        - **`Title:`** Compelling, SEO-friendly, clickable link (H2 or H3).
        - **`Author & Date:`** `by [Author Name](link)` / `MCP Omni Team`, `Published [Date]`.
        - **`Excerpt:`** ~2-3 lines providing context and encouraging click-through. Highlight search terms if applicable.
        - **`Read Time:`** `☕️ X min read`.
        - **`Stats (Subtle):`** `👁️ Views`, `💬 Comments`.
        - **`Key Tags:`** Display 2-3 relevant tags as small pills.
        - **`Continue Reading` Link/Button.**
    - **Pagination / Infinite Scroll:** Implement robust pagination for large numbers of posts. Infinite scroll is an alternative but requires careful implementation regarding performance and URL state.
    - **RSS Feed:** Clearly accessible link (e.g., in footer or sidebar) for users who prefer RSS readers. Auto-discovery link tag in page head.
- **Content Strategy:**
    - Align content themes with MCP Omni's focus: Hosting best practices, security considerations for MCP, tutorials leveraging hosted Servers, deep dives into specific tools/servers from the registry, community project spotlights, platform feature announcements, MCP standard news/analysis.
    - Maintain a consistent publishing schedule.
    - Develop clear guidelines for community contributions if accepted.
    - Actively interlink posts with relevant Registry pages (Servers, Clients, Tools), Use Cases, and Documentation.
- **Technical Considerations:**
    - CMS backend required for creating, managing, categorizing, and tagging posts.
    - Efficient database queries for filtering/sorting by categories, tags, authors, dates, popularity metrics.
    - Image handling and optimization.
    - RSS feed generation.
    - Integration with analytics platform for tracking views/popularity.

**(B) Post Detail Page (`/posts/[post-slug]`)**

- **Page Name/Type:** Single Blog Post / Article View
- **Purpose & Goals:**
    - **Optimized Reading Experience:** Provide a clean, distraction-free, highly readable layout for consuming the full article content.
    - **Maximize Comprehension:** Utilize effective formatting (headings, lists, code blocks, images, callouts) and navigation aids (Table of Contents) to help users understand complex information.
    - **Contextual Navigation:** Seamlessly link readers to related MCP Omni resources (components, docs, use cases) mentioned within the post, encouraging deeper exploration of the platform.
    - **Encourage Engagement:** Facilitate discussion through a robust comment section and encourage sharing on social media.
    - **Author Attribution & Discovery:** Clearly credit the author and provide pathways for readers to discover more content by them.
    - **SEO Performance:** Ensure the page is well-structured and optimized for search engines.
- **Layout & Structure:** **Focus on Readability - Single Main Content Column with Optional Sidebars.**
    - **Main Content Column (Center, optimized width for text lines ~650-800px):** Contains the primary article flow from header to comments.
    - **Left Sidebar (Optional, narrow, potentially floating/sticky):** Social sharing buttons.
    - **Right Sidebar (Optional, contextual, potentially sticky):** "On This Page" Table of Contents, Author bio snippet, Related Posts block, links to mentioned MCP Omni Components.
- **Key Features & Functionality (Detailed):**
    - **Post Header (within Main Column):**
        - `Category/Tag Links:` Clickable links (pills/text) to primary categories/tags.
        - `Title:` Large, clear H1 title.
        - `Author Byline:` `by [Author Name](link)`, `Published [Date]`, `Updated [Date]` (if applicable), `☕️ X min read`.
        - `Featured Image:` High-quality image displayed prominently below byline (full-width or constrained). Caption support. Alt text mandatory.
    - **Article Body (Main Column):**
        - **Rich Text Rendering:** Robust engine supporting:
            - Standard Markdown + extensions (e.g., footnotes).
            - Headings (H2-H6), paragraphs, lists (ordered/unordered/nested), blockquotes, horizontal rules.
            - **Code Blocks:** Language auto-detection + manual specification, syntax highlighting (multiple themes?), **copy button** for every block. Support for highlighting specific lines.
            - **Images:** Responsive, centered or floated, captions, alt text, lightbox/zoom on click.
            - **Embedded Media:** Support for YouTube, Vimeo, Gist embeds. Responsive containers.
            - **Tables:** Clean rendering of Markdown tables.
            - **Custom Callouts:** Visually distinct blocks for `[Info Icon] Note`, `[Warning Icon] Caution`, `[Lightbulb Icon] Tip`, `[Code Icon] Technical Detail`.
            - **Internal Linking:** **Crucial.** Implement a system (manual or semi-automated) to automatically link mentions of registered MCP Servers (e.g., `@google/gmail-server`), Clients (`Claude Desktop App`), Tools (`send_email`), Use Cases (`Automating Reports Tutorial`), or specific Docs pages directly to their respective pages within MCP Omni. These links should be visually distinct.
    - **Table of Contents (Right Sidebar - Sticky):**
        - Auto-generates hierarchical links based on H2 and H3 headings in the article body.
        - Visible only for posts exceeding a certain length or heading count.
        - Highlights the currently viewed section based on scroll position.
        - Smooth scrolling navigation on click.
    - **Social Sharing Buttons (Left Sidebar - Sticky/Floating):** Clean icon buttons for X/Twitter, LinkedIn, Reddit, Copy Link. Counts optional.
    - **Tags Section (Below Article Body):** List all associated tags as clickable pills, linking back to the filtered `/posts` page.
    - **Author Bio Section (Below Tags):** (As defined previously) Avatar, Name (link), Bio, Links to external profiles, Link to more posts by author on MCP Omni.
    - **Related Posts Section (Below Author Bio):**
        - **Logic:** Display 3-5 relevant posts based on shared categories, tags, or potentially semantic content similarity (advanced). Prioritize newer, popular related posts.
        - **UI:** Use standard Post Card components (compact version). Clear heading "Related Articles".
    - **Comment Section:** (As defined previously) Robust, threaded system requiring login. Supports Markdown. Moderation tools. Author highlighting. Sort options.
- **Key UI Components & Elements:** Rich text rendering components, Code Block component (with highlighting & copy), Image viewer, TOC component, Social Share buttons, Author Bio card, Post Card (for related), Commenting system component.
- **Interaction & User Flows:** User reads article -> Uses TOC for navigation -> Copies code snippets -> Clicks internal links to explore mentioned components/docs -> Shares post -> Reads/participates in comments -> Explores related posts or author profile.
- **Considerations & Notes:** Optimize for readability (font choice, line height, line length). Ensure fast load times (image optimization, code splitting). Internal linking strategy requires careful implementation (manual effort vs. potentially fragile automation). Comment moderation policy needed.

**(C) User Public Profile Page (`/users/[username]`)** *(Blog Contribution Integration)*

- **Page Name/Type:** User Public Profile
- **Purpose & Goals:** Showcase user's contributions, including blog authorship, to foster recognition and allow others to find all content by a specific trusted author.
- **Layout & Structure:** Consistent profile layout (Header + Tabbed/Sectioned Content).
- **Key Features & Functionality (Blog-Related):**
    - **Contributions Section/Tab:**
        - Include a dedicated subsection labeled **`Authored Posts`**.
        - **Display:** Paginated list or grid of all *public* posts authored by this user on MCP Omni. Use the standard Post Card component (potentially a slightly more compact version).
        - **Content:** Each card shows Featured Image, Title (linked), Date, Excerpt, Categories/Tags, Stats (Views/Comments).
        - **Sorting/Filtering (within tab):** Allow basic sorting (Newest, Popular) and potentially filtering by category/tag *within the author's posts*.
    - **(Optional) Aggregated Stats:** Display "Total Posts Authored", "Total Post Views", "Total Comments Received" alongside other contribution stats in the profile header (respecting privacy).
- **Privacy:** Users *must* control the visibility of their profile and whether their authored posts are listed publicly here via their account settings. If the profile is private, this page should not be accessible or should show minimal information.
- **Interaction & User Flows:** User visits profile -> Navigates to "Authored Posts" section -> Browses posts -> Clicks a post card to read the full article.



# Pricing

**MCP Omni - Comprehensive Specification**

**Document Section: VI. Pricing & Monetization**

**(A) Pricing Page (`/pricing`)**

- **Page Name/Type:** Pricing Plans & Platform Tiers
- **Purpose & Goals:**
    - **Transparent Value Communication:** Clearly articulate the value proposition and cost structure of MCP Omni, enabling users to understand exactly what features and usage limits are included in each subscription tier (Free, Team, Business, Enterprise).
    - **Highlight Hosting & Management Capabilities:** Position the Server Hosting features (including the generous free tier) and the Management API as core drivers of value for paid plans, making it easy for users to see how MCP Omni facilitates deploying and managing their MCP servers ("Servers").
    - **Segment & Target Effectively:** Design tiers that cater specifically to the needs and budget constraints of different user segments – from individual developers experimenting with hosting, to teams collaborating on internal tools, to businesses scaling AI integrations, and large enterprises requiring robust governance and custom solutions.
    - **Simplify Decision Making:** Present features and limits in a clear, easily comparable format (the pricing table), using consistent terminology and providing detailed explanations via tooltips to aid users in selecting the most appropriate plan.
    - **Drive Conversion & Upsell:** Make the Free tier highly attractive to encourage initial adoption and platform exploration, while clearly demonstrating the scaling benefits and advanced features of the paid tiers to incentivize upgrades as usage or needs grow. Provide clear pathways to sign up, upgrade, or initiate enterprise discussions.
    - **Build Trust:** Maintain transparency around resource consumption (compute, bandwidth), API usage, and support levels, reinforcing MCP Omni's commitment to being a reliable platform partner.
- **Target Audience & Scenarios:** (Refined based on Hosting/Mgmt focus)
    - *Hobbyist Developer:* "I built a cool local MCP server for my personal project. Can I easily make it accessible online for free to show friends or use with a web client?" -> Sees "Up to 10 Active Hosted Servers" and generous compute/bandwidth on the Free tier. Signs up.
    - *Small Development Team:* "We need to host ~30 internal Servers reliably for our team's AI agent experiments, manage access, and automate deployments via CI/CD." -> Compares Server limits, Seat counts, Management API access, and Collaboration features between Free, Team, and Business. Chooses Team/Business.
    - *Mid-Sized Company AI Lead:* "We need to deploy and manage 100+ secure Servers, integrate with our SSO, get detailed logs/metrics for compliance, and need priority support as we scale our agent deployments." -> Examines Business/Enterprise tiers, focusing on Server limits, SSO, RBAC, Observability, and Support SLAs. Contacts Sales for Enterprise details.
    - *Large Enterprise Architect:* "We need unlimited Server hosting with dedicated resources, advanced security policies, custom integrations, the ability to consolidate authentication for multiple internal tools via MCP (Auth Delegation), and a dedicated technical contact." -> Reviews Enterprise features and clicks "Contact Sales".
- **Layout & Structure:**
    - **1. Header Section:**
        - Clear Page Title: `Pricing & Plans` or `Choose Your Plan`.
        - Concise Subtitle: e.g., "Powerful MCP hosting, management, and discovery for every scale. Start free, grow with confidence."
        - **(Crucial) Billing Cycle Toggle:** Prominent toggle/buttons for `Monthly` vs. `Annual` pricing (clearly showing the % discount for annual prepayment, e.g., "Save 15% with Annual Billing"). Prices in the table update dynamically.
    - **2. Pricing Table Section:**
        - **Layout:** Clean, multi-column (typically 4: Free, Team, Business, Enterprise) comparison table. Use alternating row background colors for readability.
        - **Column Headers:** Plan Name, Price (`$0`, `$X/mo`, `$Y/mo`, `Custom`), Target Audience description, Primary CTA button. Highlight the "most popular" or best value paid tier (e.g., Business) with a subtle visual treatment (border, ribbon).
        - **Feature Rows:** Group related features using clear section headings within the table (e.g., `Core Platform`, `Server Hosting`, `Management & Automation`, `Collaboration & Security`, `Support`).
    - **3. Feature Deep Dive Section (Optional but Recommended):** Below the main table, include short sections elaborating on key complex features mentioned in the table (e.g., "What are Hosted Servers?", "Understanding the Management API", "Advanced Security Explained") with links to relevant documentation.
    - **4. Frequently Asked Questions (FAQ) Section:** Accordion-style FAQ addressing common pricing, billing, and feature questions specifically related to the hosting and management model.
    - **5. Enterprise Call-to-Action Block (Optional):** A distinct section below the FAQ specifically inviting larger organizations to contact sales for custom solutions, dedicated resources, and specialized support.
    - **6. Footer:** Standard platform footer.
- **Key Features & Functionality / Pricing Table Content (Hyper-Detailed Rows):**

    *(Focus on Hosting, Management API, Collaboration, Observability, Security)*
*(Illustrative Limits - Requires Business Modeling)*

| **Feature Group**    | **Feature**                                | **Free**                         | **Team (`~$99/mo`)**                                   | **Business (`~$499/mo`)**                        | **Enterprise (`Custom`)**                                                                | **Tooltip / Explanation (`ℹ️`)**                                                                                                                                                                                                             |
| -------------------- | ------------------------------------------ | -------------------------------- | ------------------------------------------------------ | ------------------------------------------------ | ---------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Core Platform**    | Registry Access & Discovery                | `✓ Full Access`                  | `✓ Full Access`                                        | `✓ Full Access`                                  | `✓ Full Access`                                                                          | Browse, search, filter the aggregated registry of Servers, Clients, Servers, Tools, Use Cases.                                                                                                                                               |
|                      | Playground Usage                           | `✓ Fair Use Limits`              | `✓ Standard Usage`                                     | `✓ Increased Usage`                              | `✓ Custom Limits`                                                                        | Interactive testing of components. Usage may be subject to fair-use policies or contribute slightly to resource metrics on paid plans.                                                                                                       |
| **Server Hosting**   | **Active Hosted Servers**                  | **`Up to 10 Included`**          | `Up to 50 Included`                                    | `Up to 200 Included`                             | `Unlimited / Custom Allocation`                                                          | **Max number of MCP Servers deployed as managed "Servers" concurrently on MCP Omni.** Each Server gets its own secure endpoint & execution environment. Includes Local-to-SSE transformation.                                                |
|                      | **Compute Resources per Server**           | `Shared (CPU/RAM) - Best Effort` | `Standard vCPU/RAM Allocation`                         | `Enhanced vCPU/RAM + Burstable`                  | `Dedicated Instances / Custom Resource Profiles`                                         | CPU and Memory allocated to each hosted Server instance. Higher tiers provide more guaranteed performance and ability to scale.                                                                                                              |
|                      | **Included Bandwidth per Month**           | `~10 GB Egress`                  | `~100 GB Egress`                                       | `~500 GB Egress`                                 | `Custom Allocation + Volume Rates`                                                       | Data transferred *out* from your hosted Servers each month. Overage charges may apply on paid plans.                                                                                                                                         |
|                      | **Included Server Calls per Month**        | `~100,000 Calls`                 | `~1,000,000 Calls`                                     | `~5,000,000 Calls`                               | `Custom Allocation + Volume Rates`                                                       | Number of successful requests processed by your hosted Servers each month. Overage charges may apply on paid plans.                                                                                                                          |
|                      | **Server Storage**                         | `~1 GB Total`                    | `~10 GB Total`                                         | `~50 GB Total`                                   | `Custom Allocation`                                                                      | Storage space for your deployed Server assets (e.g., Wasm modules, dependencies).                                                                                                                                                            |
|                      | Public Server Publishing                   | `✓ (Community Review)`           | `✓ (Standard Review)`                                  | `✓ (Priority Review)`                            | `✓ (Streamlined / Direct Options)`                                                       | Publish your hosted Servers to the public MCP Omni Registry. Review process ensures quality and security.                                                                                                                                    |
|                      | Private Server Publishing (Org)            | `❌`                              | `✓`                                                    | `✓`                                              | `✓`                                                                                      | Deploy Servers only visible and usable within your designated Organization on MCP Omni.                                                                                                                                                      |
| **Management & API** | **Management API Access**                  | `Read-Only (Registry Data Only)` | `Basic Write Access (Servers, Serversets)`             | `Full Write Access + CI/CD Features`             | `Full Access + Custom Endpoints/Webhooks`                                                | Programmatic control over your MCP Omni resources via API. Essential for automating deployments and management.                                                                                                                              |
|                      | **Management API Rate Limits**             | `Low (e.g., 60 req/min)`         | `Standard (e.g., 600 req/min)`                         | `High (e.g., 3000 req/min)`                      | `Custom / Increased Limits`                                                              | Maximum number of requests allowed to the Management API per minute/hour. Higher limits support intensive automation.                                                                                                                        |
|                      | **Serverset Management**                   | `Up to 5 Serversets`             | `Unlimited Serversets`                                 | `Unlimited Serversets`                           | `Unlimited Serversets`                                                                   | Create named collections of Servers with associated credentials for use in Playground or client configuration.                                                                                                                               |
|                      | **Advanced Aggregation / Auth Delegation** | `❌`                              | `❌`                                                    | `❌`                                              | **`✓ (Custom Solution)`**                                                                | **Enterprise Only:** Specialized feature allowing MCP Omni to act as a gateway, potentially unifying multiple backend Servers/Servers under a single endpoint with centralized, delegated authentication (e.g., handle OAuth once for user). |
| **Collaboration**    | Seats / Users                              | `1 User`                         | `Up to 5 Users Included`                               | `Up to 20 Users Included ($X / extra seat/mo)`   | `Custom User Count`                                                                      | Number of individual user accounts associated with the plan/organization.                                                                                                                                                                    |
|                      | Organizations / Workspaces                 | `❌ (Personal Account Only)`      | `✓ 1 Team Workspace`                                   | `✓ Multiple Teams`                               | `✓ Full Organization Structure`                                                          | Features for managing users, permissions, and shared resources within a team or company structure.                                                                                                                                           |
|                      | Shared Serversets                          | `❌`                              | `✓ Share within Team`                                  | `✓ Share across Teams`                           | `✓ Org-wide Sharing + Governance`                                                        | Allow team members to securely share and use configured Serversets (including credentials managed centrally).                                                                                                                                |
|                      | Private Server Sharing                     | `❌`                              | `✓ Share within Team`                                  | `✓ Share across Teams`                           | `✓ Org-wide Sharing + Governance`                                                        | Control visibility and access permissions for privately published Servers within your organization.                                                                                                                                          |
| **Observability**    | **Hosted Server Log Retention**            | `7 Days`                         | `30 Days`                                              | `90 Days`                                        | `Custom Retention + Log Export`                                                          | Duration for which execution logs from your hosted Servers are stored and accessible. Log export allows integration with external systems (Splunk, Datadog, etc.).                                                                           |
|                      | **Hosted Server Metrics**                  | `Basic Usage Counts`             | `Standard Metrics Dashboard (CPU, Mem, Calls, Errors)` | `Advanced Metrics + Basic Tracing`               | `Full Distributed Tracing + Custom Metrics & Alerting`                                   | Level of detail available for monitoring the performance and health of your hosted Servers. Tracing helps debug complex interactions.                                                                                                        |
|                      | Management API Audit Logs                  | `❌`                              | `❌`                                                    | `✓ Basic Audit Logs (90 days)`                   | `✓ Comprehensive Audit Logs (Custom Retention)`                                          | Record of administrative actions performed via the UI or Management API for security and compliance.                                                                                                                                         |
| **Security**         | Standard Platform Security                 | `✓`                              | `✓`                                                    | `✓`                                              | `✓`                                                                                      | Foundational security practices applied across the platform (encryption, network isolation, etc.).                                                                                                                                           |
|                      | **SSO / SAML Login**                       | `❌`                              | `❌`                                                    | `Optional Add-on ($Y/mo)`                        | `✓ Included`                                                                             | Integrate with your company's Identity Provider for secure user authentication.                                                                                                                                                              |
|                      | **Role-Based Access Control (RBAC)**       | `❌`                              | `Basic (Admin/Member)`                                 | `Configurable Team Roles`                        | `Custom Org-Level Roles & Permissions`                                                   | Granular control over user permissions for accessing and managing platform resources (Servers, Serversets, Billing, Settings).                                                                                                               |
|                      | Advanced Security Options                  | `❌`                              | `❌`                                                    | `Audit Logs`                                     | `Compliance Certifications (SOC 2 etc.), Data Residency Options, Custom Security Review` | Features meeting stringent enterprise security and compliance requirements.                                                                                                                                                                  |
| **Support**          | Support Channels                           | `Community Forum & Docs`         | `Email Support (Std Business Hours)`                   | `Priority Email & Chat Support (Extended Hours)` | `Dedicated Account Manager, Phone Support, 24/7 Options, Custom SLA`                     | How you can reach the MCP Omni team for help.                                                                                                                                                                                                |
|                      | Response Time SLAs                         | `Best Effort (Community)`        | `Standard SLA (e.g., 24-48 business hours)`            | `Priority SLA (e.g., <8 business hours)`         | `Custom / Guaranteed SLAs`                                                               | Service Level Agreements defining expected response times for support inquiries.                                                                                                                                                             |

- **Call-to-Action Buttons (per Tier Column):** Clearly labeled and styled: `Start for Free`, `Start Team Trial` / `Choose Team`, `Start Business Trial` / `Choose Business`, `Contact Sales`. Buttons should be highly visible.
- **FAQ Section (Accordion Style):**
    - **Content:** Focus on the *new* pricing model:
        - "What counts as an 'Active Hosted Server'?" (Definition: Deployed and runnable instance).
        - "How are hosted Server 'Calls' counted?" (Successful requests? All attempts?).
        - "How is hosted Server 'Bandwidth' measured?" (Egress only? Ingress included?).
        - "What happens if I exceed my Server/Bandwidth/Call limits?" (Explain policy: throttling, overage fees, required upgrade).
        - "How does Compute Resource allocation work?" (Explain shared vs. standard vs. enhanced/dedicated).
        - "Can I host resource-intensive Servers?" (Explain resource limits per tier, Enterprise options).
        - "What operations are included in the Management API limits?" (List key endpoints covered by rate limits).
        - "How does 'Advanced Aggregation / Auth Delegation' work?" (High-level explanation of the Enterprise feature).
        - "Is Registry access always free?" (Yes).
        - "Can I change plans anytime?" (Explain process).
        - "Is there a discount for annual billing?" (Yes, XX%).
        - "What payment methods are accepted?"
- **Key UI Components & Elements:** Pricing Table, Feature Comparison Rows (with icons/checkmarks/values), Tooltips (`ℹ️`), Monthly/Annual Toggle, Prominent CTA Buttons, Accordion FAQ, Clear Section Headings.
- **Interaction & User Flows:**
    - User lands, potentially toggles Annual pricing.
    - Compares tiers using the table, hovering over tooltips for clarification.
    - Focuses on limits relevant to their needs (Server count, API limits, Seats).
    - Consults FAQ for specific questions.
    - Clicks CTA -> Navigates to Sign Up (plan pre-selected), Upgrade flow (if logged in), or Contact Sales form.
- **Considerations & Notes:**
    - **Simplicity vs. Granularity:** Balance providing detailed usage metrics (Compute, Bandwidth, Calls) with keeping the pricing model understandable. Avoid overly complex "credit" systems if direct limits suffice.
    - **Metering Accuracy:** Implementing accurate, real-time metering for Server compute, bandwidth, and calls is technically challenging but crucial for fair billing.
    - **Value Communication:** Clearly link features to user benefits, especially for higher tiers (e.g., how RBAC improves security, how higher API limits enable CI/CD).
    - **Competitive Positioning:** Ensure pricing is competitive within the market for comparable hosting, management, and developer platform services.
    - **Overage Strategy:** Define and clearly communicate the policy for exceeding limits – essential for user trust and budget predictability.



---

# Dashboards

# Dashboard > Hosted Servers

**MCP Omni - Comprehensive Specification**

**Document Section: VI. User Settings & Platform Management

**(A) Hosted Servers Dashboard (`/dashboard`)**

- **Page Name/Type:** Hosted MCP Servers Dashboard / User's Primary Control Panel
- **Purpose & Goals:**
    - **Centralized Management Hub:** Serve as the primary, immediate view for logged-in users to see, monitor, and manage *all* MCP Servers they have deployed and are actively hosting on the MCP Omni platform.
    - **At-a-Glance Status Overview:** Provide a clear, real-time snapshot of each hosted server's operational status (Running, Stopped, Building, Error), key identifying information, and basic resource consumption hints.
    - **Quick Actions & Navigation:** Enable users to perform essential lifecycle actions (Start, Stop, Restart) and easily navigate to detailed views (Logs, Configuration, Full Details) for each hosted server directly from the dashboard.
    - **Usage & Limit Awareness:** Clearly display the user's current usage against their plan limits, especially highlighting the count towards the crucial "10 Free Hosted Servers" limit for the Free tier, prompting timely upgrades if needed.
    - **Streamlined Hosting Workflow Initiation:** Provide a prominent and intuitive entry point ("Host New Server") for users to begin the process of deploying new MCP Servers onto the platform.
    - **Personalized Entry Point:** Act as the default landing page after login, immediately presenting the user with the resources they are actively managing on the platform.
- **Target Audience & Scenarios:**
    - *User logs in:* Immediately sees their 3 hosted servers: `my-gmail-tool` (Running), `test-stdio-script` (Stopped), `new-github-webhook` (Building). Sees "3 of 10 Free Servers Used".
    - *User needs to restart a server:* Finds the server in the list, clicks the "Restart" quick action button.
    - *User debugging a failing server:* Sees "Error" status, clicks "View Logs" quick action to investigate.
    - *User approaching free limit:* Sees "9 of 10 Free Servers Used" prominently displayed, considers clicking the "Upgrade Plan" link nearby.
    - *User ready to deploy a new server:* Clicks the main "Host New Server" button.
- **Layout & Structure:** **Clean Dashboard Layout with Focus on Server List/Cards.**
    - **Header:** Minimal platform header (Logo, maybe User Menu).
    - **Page Title Bar:** Clear `<h1>` (e.g., "Hosted MCP Servers"). Includes the primary "Host New Server" CTA button prominently placed (e.g., top right).
    - **Usage Limit Indicator:** Visually distinct section or banner near the top displaying the usage against plan limits (e.g., "Active Hosted Servers: **3 / 10** Free Tier Limit" with a progress bar visualization and an "Upgrade Plan" link if close to/over limit).
    - **Server Display Area:** The main part of the page, presenting the list of hosted servers. Options:
        - **Option A (Card View - Recommended Default):** A responsive grid layout displaying individual "Hosted Server Status Cards". Good for visual overview, especially if including status indicators or mini-graphs.
        - **Option B (Table View):** A structured table layout. Better for dense information display and sorting/filtering if many servers are hosted. Requires thoughtful column design.
        - **View Toggle:** Include a subtle toggle (`[Grid Icon]`/`[List Icon]`) to switch between Card and Table views.
    - **Filtering/Sorting Controls (Optional but Recommended for >10 servers):** Simple controls above the list/grid:
        - `Filter by Status:` Dropdown (All, Running, Stopped, Building, Error).
        - `Sort By:` Dropdown (Name A-Z, Status, Last Active, Creation Date).
        - `Search:` Simple text input to filter by Server Name.
    - **Empty State:** If no servers are hosted yet, display a clear message ("You haven't hosted any MCP Servers yet!") with a prominent "Host Your First Server" button linking to `/new`.
    - **Footer:** Standard minimal footer.
- **Key UI Components & Elements (Detailed):**

    **1. Page Title Bar:**

    - `H1:` "Hosted MCP Servers".
    - `Host New Server Button:` Primary style button, clear text "+ Host New Server", links to `/new`.

    **2. Usage Limit Indicator:**

    - **UI:** Visually distinct banner, card, or text block.
    - **Content:** "Active Hosted Servers: **[Current Count] / [Plan Limit]** ([Plan Name])". E.g., "Active Hosted Servers: **3 / 10** (Free Tier)".
    - **Visualization (Optional):** Simple progress bar showing usage relative to limit. Bar color changes (e.g., green -> yellow -> red) as limit is approached.
    - **CTA (Conditional):** If near or at limit, display an "Upgrade Plan" button/link next to the indicator, linking to `/upgrade` or `/settings/billing`.

    **3. Filtering/Sorting Controls (Above Server List/Grid):**

    - `Search Input:` Standard text input with placeholder "Filter by name...".
    - `Filter by Status Dropdown:` Standard dropdown menu.
    - `Sort By Dropdown:` Standard dropdown menu.

    **4. Hosted Server Status Card (Card View - Adaptable Grid Item):**

    - **Layout:** Clean card with distinct sections for status, identification, key info, and actions. Consistent padding and visual hierarchy.
    - **Content:**
        - **`Status Indicator:`** Prominent colored dot/badge/ribbon at the top or side:
            - `Green ● Running`
            - `Grey ○ Stopped`
            - `Blue ⚙️ Building / Starting`
            - `Red ❌ Error`
            - Tooltip provides exact status text.
        - **`Server Name:`** **Bold, Large Font, Clickable Link** to the full detail page (`/{id}`). Editable name set by the user.
        - **`Source Type / Base Server:`** Smaller text below name indicating origin: `Source: GitHub (@user/repo)`, `Source: Start Command`, `Source: Registry (@provider/template)`. Link to source repo or registry page if applicable.
        - **`SSE Endpoint Snippet:`** Display the *start* of the unique SSE URL (e.g., `wss://abc123xyz...omni.mcphub.ai/`) with a **"Copy URL" icon button** (`[Copy Icon]`). Tooltip shows the full URL. Emphasizes the key output of hosting.
        - **`Key Info Row:`** Icons + Text snippets for quick context:
            - `[Type Icon: Remote/Local]` (Indicates the *underlying* type being hosted/converted).
            - `[Clock Icon] Last Active: 5 mins ago` / `Created: 2 days ago`.
            - `(Optional) [CPU Icon] CPU Usage: 5%`, `[RAM Icon] Mem: 128MB`. (Show simplified real-time/recent resource usage hints if feasible).
        - **`Quick Actions Row/Menu:`** Row of icon buttons OR a "kebab" menu (`⋮`) revealing actions:
            - `[Play Icon] Start` (Visible if Stopped/Error).
            - `[Stop Icon] Stop` (Visible if Running/Building).
            - `[Refresh Icon] Restart` (Visible if Running).
            - `[Logs Icon] View Logs` (Links to Logs tab on detail page `/{id}/logs`).
            - `[Settings Icon] Configure` (Links to Configuration tab on detail page `/{id}/configuration`).
    - **Hover State:** Subtle background change or shadow effect on the card.

    **5. Hosted Server Table Row (List View - Alternative):**

    - **Layout:** Standard table row.
    - **Columns:**
        - `Status`: Colored dot indicator.
        - `Name`: Link to detail page.
        - `Source Type`: Text/Link.
        - `SSE Endpoint`: Snippet + Copy Button.
        - `Type`: Remote/Local icon.
        - `Last Active`: Relative Date/Time.
        - `(Optional)` CPU/Mem Usage %.
        - `Actions`: Buttons/Menu (`Start`/`Stop`/`Restart`/`Logs`/`Configure`/`Details`).
    - **Interaction:** Click row to navigate to detail page (configurable). Sortable columns.

    **6. Empty State:**

    - **UI:** Centered message within the main content area when the server list is empty.
    - **Content:** Heading ("No Hosted Servers Yet"), supporting text ("Ready to deploy your first MCP Server and get a secure SSE endpoint?"), prominent "Host Your First Server" button linking to `/new`.
- **Information Architecture & Content:**
    - Requires backend to fetch the list of `Deployment` entities associated with the current user/organization.
    - Each deployment entity needs fields for: `User-defined Name`, `Current Status`, `Source Type` (GitHub, Command, Registry), `Source Details` (URL, command string), `Generated SSE URL`, `Creation Date`, `Last Activity Timestamp`, real-time/recent `Resource Usage` metrics, link to underlying `Server` definition (if applicable), `Configuration` (ENV VARS), `Logs`.
    - Needs integration with the user's current `Plan` to display limits and enforce them.
- **Interaction & User Flows:**
    - User logs in -> Lands on this dashboard (`/hosted-servers`).
    - User scans the list/cards, checking status and usage vs. limit.
    - User performs quick actions: Clicks `Stop` on a running server -> Status indicator updates (e.g., to `Stopping...` then `Stopped`). Clicks `Start` -> Status updates (`Starting...` -> `Running`). Clicks `Copy URL` -> SSE endpoint copied.
    - User needs more info/config -> Clicks server name or `Configure`/`View Logs` -> Navigates to the **Hosted Server Detail & Management Page (`/{id}`)**.
    - User wants to deploy -> Clicks "+ Host New Server" -> Navigates to `/new`.
    - User filters/sorts the list (if many servers).
    - User sees they are near limit -> Clicks "Upgrade Plan".
- **Creative Enhancements & Considerations:**
    - **Real-time Status Updates:** Use WebSockets or Server-Sent Events to update the status indicators (Running, Stopped, Building, Error) and potentially resource usage snippets in near real-time without requiring page refreshes.
    - **Resource Usage Visualization:** On Cards (Grid view), replace text snippets with tiny inline sparkline graphs showing recent CPU/Memory usage for a quick visual health check.
    - **"Needs Attention" Filter/Section:** Automatically highlight or allow filtering for servers in an "Error" state or potentially those exhibiting unusual resource consumption.
    - **Bulk Actions:** Allow selecting multiple servers (via checkboxes) to perform bulk Start/Stop/Delete actions.
    - **Grouping/Tagging:** Allow users to apply custom tags or group hosted servers into folders for better organization, especially if they manage many servers.
    - **Cost Estimation Snippet:** On each card/row, potentially show an estimated monthly cost based on current resource allocation and recent usage (relevant for paid plans or potential overages).



# Dashboard > Hosted Servers > New

**MCP Omni - Comprehensive Specification**

**Document Section: VI. User Settings & Platform Management

**(B) Host New Server - Selection Page (`/new`)**

- **Page Name/Type:** Host New MCP Server - Source Selection
- **Purpose & Goals:**
    - **Clear Starting Point:** Serve as the unambiguous entry point for initiating the process of deploying *any* new MCP Server onto the MCP Omni hosting platform.
    - **Guided Choice:** Present the distinct methods for defining the server source (Registry/URL, GitHub, Command) in an easily understandable way, helping users quickly choose the path that matches their situation.
    - **Set Expectations:** Briefly communicate the core requirement or outcome associated with each method (e.g., "Provide a URL", "Connect your Repo", "Enter your Start Command") so users know what to expect next.
    - **Simplicity & Focus:** Avoid overwhelming the user with configuration options at this stage; focus solely on selecting the *source* of the server definition.
    - **Future-Proofing:** Lay the groundwork for potentially adding more sources later (like platform templates) without fundamentally changing the initial user choice architecture.
- **Target Audience & Scenarios:**
    - *User found a server on GitHub:* Lands here -> Clicks "From GitHub Repository".
    - *User has a server running locally via `npx`:* Lands here -> Clicks "From Start Command (STDIO)".
    - *User found a server in Omni's Registry:* Lands here -> Clicks "From Registry/URL".
    - *User unsure how to start:* Reads the brief descriptions under each option to decide.
- **Layout & Structure:** **Ultra-Simple, Focused Choice Layout.**
    - **Header:** Minimal platform header.
    - **Page Title:** Clear `<h1>` (e.g., "Host a New MCP Server").
    - **Instruction Text:** Concise sentence guiding the user (e.g., "How would you like to define the server you want to host?").
    - **Option Selection Area:** Use large, distinct, visually appealing clickable cards or prominent buttons for each source option. Arrange horizontally or in a simple grid (max 3 wide). Ensure ample spacing.
    - **Footer:** Standard minimal footer.
- **Key UI Components & Elements (Detailed):**

    **1. Page Header:**

    - `H1:` "Host a New MCP Server".
    - `Instruction Text:` (Optional but helpful) "Choose the source for your server definition below."

    **2. Source Option Cards/Buttons (Visually Distinct & Clickable):**

    - **Design:** Use large clickable cards with prominent icons, clear titles, and brief descriptions. Ensure generous padding and clear hover/active states. Alternatively, use large, styled buttons with icons. Consistency in style is key.
    - **Option 1: `From Registry / URL`**
        - **Icon:** `[Search/Link Icon]`
        - **Title (Bold):** `From Registry or URL`
        - **Description (Concise):** "Host a known public MCP Server by providing its Registry URL or direct Git repository URL."
        - **Action:** Clicking this card/button navigates the user to the unified configuration page, potentially pre-filling the source URL field if possible or prompting for it: `/new/configure?source=url`.
    - **Option 2: `From GitHub Repository`**
        - **Icon:** `[GitHub Logo Icon]`
        - **Title (Bold):** `From GitHub Repository`
        - **Description (Concise):** "Connect your GitHub account and deploy directly from your private or public repository source code."
        - **Action:** Clicking this card/button navigates the user to the GitHub connection/repository selection step, then proceeds to the configuration page: `/new/configure?source=github` (or an intermediate repo selection step).
    - **Option 3: `From Start Command (STDIO)`**
        - **Icon:** `[Terminal Icon]`
        - **Title (Bold):** `From Start Command (Local/STDIO)`
        - **Description (Concise):** "**Easiest way for Local Servers!** Provide the exact command line needed to run your server locally (stdio). We'll host it and provide a secure SSE endpoint." *(Explicitly mention the benefit)*.
        - **Action:** Clicking this card/button navigates the user directly to the configuration page focused on command input: `/new/configure?source=command`.
    - **(Future) Option 4: `From Platform Template`**
        - **Icon:** `[Template/Blueprint Icon]`
        - **Title (Bold):** `From Template`
        - **Description (Concise):** "Start quickly with pre-configured server templates provided by MCP Omni for common use cases."
        - **Action:** Clicking navigates to a template browser first, then to the configuration page pre-filled from the template.
        - **UI Note:** Initially, this option might be greyed out or have a "Coming Soon" label.

    **3. Footer:** Standard links.

- **Information Architecture & Content:**
    - Minimal content needed on this page itself. Focus is on clear labeling and descriptions for the choices.
    - The key is ensuring the actions correctly route the user to the appropriate state of the subsequent configuration page (`/new/configure`).
- **Interaction & User Flows:**
    1. User arrives at `/new` (e.g., by clicking "+ Host New Server" on the dashboard).
    2. User reads the options and their descriptions.
    3. User clicks the card/button corresponding to their server source (e.g., "From Start Command").
    4. User is navigated to the `/new/configure` page, with the `source=command` parameter set, tailoring the configuration form appropriately.
- **Creative Enhancements & Considerations:**
    - **Visual Flow:** Consider adding subtle connecting lines or numbering to visually imply this is the first step in a simple workflow.
    - **Tooltips on Descriptions:** Add brief tooltips to the description text explaining terms like "stdio" or "SSE endpoint" for less familiar users.
    - **Highlighting Recommended/Easiest:** Potentially add a small "Recommended for Local Servers" badge to the "From Start Command" option to guide users.
    - **Simplicity is Key:** Resist adding configuration options here. This page *only* determines the source type. The next page handles the details.

---

This specification keeps the **Host New Server - Selection Page** extremely simple and focused, fulfilling the KISS principle. It uses clear, visually distinct options with concise descriptions to guide the user efficiently into the correct configuration workflow based on where their server definition originates.



# Dashboard > Hosted Servers > Configure

**MCP Omni - Comprehensive Specification**

**Document Section: VI. User Settings & Platform Management**

**(C) Host Server - Configuration Page (`/new/configure`)**

- **Page Name/Type:** Configure New Hosted MCP Server / Deployment Setup
- **Purpose & Goals:**
    - **Capture Deployment Details:** Serve as the primary interface for users to provide all necessary configuration details required by MCP Omni to successfully deploy and host their specified MCP Server, tailored precisely to the chosen source method (Registry/URL, GitHub, Command).
    - **Guided Configuration:** Provide clear instructions, contextual help, validation feedback, and sensible defaults to guide users through the configuration process smoothly, regardless of their technical expertise level.
    - **Secure Credential Handling:** Offer a secure and user-friendly way to manage sensitive information (API keys, tokens) needed by the server at runtime, ideally integrating with the platform's central Credentials Manager/Serversets.
    - **Resource Awareness:** Allow users to select appropriate resource allocations for their hosted server, clearly linking choices to their subscription plan's capabilities and potential costs.
    - **Enable stdio-to-SSE:** For the "From Start Command" flow, clearly communicate that this process transforms their local STDIO server into a network-accessible SSE endpoint hosted by Omni.
    - **Final Review & Deployment Trigger:** Present a summary of the configuration for final review before initiating the deployment process via a clear call to action.
- **Target Audience & Scenarios:**
    - *User chose "From Start Command":* Enters a name ("My Local Script SSE"), pastes their `npx my-tool --stdio` command, adds a required `API_KEY` environment variable (marking it as secret), selects the "Free Tier Standard" resource option, reviews, and clicks "Deploy".
    - *User chose "From GitHub":* Connects GitHub (if not already), selects their private repo `my-agent-server`, specifies the branch `main`, enters the start command `python main.py --port {{omniPort}}`, adds `DATABASE_URL` from their Serverset/Credentials Manager, chooses "Team Tier Enhanced" resources, reviews, and clicks "Deploy".
    - *User chose "From Registry/URL":* Pastes the GitHub URL for `@community/some-server` -> Platform fetches basic info/README -> User enters the required start command (if not auto-detected from manifest) -> Adds required API key as secret ENV VAR -> Selects resources -> Deploys.
- **Layout & Structure:** **Adaptive Single-Column Form Layout.** Prioritize a clear, top-to-bottom flow for the configuration steps. Use sections with clear headings to group related fields.
    - **Header:** Minimal platform header.
    - **Page Title Bar:** Clear `<h1>` (e.g., "Configure New Hosted Server"). Back button/link (`< Back to Source Selection`).
    - **Main Form Area:** A single column containing logical sections:
        1. **Source Definition Section (Dynamic):** Fields specific to the chosen `source` type (`url`, `github`, `command`).
        2. **Basic Information Section:** Server Name.
        3. **Execution Command Section (Dynamic):** Field(s) to specify how to *start* the server (might be part of Source Definition for GitHub/URL).
        4. **Environment Variables & Secrets Section:** Consistent component for adding runtime configuration.
        5. **Resource Allocation Section:** Selection based on user plan.
        6. **Review & Deploy Section:** Summary and final action button.
    - **(Optional) Right Sidebar:** Could display contextual help documentation snippets related to the currently focused form section, or show a live preview of the effective start command being constructed. Keep main focus on the form.
    - **Footer:** Standard minimal footer.
- **Key UI Components & Elements (Detailed & Adaptive):**

    **1. Page Header:**

    - `H1:` "Configure New Hosted Server".
    - `Back Link:` `< Back` (Returns to `/new`).

    **2. Source Definition Section (Dynamically Displayed Based on `?source=` Query Param):**

    - **IF `source=url` OR `source=registry`:**
        - `Heading:` "Server Source".
        - `URL Input Field:` `[Link Icon]` Label: "Registry Link or Git URL" (`*` Required). Input `type="url"`. Placeholder: `https://github.com/user/repo` or `https://mcponmi.ai/registry/servers/...`.
        - **Validation:** Check URL format. Attempt to fetch basic metadata (Name, Description from repo/registry) asynchronously upon valid URL entry/blur to potentially pre-fill other fields. Show loading indicator during fetch, display error if URL is invalid or metadata fetch fails.
        - `Fetched Info Display (Read-Only):` Once fetched: Display Server Name, Author, Description snippet. Link to source repo/registry page.
        - `Branch/Tag/Commit Field:` `[Git Branch Icon]` Label: "Git Branch / Tag / Commit" (Optional). Placeholder: `main`. Allows specifying a non-default Git reference.
    - **IF `source=github`:**
        - `Heading:` "GitHub Repository".
        - **GitHub Connection UI:**
            - If not connected: Button `[GitHub Logo Icon] Connect GitHub Account`. Initiates OAuth flow.
            - If connected: Display connected account (`Connected as @username`). Button `Switch Account`.
        - `Repository Selector:` Searchable dropdown/input listing user's accessible repositories (requires appropriate GitHub App permissions). Shows `owner/repo` name.
        - `Branch/Tag/Commit Selector:` Dropdown populated with branches/tags from the selected repository. Defaults to default branch. Allows selecting specific commit SHA.
    - **IF `source=command`:**
        - `Heading:` "Start Command Definition".
        - `Informational Text:` "Provide the exact command needed to run your server locally with stdio transport. MCP Omni will host this process and provide a secure SSE endpoint." *(Reinforce value prop)*.

    **3. Basic Information Section:**

    - `Heading:` "Server Details".
    - `Hosted Server Name Field:` `[Tag Icon]` Label: "Hosted Server Name" (`*` Required). Input `type="text"`. Placeholder: `my-gmail-processor`, `local-script-sse`. User-defined alias for their hosted instance. Validation: Required, unique within user's scope, allowed characters.
    - `Organization/Workspace Selector (Conditional):` `[Building Icon]` Label: "Deploy to Workspace". Dropdown displayed *only if* the user belongs to multiple organizations/workspaces on a Team+ plan. Defaults to personal workspace.

    **4. Execution Command Section (Content Adapts Based on Source):**

    - `Heading:` "Execution Command".
    - **IF `source=url` OR `source=github`:**
        - `Start Command Field:` `[Terminal Icon]` Label: "Start Command (within repo)" (`*` Required). Input `type="text"`. Placeholder: `python main.py --port {{omniPort}}` or `node dist/index.js`.
        - **Guidance Text:** Explain that the command runs relative to the repository root. Mention the availability of special variables like `{{omniPort}}` which MCP Omni injects for the hosted server to bind to. Link to docs explaining required startup behavior (binding to port, stdio handling if needed).
    - **IF `source=command`:**
        - `Full Start Command Field:` `[Terminal Icon]` Label: "Full Start Command" (`*` Required). Large text input or `<code>` style input field. Placeholder: `npx -y @anthropic/some-tool --stdio --api-key $MY_API_KEY`.
        - **Guidance Text:** Explain that environment variables (like `$MY_API_KEY` above) should be defined in the "Environment Variables" section below, not hardcoded here. Emphasize the command *must* adhere to MCP stdio communication protocol. Link to relevant MCP spec/docs.

    **5. Environment Variables & Secrets Section:**

    - `Heading:` "Environment Variables & Secrets".
    - `Informational Text:` "Define runtime configuration and secrets needed by your server. Secrets are stored securely encrypted."
    - **Source Selection (Enhancement):** Offer options:
        - `[Input Icon] Add Manually`: Default view.
        - `[Serverset Icon] Import from Serverset`: Dropdown to select an existing user Serverset. Imports keys/values (secrets remain masked, just indicates they will be used). Allows user to choose *which* specific keys from the Serverset to apply to *this* deployment.
    - **Manual Input Component (Key-Value Table):**
        - Columns: `Name` (Text Input), `Value` (Text Input / Textarea), `Secret?` (Checkbox), `Actions` (Remove Icon).
        - `Name Field:` Validation for valid ENV VAR names.
        - `Value Field:` Standard text input. Switches to masked input (`type="password"`) if `Secret?` is checked. Includes visibility toggle icon (`[Eye Icon]`) even for secrets (shows briefly on click/hold).
        - `Secret? Checkbox:` Marks the value as sensitive, ensuring it's stored encrypted and masked in logs/UI.
        - `Remove Action:` `[Trash Icon]` Button to delete the row.
    - **`+ Add Variable` Button:** Adds a new empty row to the table.
    - **Link:** "Manage shared credentials in Serversets". Links to `/settings/serversets`.

    **6. Resource Allocation Section:**

    - `Heading:` "Resource Allocation".
    - `Informational Text:` "Select the compute resources for your hosted server. Higher tiers offer more performance. Based on your current '[Plan Name]' plan." Link to `/pricing`.
    - **Resource Level Selector:** Use Radio Buttons or visually distinct Cards for selection:
        - `Option 1 (Free Tier Standard):` "Shared CPU, ~512MB RAM (Included in Free/Paid Plans)" - Default/Available on Free.
        - `Option 2 (Team Tier Standard):` "1 vCPU, ~1GB RAM (Requires Team+ Plan)" - Selectable if on Team+.
        - `Option 3 (Business Tier Enhanced):` "2 vCPU, ~2GB RAM + Burstable (Requires Business+ Plan)" - Selectable if on Business+.
        - `(Enterprise)` Text: "Custom resource allocation available via Enterprise plan."
    - **UI:** Clearly indicate which options are available based on the user's current plan (grey out unavailable options with explanation/upgrade link). Display estimated cost impact if selecting options beyond the current plan's standard inclusion (e.g., "$X/month additional cost").

    **7. Review & Deploy Section:**

    - `Heading:` "Review & Deploy".
    - **(Optional) Configuration Summary:** Briefly summarize key selections (Name, Source Type, Start Command Snippet, # Env Vars, Resource Level).
    - **Deployment Progress Area (Placeholder):** Area where status updates/logs will appear after clicking Deploy.
    - **Deploy Button:** **Primary Action Button.** Text: "Deploy Hosted Server". `type="submit"`. Shows loading state/progress indicator upon click. Disabled until all required fields are valid.
- **Information Architecture & Content:**
    - Form state needs to dynamically adapt based on the `source` parameter.
    - Requires validation logic for URLs, commands, ENV VAR names, resource selections vs. plan limits.
    - Needs secure backend handling for storing secrets associated with deployments.
    - Needs integration with the hosting/deployment infrastructure (provisioning system, container/Wasm runtime).
    - Needs integration with Serversets/Credentials Manager for importing secrets.
- **Interaction & User Flows:**
    1. User arrives from `/new` with `source` selected.
    2. Page loads the relevant Source Definition fields.
    3. User fills in Source details (URL, Repo, or Command). Platform might fetch metadata.
    4. User provides a unique Hosted Server Name.
    5. User enters the correct Execution Command based on source/guidance.
    6. User adds necessary Environment Variables, potentially importing from a Serverset and marking secrets.
    7. User selects an available Resource Allocation level.
    8. User reviews the summary (optional).
    9. User clicks "Deploy Hosted Server".
    10. **On Success:** Button shows loading state -> Progress indicators/initial logs appear -> User is redirected to the **Hosted Server Detail Page (`/{newServerId}`)** for the newly created instance, likely landing on the `Deployment & Monitoring` tab showing the build/start process.
    11. **On Failure:** Deployment button might show error state. Clear error messages displayed near relevant fields or in a summary error box (e.g., "Invalid repository URL", "Start command failed validation", "Resource limit exceeded for your plan", "Deployment failed - check logs for details").
- **Creative Enhancements & Considerations:**
    - **Manifest File Detection:** For GitHub/URL sources, attempt to automatically detect an `mcp-omni.json` or common MCP manifest files in the repo root. If found, *pre-fill* the Start Command, required Environment Variables (names only), and potentially Tool definitions based on its content, significantly speeding up configuration. Allow user to override.
    - **Command Validation/Preview:** For the Start Command input, provide basic client-side validation or hints. Show a preview of the *effective* command with ENV VARS interpolated (masking secrets) before deployment.
    - **Resource Usage Estimation:** Based on the selected Resource Allocation, provide a *very rough* estimate of monthly cost if it exceeds the free tier or included amounts in paid plans (e.g., "Estimated additional cost: ~$5/month").
    - **Save as Draft:** Allow users to save an incomplete configuration to finish later.
    - **Template Creation:** Option to "Save this configuration as a Template" for quicker reuse (potentially a paid tier feature).



# Dashboard > MCP Playground

**MCP Omni - Comprehensive Specification**

**Document Section: III. Page-by-Page Specification**

**(M) Playground Page (`/playground`)** *(Replaces previous placeholder index)*

- **Page Name/Type:** Interactive MCP Playground & Inspector
- **Purpose & Goals:**
    - **Universal MCP Interaction Hub:** Provide a comprehensive, interactive web-based environment for users to connect to, inspect, test, and debug *any* accessible MCP Server – whether it's hosted on MCP Omni, discovered in the registry (external Remote/Local definitions), or a custom endpoint URL.
    - **Simplified Testing & Debugging:** Offer an intuitive UI, inspired by `mcp-inspector`, to easily explore server capabilities (Tools, Resources, Prompts, etc.), execute tool calls with custom parameters, view detailed responses, monitor server notifications, and track interaction history, significantly simplifying the debugging process compared to manual client implementation.
    - **Realistic Context Simulation:** Critically, allow users to provide **test-specific Environment Variables** *before connecting*, enabling realistic testing scenarios even for servers (including Omni-hosted ones) that rely on environment context for configuration or secrets, mimicking local development environments without requiring local execution.
    - **Secure Credential Management:** Seamlessly integrate with MCP Omni's `Serversets` / `Credentials Manager` as the primary method for providing necessary authentication tokens/keys for server connections or specific tool calls, while also allowing secure manual input for one-off tests.
    - **Support All Server Types (via Connection):** While focusing on SSE/HTTP connections for remote/hosted servers, allow users to input parameters simulating a connection to a **Local (STDIO)** server definition by providing the necessary ENV VARS *before* potentially connecting to a generic testing harness or their own compatible hosted instance configured to use those variables.
    - **Facilitate Learning & Exploration:** Make it easy for users of all levels to understand MCP interactions by visually exploring server capabilities, seeing request/response flows, and accessing different protocol features (Tools, Resources, etc.) through a guided interface.
    - **Bridge to Integration:** Generate client code snippets based on successful Playground interactions, making it easier for developers to translate tests into application code.
- **Target Audience & Scenarios:**
    - *Developer Testing Omni-Hosted Server:* Selects their hosted server from a list -> Chooses their `Production Serverset` (containing the needed API key) -> Connects -> Navigates to Tools tab -> Selects `process_data` tool -> Enters test parameters -> Runs -> Inspects JSON result and checks Monitoring tab on Server Detail page.
    - *Developer Debugging External Remote Server:* Selects "Custom Endpoint" -> Enters SSE URL -> Manually pastes a temporary Bearer Token -> Connects -> Uses "Ping" tab to check connectivity -> Uses "Tools" tab -> Runs a tool -> Gets an error -> Toggles "Inspector Mode" -> Checks raw Response and Server Notifications for detailed error messages.
    - *Author Simulating Local Test for Hosted Server:* Selects their Omni-hosted server -> Clicks "Set Test Environment Variables" -> Enters `STRIPE_API_KEY=sk_test_...`, `MODE=test` -> Selects appropriate `Serverset` (if other keys needed) -> Connects (Omni backend potentially passes these test ENV VARS to the *hosted* instance for *this session only*) -> Runs Stripe-related tools -> Verifies behavior in 'test' mode.
    - *User Exploring Public Server:* Selects a public server from Registry -> Connects (no auth needed) -> Uses "Resources" tab to browse available data -> Uses "Tools" tab to try public tools (e.g., `search_docs`).
    - *Learning User:* Connects to the `@omni/demo-server` -> Uses "List Tools", "List Resources", "List Prompts" buttons -> Clicks through different tabs to understand the different MCP capabilities.
- **Layout & Structure:** **Flexible Multi-Panel Layout with Optional "Inspector Mode"** (Inspired by `mcp-inspector` structure, refined for web UI).
    - **Header:** Minimal platform header. Page Title: `MCP Playground`.
    - **Main Area (Adaptable Layout):**
        - **Panel 1: Connection & Configuration (Left Sidebar - Collapsible/Fixed ~25%):** Configure the target server connection, authentication, and test context (ENV VARS).
        - **Panel 2: Interaction Hub (Center - Dominant Area ~45-50%):** Select MCP features (Tools, Resources, etc.) and provide inputs/parameters.
        - **Panel 3: Results & Logs (Right Sidebar - Collapsible/Fixed ~25-30%):** Display outputs, status, basic logs, and execution controls.
        - **Panel 4: Advanced Inspection (Bottom Bar / Drawers - Revealed by "Inspector Mode"):** Contains detailed History and Server Notifications streams.
- **Key UI Components & Elements (Detailed & Adaptive):**

    **1. Connection & Configuration Panel (Left Sidebar):**

    - **`Target Server Section:`**
        - `Connect To:` Dropdown/Search Input. Options:
            - `My Hosted Servers:` (Lists user's servers from `/hosted-servers`). Shows Name, Status Icon.
            - `Registry Servers:` (Opens searchable modal/list of public servers). Shows Logo, Name, Author.
            - `Custom Endpoint URL:` (Reveals URL input field).
            - `(Future/Advanced)` `Simulate Local Command:` (Reveals Command/Args input - requires careful sandboxing or backend harness). *Initially, local simulation is primarily via ENV VARS*.
        - `Selected Target Display:` Shows Logo/Name/URL of the chosen server. Link to its Detail Page.
    - **`Authentication Section:`**
        - `Method:` Dropdown: `Use Serverset/Profile`, `Manual Bearer Token`, `Manual Header`, `None`.
        - *If Serverset:* `Select Serverset:` Dropdown listing user's saved Serversets. Shows relevant credentials within the selected set. `Manage Serversets` link.
        - *If Manual Token:* `Bearer Token Input:` Secure (masked) text input. Paste area.
        - *If Manual Header:* `Header Name Input:` (Default: `Authorization`), `Header Value Input:` (Secure/masked).
    - **`Test Environment Variables Section (Expandable Accordion - CRITICAL):`**
        - `Header:` `[Flask Icon] Test Environment Variables` (`+` icon indicates hidden). Tooltip: "Define variables to simulate a specific runtime context for this session. Useful for testing servers that read ENV VARS for config/secrets, even when testing hosted instances."
        - `On Expand:` Shows Key-Value input table component (Name, Value [masked option + visibility toggle], Remove action). `+ Add Variable` button. Persists *per session* or optionally save as named "Test Contexts".
    - **`Advanced Configuration Section (Expandable Accordion):`**
        - `Header:` `[Settings Icon] Connection Settings`.
        - `Content:` Fields to override defaults (inspired by `mcp-inspector` config): `Request Timeout (ms)`, `Reset Timeout on Progress? (toggle)`, `Max Total Timeout (ms)`. Defaults shown.
    - **`Connection Control:`**
        - `Connect / Disconnect Button:` Primary button in this panel. Toggles state. Shows loading indicator.
        - `Status Indicator:` `● Connected` / `○ Disconnected` / `⚙️ Connecting...` / `❌ Error` (with error message tooltip/popover).
    - **`Inspector Mode Toggle:`** `[Bug Icon] Inspector Mode` (Switch/Toggle Button). Enables/disables advanced panels.
    - **`Logging Level Dropdown (Inspector Mode Only):`** Select `Debug`/`Info`/`Warn`/`Error`. (This sets a *preference* for display, actual logs depend on server output).

    **2. Interaction Hub (Center Panel):**

    - **`MCP Feature Tabs:`** Prominent tab bar: `[Tools Icon] Tools`, `[Resources Icon] Resources`, `[Prompts Icon] Prompts`, `[Ping Icon] Ping`, `[Sampling Icon] Sampling`, `[Roots Icon] Roots`. Tabs are disabled until connected. Display dynamically based on server's declared capabilities (if possible via initial handshake/list calls).
    - **`Tools Tab Content:`**
        - **Tool List Sub-Panel (Left within tab):** Scrollable list. Populated by clicking `List Tools`. Shows `Tool Name` and `Description`. Clicking selects tool. Search bar within list.
        - **Tool Action Button:** `[List Icon] List Tools` (Triggers `tools/list` request).
        - **Parameter Input Form Sub-Panel (Right within tab):**
            - Displays `Tool Name` and full `Description` of the selected tool.
            - Dynamically generates form based on tool's input schema (fetched via `tools/list` or manifest). Supports all standard JSON schema types (string, number, integer, boolean, object, array) with appropriate inputs (text, number, toggle, JSON editor/textarea, potentially file mapping to resource upload). Clear labels, required markers (`*`), default values, descriptions/tooltips for each parameter. Real-time validation hints based on schema.
    - **`Resources Tab Content:`**
        - Action Button: `[List Icon] List Resources`.
        - Display Area: Shows list/tree of available resources. Clicking a resource triggers `resources/read`.
        - Content Viewer: Displays fetched resource content (text, formatted JSON, image preview, etc.). Download button for content. Subscription controls if resource supports it.
    - **`Prompts Tab Content:`**
        - Action Button: `[List Icon] List Prompts`.
        - Display Area: Shows list of prompt templates. Selecting one shows its details.
        - Parameter Input: Form for providing values for prompt template variables.
        - Action Button: `Execute Prompt`. Result area shows composed prompt.
    - **`Ping`, `Sampling`, `Roots` Tabs:** Simple UI with button(s) to trigger relevant MCP command(s) and display area for results/interactions. Sampling tab might show LLM request details and require user approval/modification before sending back.

    **3. Results & Logs Panel (Right Sidebar):**

    - **`Execution Control Button:`** **Context-aware `[Run Icon] Run Tool / Read Resource / ...` button.** Primary action for the active Interaction Hub tab. Disabled if not connected or required inputs missing. Shows loading spinner during execution.
    - **`Result Status Indicator:`** Clear text: `Success`, `Error`, `Running...`, `Waiting...`. Include duration upon completion (e.g., `Success (250ms)`).
    - **`Formatted Result Display Area:`** Scrollable area showing processed output. Defaults to formatted JSON with syntax highlighting and collapsing sections. Renders basic Markdown if content type indicates it. Image preview for image MIME types. Plain text display.
    - **Result View Options:** Small tabs or buttons to switch between `Formatted`, `Raw` (shows raw response body), `Headers` (Response Headers - *Inspector Mode*), `Request` (Shows raw request sent - *Inspector Mode*).
    - **`Generate Code Snippet Button (`[Code Icon]`):** Becomes active on successful tool call. Opens modal to generate SDK/curl snippets.
    - **`Basic Logs/Notifications Area:`** Small, scrollable section at the bottom showing only high-level status messages or progress updates from `notifications/message` or `notifications/progress` relevant to the *current* operation. More detail in Inspector Mode panels.
    - `Clear Results` button.

    **4. Advanced Inspection Panels (Bottom Bar/Drawers - Inspector Mode Only):**

    - **`History Panel:`** Persistent, scrollable list of all MCP requests made in the session (Connect, Ping, tools/list, tools/call, etc.). Shows Timestamp, Method, Status, Duration. Clicking re-populates Interaction/Results panels. Clear button.
    - **`Server Notifications Panel:`** Persistent, scrollable, real-time stream of *all* messages from the server's notification channels (`notifications/message`, etc.). Raw message view with timestamps. Search/Filter within stream. Clear button.
- **Information Architecture & Content:**
    - Needs seamless integration with the MCP Omni Registry (for server selection) and User Settings (for Serversets/Credentials).
    - Requires a robust, secure backend **Proxy/Orchestrator** (inspired by MCPP) that:
        - Establishes and manages SSE/HTTP connections to target servers.
        - Can securely inject authentication credentials (from Serversets or manual input) into requests.
        - Can securely inject **Test Environment Variables** into the connection context or pass them appropriately (this is complex - might require a dedicated sidecar or modifying how hosted skills receive context for test sessions).
        - Parses MCP requests from the frontend, forwards them to the target server.
        - Receives responses and notifications, parsing and forwarding them back to the frontend.
        - Handles timeouts and errors gracefully.
        - (Crucially) Does *not* need to run arbitrary local commands from user input for STDIO simulation if ENV VAR injection suffices for testing hosted or remote servers configured to read them.
- **Interaction & User Flows:**
    - **Simple Test (Hosted Server):** User selects Hosted Server -> Selects Serverset -> Connects -> Clicks Tools Tab -> Clicks List Tools -> Selects a tool -> Enters params -> Clicks Run Tool -> Views Formatted Result.
    - **Debug External API:** User selects Custom URL -> Enters URL -> Selects Manual Bearer Token -> Pastes Token -> Connects -> Tries Ping -> Tries tools/list -> Runs specific tool -> Gets error -> Toggles Inspector Mode -> Checks Raw Response and Server Notifications panels -> Adjusts parameters or reports bug.
    - **Simulate Local Context for Hosted Server:** User selects Hosted Server -> Selects Serverset -> Expands ENV VAR section -> Adds `API_MODE=staging`, `MOCK_DATA_PATH=/testdata` -> Connects -> Runs tool -> Verifies behavior using staging config based on logs/results -> Removes ENV VARS -> Reconnects -> Runs tool -> Verifies production behavior.
- **Creative Enhancements & Considerations:**
    - **Saving/Sharing Playground Sessions:** Allow users to save the entire state (target, auth method [excluding raw secrets], ENV VARs, selected tool, parameters) as a shareable link or named session for easy reproducibility or collaboration.
    - **Visual Schema Explorer:** Integrate a visual JSON schema explorer in the Parameter Input and Results panels for complex object types.
    - **Diff View for History:** Allow selecting two history items and showing a diff of the requests and responses.
    - **Request Sequencing (Advanced):** Allow defining a simple sequence of tool calls within the Playground to test basic chaining logic.
    - **Cost/Usage Display:** If testing Omni-hosted Servers or using tools with per-call costs via a future Unified API, display estimated costs *before* running the tool.
    - **Security of ENV VARs:** How are potentially sensitive ENV VARs passed during testing handled? They should be treated like secrets, masked in the UI, transmitted securely, and ideally injected into a sandboxed execution context for the specific test session without being permanently stored with the hosted server config. This requires careful backend architecture.
    - **Complexity Management:** Ensure the default view remains clean and simple. Hide advanced features effectively behind "Inspector Mode" or expandable sections. Provide excellent tooltips and contextual help.



# Dashboard > User Management & Billing Pages

**MCP Omni - Comprehensive Specification**

**Document Section: VI. User Settings & Platform Management (`/settings`)**

**(E) Settings - Workspace/Organization (`/settings/general` or `/settings/organization`)**

- **Page Name/Type:** Workspace / Organization General Settings
- **Purpose & Goals:**
    - **Basic Identification:** Allow the primary owner or administrators of a workspace/organization (relevant for Team plans and above) to define and update its display name within the MCP Omni platform.
    - **Contextual Clarity:** Provide a central place to view the workspace/organization's unique identifier (if applicable) and potentially other high-level settings as the platform evolves.
    - **Foundation for Collaboration:** Serve as the entry point for organizational settings, linking conceptually to user management and billing which define the collaborative scope.
    - **Simplicity:** Keep this initial settings page extremely focused and uncluttered, handling only the most essential general configuration.
- **Target Audience & Scenarios:**
    - *Team Admin:* "Our team name changed, I need to update it in MCP Omni so invitations look right." -> Navigates here, edits the name, saves.
    - *New User (on Team plan):* Explores settings, sees the Organization name set by their admin.
- **Layout & Structure:** **Simple Form Layout** within the standard Settings page structure.
    - **Left Sidebar Navigation:** Consistent settings navigation (`General`, `Members`, `Billing`, `API Tokens`, etc.). The `General` or `Organization` link is active.
    - **Main Content Area:** Contains a simple form for the workspace name.
- **Key UI Components & Elements (Detailed):**
    1. **Page Title:** `<h1>` "Workspace Settings" or "Organization Settings".
    2. **Subtitle/Instruction:** "Customize your workspace settings."
    3. **Form:**
        - `Workspace/Organization Name Field:`
            - **Label:** "Workspace Name" or "Organization Name".
            - **Input:** Standard text input (`type="text"`). Displays the current name.
            - **Validation:** Required field. Define acceptable length and character constraints (e.g., alphanumeric, spaces, basic punctuation).
            - **Help Text (Optional):** "This name is used throughout the platform and in invitations."
        - `Workspace/Organization ID Field (Read-Only):`
            - **Label:** "Workspace ID" or "Organization ID".
            - **Display:** Display a unique, non-editable identifier assigned by the platform (useful for support or API interactions). Include a `[Copy Icon]` button.
            - **Help Text (Optional):** "Unique identifier for your workspace/organization."
        - `Save Button:`
            - **Text:** "Save Changes".
            - **State:** Disabled initially, enabled only when the Name field has been modified. Shows loading state upon click.
            - **Feedback:** Display a success message (e.g., toast notification: "Workspace name updated successfully.") or specific error message upon save attempt.
- **Information Architecture & Content:**
    - Requires an `Organization` or `Workspace` entity in the database linked to users (especially for Team+ plans).
    - Needs fields for `name` (editable) and a unique `id` (system-generated).
- **Interaction & User Flows:**
    1. User (Admin role required for Team+ plans) navigates to `/settings/general`.
    2. User edits the content of the "Workspace/Organization Name" input field.
    3. "Save Changes" button becomes enabled.
    4. User clicks "Save Changes".
    5. System validates and updates the name in the backend.
    6. Success/Error message displayed briefly. The input field now shows the updated name.
- **Permissions:** Editing the workspace/organization name should typically be restricted to users with an 'Admin' or 'Owner' role within that workspace (applicable for Team plans and above). Free tier users operate in a personal context where this might be labeled "Account Settings" or simply unavailable if no naming is needed.
- **Considerations & Notes:** Keep this page focused. Avoid adding unrelated settings here; use other dedicated settings pages. Ensure name changes are reflected consistently across the UI where the workspace/org name is displayed.

---

**(F) Settings - User Profile (`/settings/profile`)**

- **Page Name/Type:** User Account Profile Settings
- **Purpose & Goals:**
    - **Personal Information Management:** Allow individual users to manage their basic profile information displayed within MCP Omni (Name, Avatar).
    - **Account Security Basics:** Provide access to change the account password.
    - **Public Profile Control:** (If public profiles `/users/[username]` exist) Provide explicit controls over public profile visibility and the information shared.
    - **Account Deletion:** Offer a secure, self-service method for users to permanently delete their account and associated personal data.
- **Target Audience & Scenarios:**
    - *Any User:* "I want to update my display name or upload a new profile picture." -> Navigates here, makes changes, saves.
    - *Any User:* "I need to change my account password." -> Navigates here, uses the change password form.
    - *Contributor User:* "I don't want my submitted Use Cases listed on a public profile." -> Navigates here, adjusts public profile visibility settings.
    - *User Leaving Platform:* "I want to delete my MCP Omni account." -> Navigates here, finds the delete account section, completes the process.
- **Layout & Structure:** Standard Settings Form Layout.
    - **Left Sidebar Navigation:** `Profile` link is active.
    - **Main Content Area:** Divided into logical sections using headings (e.g., "Personal Information", "Security", "Public Profile", "Account Deletion").
- **Key UI Components & Elements (Detailed):**
    1. **Page Title:** `<h1>` "Profile Settings".
    2. **Personal Information Section:**
        - `Heading:` "Personal Information".
        - `Avatar Upload Component:` Displays current avatar. Button/Link "Change Avatar". Opens file selector (accepts common image types: JPG, PNG, GIF). Shows preview after selection. Includes constraints (max file size, recommended dimensions). Handles upload processing and displays success/error. Option to "Remove Avatar" (reverts to default initial/placeholder).
        - `Full Name Field:` Label: "Full Name". Text input (`type="text"`). Displays current name. Editable. Validation (required, length).
        - `Email Address Field (Read-Only):` Label: "Email Address". Displays the registered email address. Include text "Email cannot be changed here. Contact support for assistance." (Or implement a secure email change flow if required, which adds complexity).
        - `Save Personal Info Button:` "Save Profile Changes". Enabled when Name or Avatar is changed. Shows success/error feedback.
    1. **Security Section:**
        - `Heading:` "Security".
        - `Change Password Sub-Section:` (Visible only if the user signed up via email/password, not social login).
            - `Instruction Text:` "Update your account password."
            - `Current Password Field:` Password input (`type="password"`), required for verification.
            - `New Password Field:` Password input (`type="password"`), required. Include Password Visibility Toggle and Strength Meter. Enforce complexity rules.
            - `Confirm New Password Field:` Password input (`type="password"`), required. Must match New Password.
            - `Change Password Button:` "Update Password". Enabled when all fields are valid. Shows loading state. Displays success/error feedback (e.g., "Password updated successfully.", "Incorrect current password.").
        - `Connected Accounts Sub-Section:` (Visible if user used social login)
            - Displays connected providers (`[Google Logo] Connected as ...@gmail.com`, `[GitHub Logo] Connected as @username`).
            - Provides `Disconnect` button (with confirmation modal explaining implications, e.g., needing to set a password if it's the only login method). Requires backend logic to handle dissociation safely.
    1. **Public Profile Settings Section (Conditional):**
        - **Visibility:** Only show this section if the `/users/[username]` public profile feature is implemented.
        - `Heading:` "Public Profile".
        - `Enable Public Profile Toggle:` Master switch (`On/Off`). Label: "Make my profile publicly visible at `/users/[username]`". Default OFF.
        - `Visible Information Checkboxes (Enabled only if Toggle is On):`
            - `[ ] Show my Name and Avatar`
            - `[ ] Show my Bio/Description` (Requires adding a Bio field to this settings page).
            - `[ ] Show my External Links (GitHub, Website, etc.)` (Requires adding fields to manage these links).
            - `[ ] List my Publicly Submitted Servers/Servers`
            - `[ ] List my Authored Use Cases`
            - `[ ] List my Authored Blog Posts`
            - `[ ] Show my Recent Activity (e.g., public comments/reviews)`
        - `Save Profile Settings Button:` "Save Visibility Settings".
    1. **Account Deletion Section ("Danger Zone"):**
        - **UI:** Visually separated section with a distinct border/background color (e.g., subtle red).
        - `Heading:` "Delete Account".
        - `Warning Text:` Clearly explain the irreversible consequences: "Permanently delete your MCP Omni account, including your profile information, hosted Servers, Serversets, API keys, and billing details. This action cannot be undone." If part of an organization, explain implications (e.g., "Requires Organization Owner action to remove from Org").
        - `Delete Account Button:` Prominent danger-styled button (`Delete My Account`).
        - **Confirmation Modal:** Clicking the button opens a confirmation modal:
            - `Title:` "Are you absolutely sure?"
            - `Content:` Reiterate the consequences. Require user to type their email address or a specific phrase (e.g., "DELETE") into a confirmation field to enable the final delete button.
            - `Final Delete Button:` "Permanently Delete Account". `Cancel` button.
- **Key UI Components & Elements:** Forms, Input Fields (Text, Email, Password), Avatar Uploader, Buttons (Primary, Danger), Checkboxes, Toggles, Password Strength Meter, Confirmation Modal.
- **Interaction & User Flows:**
    - User navigates to `/settings/profile`.
    - Edits name/avatar -> Saves changes.
    - Changes password (enters current, new, confirms) -> Updates password.
    - Adjusts public profile visibility -> Saves settings.
    - Initiates account deletion -> Confirms via modal -> Account permanently deleted, user logged out.
- **Considerations & Notes:** Implement robust security for password changes and account deletion (e.g., require current password, potentially email confirmation for deletion). Ensure privacy settings are respected across the platform (e.g., don't link to profile from comments if profile is private). Provide clear feedback messages for all actions.

---

**(G) Settings - Members & Access (`/settings/members`)**

- **Page Name/Type:** Workspace / Organization User Management
- **Purpose & Goals:**
    - **Team Collaboration:** Enable administrators (on Team+ plans) to invite new members to their workspace/organization and manage the roles and access levels of existing members.
    - **Access Control:** Provide a clear overview of who has access to the organization's resources (hosted Servers, Serversets, billing info, etc.).
    - **Simple User Management:** Offer straightforward actions for inviting, removing, and potentially changing roles of members.
- **Target Audience & Scenarios:**
    - *Team Admin:* "I need to add our new developer, Jane, to our MCP Omni workspace." -> Navigates here, clicks "Invite User", enters Jane's email, assigns "Member" role, sends invite.
    - *Team Admin:* "John left the team, I need to remove his access." -> Finds John in the list, clicks "Remove", confirms.
    - *Team Member:* Views this page (potentially read-only) to see who else is in their workspace.
- **Layout & Structure:** Standard Settings Page Layout.
    - **Left Sidebar Navigation:** `Members` link is active.
    - **Main Content Area:** Displays a list/table of current members and provides controls for inviting new members.
- **Key Features & Functionality / Content Details:**
    1. **Page Title:** `<h1>` "Members & Access".
    2. **Invite User Section:**
        - **UI:** Typically placed above the member list.
        - `Email Input Field:` Label: "Invite by Email". Input `type="email"`. Allows entering one or more email addresses (comma-separated or one per line).
        - `Role Selector Dropdown:` Label: "Assign Role". Options (Simple Initial Roles): `Admin` (Full access, can manage members/billing), `Member` (Can use resources, host servers, manage own items, cannot manage billing/members). Default to `Member`. Tooltip briefly explains permissions. *(More granular RBAC can be added later for Enterprise).*
        - `Invite Button:` "Send Invitations". Shows loading state. Disabled if email field is empty/invalid.
        - **Feedback:** Success message ("Invitations sent to...") or error messages ("Invalid email format", "User already invited/member").
    1. **Current Members List/Table:**
        - **UI:** Clear table or list view.
        - **Columns/Data per Member:**
            - `Avatar/Name:` User's avatar and full name.
            - `Email Address:` User's email.
            - `Role:` Display assigned role (`Admin`, `Member`). If user is Admin, allow changing role via a dropdown selector directly in the table (requires confirmation).
            - `Status:` Indicate if invitation is `Pending` or `Accepted`. Show "Resend Invite" option for pending invites.
            - `Actions:` (Visible to Admins) "Remove" button/icon (opens confirmation modal). User sees a "Leave Workspace" button on their own row (if not the sole owner/admin).
        - **Sorting/Filtering (Optional):** Basic sorting by Name or Role might be useful for large teams.
    1. **Empty State (if only one user):** Message indicating how to invite collaborators.
- **Key UI Components & Elements:** Input Fields (Email), Dropdown (Roles), Buttons (Invite, Remove, Leave, Resend Invite), Table/List Component, User Avatar/Profile Snippets, Confirmation Modals.
- **Interaction & User Flows:**
    - **Invite:** Admin enters email(s) -> Selects role -> Clicks Invite -> Invitations sent -> Invited user appears in list as "Pending".
    - **Accept Invite:** Invited user clicks email link -> Lands on `/accept-invite/{token}` -> Signs in or Signs up -> Added to workspace member list as "Accepted".
    - **Change Role:** Admin finds member -> Selects new role from dropdown -> Confirms change.
    - **Remove Member:** Admin finds member -> Clicks Remove -> Confirms -> Member removed.
    - **Leave Workspace:** Member clicks "Leave Workspace" on their row -> Confirms -> Member removed (cannot leave if sole owner/admin).
- **Permissions:** Only Admins/Owners can invite, change roles (other than their own), or remove other members. All members can typically view the list. Users can leave workspaces themselves (unless sole owner).
- **Considerations & Notes:** Keep the initial role system simple (`Admin`, `Member`). More granular permissions can be complex. Ensure invitation tokens are secure and expire appropriately. Handle edge cases like inviting an existing user vs. a new user gracefully.

---

**(H) Settings - Billing & Usage (`/settings/billing`)**

- **Page Name/Type:** Subscription, Billing, and Usage Overview
- **Purpose & Goals:**
    - **Plan Visibility:** Clearly display the user's/organization's current subscription plan and its associated core limits (especially Hosted Server count).
    - **Usage Monitoring:** Provide an easy-to-understand overview of current usage against key plan limits (Hosted Servers, potentially Compute/Bandwidth if metered separately beyond included amounts).
    - **Billing Management Access:** Provide a secure and direct pathway to manage billing details (payment methods, invoices, subscription changes) via integration with the payment processor's customer portal (Stripe Billing Portal recommended).
    - **Upgrade Path:** Offer clear calls-to-action for users to upgrade their plan if they are approaching limits or require features from higher tiers.
- **Target Audience & Scenarios:**
    - *User on Free Tier:* "How many more servers can I host for free?" -> Checks "Active Hosted Servers" usage vs. limit (e.g., 7/10).
    - *Admin needing invoice:* "Where can I download last month's invoice?" -> Clicks "Manage Billing" to go to Stripe portal.
    - *User hitting limits:* "My deployments are failing, maybe I hit a limit?" -> Checks usage here, sees they are at the Server limit -> Clicks "Upgrade Plan".
    - *Admin updating payment method:* Needs to update the credit card on file -> Clicks "Manage Billing".
- **Layout & Structure:** Clean Settings Page Layout.
    - **Left Sidebar Navigation:** `Billing & Usage` link is active.
    - **Main Content Area:** Use distinct cards or sections for Current Plan, Usage Summary, and Billing Management actions. Focus on clarity and key information.
- **Key Features & Functionality / Content Details:**
    1. **Page Title:** `<h1>` "Billing & Usage".
    2. **Current Plan Section:**
        - **UI:** Displayed prominently in a card or dedicated section.
        - **Content:**
            - `Current Plan:` **[Plan Name]** (e.g., "Free Tier", "Team Plan", "Business Plan"). Use plan badge styling.
            - `Brief Description:` Short summary of the plan's core allowance (e.g., "Up to 10 Hosted Servers & Community Support" or "Up to 50 Hosted Servers, 5 Seats, Email Support").
            - `(Optional) Price:` Display current monthly/annual cost (`$0/month`, `$99/month`).
            - `(Optional) Renewal/Cycle Date:` "Next billing date: [Date]" or "Renews annually on [Date]".
        - **Action Buttons:**
            - `Upgrade Plan`: Prominent button linking to `/upgrade` page or plan selection modal. (May be hidden if on highest non-Enterprise tier).
            - `Compare Plans`: (Optional) Link back to the main `/pricing` page for detailed comparison.
    1. **Usage Summary Section:**
        - **UI:** Use clear progress bars or simple text displays for key metered resources.
        - **Content:** Focus on the most critical limits tied to the plan:
            - `Active Hosted Servers:` **[Current Count] / [Plan Limit]** (e.g., `7 / 10`). Progress bar visualization.
            - `(If applicable) Compute Usage:` **[Used Credits/Hours] / [Included Credits/Hours]** this cycle. Progress bar. Tooltip explains what consumes compute.
            - `(If applicable) Bandwidth Usage:` **[Used GB] / [Included GB]** this cycle. Progress bar.
            - `(If applicable) Management API Calls:` **[Used Calls] / [Rate Limit Window]** (e.g., `350 / 600 per minute`).
        - **Link:** Include a link "View Detailed Usage" (potentially linking to the Observability section if implemented, or providing more granular breakdown if available).
    1. **Billing Management Section:**
        - **UI:** Clear section explaining how to manage billing details.
        - **Primary Action Button:** **`Manage Billing Details`**
            - **Functionality:** This button securely redirects the user to the **Stripe Customer Billing Portal**. MCP Omni generates a portal session URL via the Stripe API and redirects the user.
            - **Justification:** Leverages Stripe's secure, pre-built interface for managing payment methods, viewing invoices, updating billing addresses, viewing subscription details, and canceling subscriptions. Reduces MCP Omni's need to build/maintain sensitive billing UI components.
        - **Guidance Text:** "Manage your subscription, payment methods, view invoices, and update billing information securely via our payment partner, Stripe."
- **Key UI Components & Elements:** Text blocks, Progress Bars, Buttons (Primary, Secondary), Links. Requires backend integration to fetch current plan and usage data. Requires Stripe API integration for generating Customer Portal sessions.
- **Interaction & User Flows:**
    - User navigates to `/settings/billing`.
    - User reviews current plan and usage against limits.
    - User needs to update credit card -> Clicks "Manage Billing Details" -> Redirected securely to Stripe Customer Portal -> Makes changes -> Redirected back to MCP Omni (optional).
    - User nears limit -> Clicks "Upgrade Plan" -> Navigates to upgrade selection page/flow.
- **Permissions:** Typically accessible by Admins/Owners on Team+ plans. Free tier users see their limits and the Upgrade option.
- **Considerations & Notes:** Ensure seamless and secure integration with Stripe Billing Portal (handle redirects, session generation correctly). Keep usage data displayed here reasonably up-to-date (near real-time or hourly/daily refresh). Clearly communicate what happens upon cancellation via the Stripe portal (e.g., access level at end of cycle). Ensure plan names and limits displayed match the main `/pricing` page accurately.



# Dashboard > Server Settings & API

**MCP Omni - Comprehensive Specification**

**Document Section: VI. User Settings & Platform Management (`/settings`)**

**(I) Settings - Platform API Tokens (`/settings/api-tokens`)**

- **Page Name/Type:** Platform Management API Token Settings
- **Purpose & Goals:**
    - **Enable        1.  Introduction / Explanation.
2.  Token Management Area (displays existing token info or generation button).
3.  Integrated Mini API Playground Section.
4.  Link to Full Documentation.
- **Key UI Components & Elements (Detailed):**
    1. **Page Title:** `<h1>` "Platform Management API".
    2. **Introduction Section:**
        - `Brief Explanation:` "Manage your API token to interact with the MCP Omni Platform Management API. This allows you to programmatically create, update, and delete your hosted MCP Servers. Use this token securely in your scripts and CI/CD pipelines."
        - `Security Warning:` "Treat your API token like a password. Store it securely and do not share it publicly. You can only view the token once upon generation."
    1. **Token Management Area:**
        - **State 1: No Token Generated Yet:**
            - `Message:` "You haven't generated a Management API token yet."
            - `Generate Button:` **Primary Action.** Text: "Generate API Token". Clicking opens a confirmation modal.
        - **State 2: Token Exists:**
            - `Token Display Card:`
                - `Label:` "Your Management API Token".
                - `Value Display:` **Masked value** (e.g., `omni_xxxxxxxxxxxxxxxxxxxx1234`).
                - `Actions:`
                    - `[Copy Icon] Copy Token`: **Copies the *actual* token value to clipboard** (only works immediately after generation/regeneration, otherwise disabled or copies masked value). Tooltip clarifies behavior.
                    - `[Regenerate Icon] Regenerate Token`: Button opens a confirmation modal warning that the old token will be immediately invalidated.
                    - `[Delete/Revoke Icon] Revoke Token`: Button opens a confirmation modal to revoke the token entirely (user will need to generate a new one later).
                - `Metadata:` "Created: [Date]", "Last Used: [Date/Time or 'Never']" (if tracked).
        - **Confirmation Modals:**
            - *Generate/Regenerate:* Title: "Generate New Token?". Body: "A new API token will be generated. **You will only be able to see the full token value once.** Please copy it immediately and store it securely. Generating a new token will invalidate any existing token. Continue?". Buttons: "Cancel", "Generate & Show Token".
            - *Revoke:* Title: "Revoke API Token?". Body: "Are you sure you want to revoke your Management API token? You Automation:** Provide users (especially on paid tiers) with a secure mechanism (API token) to programmatically interact with the MCP Omni platform for managing their hosted servers (create, update ENV VARS, delete, start, stop, redeploy, list).
    - **Simplify Access:** Offer a straightforward "one token per user/account" model for simplicity, where regeneration invalidates the previous token.
    - **Secure Handling:** Ensure the token is treated as highly sensitive, displayed only once upon generation/regeneration, and managed securely by the user.
    - **Basic Testing Facilitation:** Include a minimal, built-in HTTP client (API Playground) directly on this page to allow users to immediately test the core Management API endpoints using their generated token without needing external tools like Postman or `curl` for basic validation.
    - **Clear Documentation Link:** Provide an unmissable link to the comprehensive Management API documentation for detailed endpoint specifications, request/response formats, and advanced usage.
- **Target Audience & Scenarios:**
    - *Developer setting up CI/CD:* Needs an API token to script the deployment of new hosted server versions upon code merge. -> Generates token, copies it to CI/CD secrets, uses API docs.
    - *User automating server management:* Wants to write a script to stop idle hosted servers overnight. -> Generates token, uses API docs to find the `stop` endpoint.
    - *User testing API integration:* Unsure about the exact JSON body for updating ENV VARS. -> Generates token, uses the embedded HTTP Playground to test the `PATCH /hosted-servers/{id}` endpoint with example JSON before implementing in their code.
    - *User lost token:* "My CI/CD pipeline broke because the token is missing." -> Navigates here, Regenerates token, updates CI/CD secrets, acknowledges the old token is invalid.
- **Layout & Structure:** Clean, focused Settings Page Layout.
    - **Left Sidebar Navigation:** `API Tokens` link is active.
    - **Main Content Area:** Divided into clear sections: Token Management, API Endpoint Info, Basic API Playground, Documentation Link.
- **Key Features & Functionality / Content Details:**
    1. **Page Title:** `<h1>` "Platform Management API".
    2. **Introduction Text:** Briefly explain the purpose: "Generate and manage your API token to interact with the MCP Omni platform programmatically. Use this token to automate the creation, configuration will need to generate a new one to use the API.". Buttons: "Cancel", "Revoke Token".
        - **Token Display After Generation (Temporary View):** After confirming generation/regeneration, replace the masked display briefly with the **full, unmasked token value** inside a read-only input or code block, accompanied by a prominent `[Copy Icon] Copy Token` button and strong text: "**Copy your token now. You will not be able to see it again.**". After the user navigates away or after a short timeout/explicit dismiss, revert to the masked display.
    1. **Mini API Playground Section:**
        - `Heading:` `<h2>` "Test Management, and management of your hosted servers via our Management API."
    1. **API Token Management Section:**
        - **Current Token Display:**
            - **If Token Exists:** Displays `Your API Token:`, followed by the token value heavily masked (e.g., `omni_sk_••••••••••••••••••••xyz`). Includes `Last Used: [Relative Time/Date]` or "Never Used".
            - **Copy Button:** `[Copy Icon] Copy Token`. Copies the *full, unmasked* token value to the clipboard upon click. *Crucial Note: The full token is NEVER displayed directly after initial generation/regeneration.* Requires JavaScript access to the stored (but not displayed) token API".
        - `Introduction:` "Quickly test core API endpoints using your active token below."
        - **Layout:** Simple 2-panel layout: Request Configuration | Response Display.
        - **Request Panel for copying.
            - **Regenerate Button:** `[Refresh Icon] Regenerate Token`. Styled as a potentially destructive action (e.g., secondary button, maybe requires confirmation).
            - **Warning Text:** Display:**
            - `Endpoint Selector:` Dropdown:
                - `POST /hosted-servers` ( prominently near the token: "Treat your API token like a password! Store it securely. If you lose it, you mustCreate)
                - `PATCH /hosted-servers/{id}` (Update Env Vars)
                - `DELETE / regenerate it, which will invalidate the current token."
        - **If No Token Exists:** Displays text "Youhosted-servers/{id}` (Delete)
            - `Server ID Input (Conditional):` Text input, haven't generated an API token yet." and a primary action button: `[+ Icon] Generate API Token`.
visible only for PATCH/DELETE. Label: "Hosted Server ID".
            - `Request Body Editor:`
                - **Regeneration Confirmation Modal:** Triggered by clicking "Regenerate Token". Title: "Regenerate API Token?". Body: "Are you sure? Regenerating your token will immediately invalidate the existing one. Any applications or scripts using the old token**UI:** Simple JSON editor (like Monaco editor component, lightweight version, or even just a `<textarea>`) with syntax highlighting.
                - **Content:** Pre-filled with a basic, valid JSON example body relevant to the selected endpoint will stop working until updated." Buttons: `Cancel`, `Yes, Regenerate Token` (Danger style).
    1. **API Endpoint Information Section:**
        - `Heading:` "API Endpoint".
        - `Display (see API Definitions below). Users can edit this JSON directly. Basic JSON validation feedback. *   **Auth:` Show the base URL for the Management API: `https://api.mcponmi.ai/v1` (or current version). Include a `[Copy Icon]` button.
        - `Authentication Note:` Text: "Authenticate requests Info:** Text display: "Authentication: Your active API token will be automatically included in the `Authorization: Bearer` by including the following header: `Authorization: Bearer YOUR_API_TOKEN`".
    1. ** header." (No need for user to paste token here).
*   `Send Request Button:` Primary button `[Send Icon] Send Request`. Shows loading state.
        - **Response Panel:**
            - **Basic Management API Playground Section:**
        - `Heading:` "Test Management API Endpoints".
        - `IntroductionUI:** Read-only display area.
            - **Content:** Displays `Status Code:` (e.g:` "Quickly test common Management API calls here using your current token."
        - **UI Components:**
*., `201 Created`, `400 Bad Request`, `401 Unauthorized`). Shows `Response Body:`   `Endpoint Selector/Input:` Dropdown pre-filled with common paths (`/hosted-servers`, `/hosted-servers/{ in a formatted JSON viewer/code block. Displays latency. Clears upon new request.
    1. **id}`), allowing selection. Input field allows typing path, potentially with `{id}` placeholder auto-suggestion based on user'Documentation Link Section:**
        - `Text:` "For detailed information on all endpoints, parameters, authentication, and error codess servers.
            - `HTTP Method Selector:` Dropdown (`GET`, `POST`, `PATCH`, `DELETE`). Defaults..."
        - `Button/Link:` **"View Full Management API Documentation"** (Links to relevant `/docs` section).
- **API Definitions (Basic Structure for Playground Examples):**
    - **`POST /hosted to GET. *   `Request Headers Area:`Read-only display:`Authorization: Bearer omni_sk_-servers` (Create):**
        - *Purpose:* Deploys a new hosted server.
        - *••••••••xyz` (dynamically uses the user's masked token for display, but sends the real one). PotExample Request Body:*

```json
{
  "name": "my-api-deployed-server",
  "source": {
    "type": "command", // or "github", "url"
    "entially allow adding *other* headers if needed for advanced cases.
*   `Request Body Editor (Conditional):command": "npx -y @mcp-omni/demo-server --stdio"
    // OR` JSON editor/textarea. Visible only for `POST`/`PATCH` methods. Pre-fill with example JSON based "repository": "https://github.com/user/repo", "branch": "main", "startCommand": on selected endpoint/method (e.g., example body for creating a server via `POST /hosted-servers`, "node index.js"
  },
  "environment": [
    { "name": "LOG_LEVEL", " example for updating ENV VARS via `PATCH /hosted-servers/{id}`). Basic JSON validation.
*   `Sendvalue": "info" },
    { "name": "API_KEY", "value": "SECRET_VALUE Request Button:` `[Send Icon] Send Request`. Shows loading state.
*   **Response Display Area:**
    _HERE", "secret": true }
    // Reference Serverset secrets: { "name": "DB_PASS", "valueFromSecret": { "serversetId": "sset-123", "key": "databasePassword*   `Status Code:` Display HTTP status (e.g., `200 OK`, `201 Created`, `401 Unauthorized`, `404 Not Found`). Color-coded (Green for 2xx, Yellow" } }
  ],
  "resourceAllocation": "free-standard" // ID referencing plan tier
}
```

for 4xx, Red for 5xx).
*   `Response Headers:` Collapsible section showing response            `*   **`PATCH /hosted-servers/{id}` (Update Env Vars):** *   *Purpose:* Updates environment variables for an existing deployment (triggers redeploy). *   *Example Request Body:* headers. *   `Response Body:` Display response body. Format JSON nicely with syntax highlighting. Handle empty or           `json
{
"environment": [
{ "name": "LOG_LEVEL", " non-JSON responses gracefully. Scrollable for large responses.
6.  **Full Documentation Link Section:**
*value": "debug" }, // Update existing
{ "name": "NEW_VAR", "value": "new_value" }, // Add new
{ "name": "API_KEY", "value": "NEW   `Heading:` "Full API Documentation".
*   `Content:` Prominent text link/button: `_SECRET", "secret": true } // Update secret // To remove: Send empty environment array or specific logic? T[Book Icon] View Complete Management API Docs` (links to relevant section within `/docs`).

- **Key UI Components &BD.
]
}
```
    - **`DELETE /hosted-servers/{id Elements:** Masked Text Display, Buttons (Primary, Secondary, Danger, Icon-only Copy), Confirmation Modal, Drop}` (Delete):**
        - *Purpose:* Permanently deletes a hosted server instance.
        - *Request Body:* Typically empty.
- **Information Architecture & Content:**
    - Requires secure storage for thedowns, Text Inputs, JSON Editor/Textarea, Code Display (for response), Loading Indicators, Status Indicators.
- **Interaction & User Flows:**
    - **Initial Generation:** User navigates here -> Clicks "Generate API Token" user's hashed API token (or reference). Only store the hash, never the raw token after initial generation.
    - \-> Token is generated backend -> Masked token displayed -> User immediately copies the full token using the copy button -> Stores it securely externally   Needs ability to track token creation date and potentially last used date (for security auditing).
    - Requires backend endpoints for `/hosted-servers` (Create/Update/Delete) that validate the Bearer token and perform the requested actions on. **Crucially, the full token is only visible via the copy action, not permanently displayed.**
    - **Regeneration:** User clicks "Regenerate Token" -> Confirms in modal -> Old token invalidated backend -> New token generated the hosting infrastructure.
    - Mini Playground needs frontend logic to construct requests based on user input and securely pass the * -> Masked token displayed -> User copies new token -> Updates external usage.
    - **API Testing:** User selectsactual* token (retrieved from user session/state) to the backend proxy making the API call.
- **Interaction & User Flows:**
    - User navigates to `/settings/api-tokens`.
    - If Endpoint Path -> Selects Method -> Edits Request Body (if POST/PATCH) -> Clicks "Send Request" -> Views Status Code and Response Body.
- **Permissions:** Generally available on all plans, but API rate limits differ significantly per no token, clicks "Generate" -> Confirms modal -> Copies displayed token -> Page updates to show masked token info.
tier (as defined on Pricing Page).
- **Security Considerations:** API Tokens must be cryptographically secure, long,    *   If token exists, user views info or clicks "Regenerate" -> Confirms modal -> Copies new token -> Page and non-guessable. Store securely backend (e.g., hashed representation). Transmit only over HTTPS. Implement updates.
    - User selects API endpoint in Mini Playground (e.g., `POST /hosted-servers`).
    - User edits the example JSON request body.
    - User clicks "Send Request".
    - strict rate limiting on the Management API endpoints. Log API usage for auditing (visible in Observability). Educate users strongly about securing their token. **Never display the full token after initial generation/regeneration.**

---

**(J) Settings - ServerFrontend sends request details (endpoint, body) AND implicitly includes the user's token via a secure backend proxy -> Proxysets / Credentials (`/settings/serversets`)**

- **Page Name/Type:** Serversets & Credentials Management
- makes actual API call -> Response returned.
    - Response panel updates with Status Code and Body.
    - **Purpose & Goals:**
    - **Secure Credential Storage:** Provide a dedicated, secure vault within MCP   User clicks link to view full API docs.
- **Security Considerations:** **Highest Priority.**
    - Omni for users to store sensitive credentials (API keys, tokens, passwords, connection strings) required by their hosted MCP Servers or needed   API Tokens are highly sensitive. Emphasize secure storage.
    - Display full token **ONLY ONCE**.
for testing in the Playground. Emphasize security (encryption at rest, masked display).
    - **Organized Grouping (Serversets):** Allow users to group related credentials into named "Serversets" (e.g    *   Use strong, unpredictable token generation.
    - Log token generation/revocation events.
    - Implement., "Stripe Production Keys", "Google Cloud Dev Project", "Local Testing Secrets"). This makes selection easier during Server robust authentication/authorization checks on the Management API endpoints.
    - The Mini API Playground must **NEVER** expose configuration and Playground testing.
    - **Reusable Configurations:** Enable reuse of the same credentials across multiple hosted Servers or Playground the raw token in the frontend code or allow arbitrary calls to external URLs. All calls must go through a trusted backend proxy that sessions via Serverset selection, avoiding repeated manual entry and reducing risk of exposure.
    - **Ease of Management injects the auth header server-side.
- **Considerations & Notes:** Limit to one active token simplifies:** Offer intuitive UI for creating, viewing, editing (adding/removing/updating credentials), and deleting Serversets.
    - security for users. Regeneration is the primary recovery mechanism. The Mini Playground significantly improves developer experience for basic API usage.

**Contextual Warnings:** Alert users when modifying a Serverset that changes might impact hosted Servers currently configured to use it,---

**(J) Settings - Serversets / Credentials (`/settings/serversets`)**

- **Page Name/Type:** Serversets & Credentials Manager
- **Purpose & Goals:**
    - **Secure Credential Storage prompting necessary redeployments.
    - **Simplified Credential Input:** Provide helpers like suggested common ENV VAR names to streamline adding credentials.
- **Target Audience & Scenarios:**
    - *User hosting a Stripe server:** Provide a centralized, secure vault for users to store sensitive credentials (API keys, tokens, passwords, URLs - primarily treated as Environment:* Creates a "Stripe Keys" Serverset -> Adds `STRIPE_SECRET_KEY` (marked as secret) and Variables) needed by their hosted MCP Servers or for testing in the Playground.
    - **Reusable Configuration Groups:** Allow users to organize related credentials into named "Serversets", making it easy to apply a consistent set of configurations/secrets across multiple hosted `STRIPE_WEBHOOK_SECRET` (marked as secret). Later, when configuring the hosted Stripe server, selects the "Stripe Keys" Serverset to provide these values.
    - *User testing multiple services in Playground:* Creates Server deployments or Playground sessions.
    - **Simplify Configuration:** Reduce the need to manually enter the same secrets repeatedly during a "Playground Test Keys" Serverset -> Adds keys for OpenAI, GitHub, Google Maps. In the Playground, selects server configuration or testing by allowing selection of pre-defined Serversets.
    - **Controlled Access & Masking:** Ensure this Serverset to authenticate various test calls without pasting keys repeatedly.
    - *User updating a shared key:* Ed secret values are always masked in the UI after initial input and stored encrypted at rest. Provide clear warnings about updating Serversets usedits the "Shared Google Cloud" Serverset -> Updates the `GCP_SERVICE_ACCOUNT_KEY` -> Sees by active deployments.
    - **Flexibility:** Allow defining both custom key-value pairs and selecting from presets a warning "This may require redeploying hosted servers: 'gcs-backup-skill', 'bq-query for common environment variable names.
- **Target Audience & Scenarios:**
    - *User deploying multiple servers needing the same OpenAI key:* Creates a "LLM Keys" Serverset -> Adds `OPENAI_API_KEY` (-server'." -> Proceeds and then manually redeploys affected servers.
    - *User adding a common variable:* Creates a new Serverset -> Clicks "+ Add Common Variable" -> Selects `OPENAI_API_KEY` ->marked secret) -> When configuring each hosted server, imports `OPENAI_API_KEY` from the "LLM Keys" Server Pastes their key into the value field, marks as Secret.
- **Layout & Structure:** Standard Settings Page Layout.set instead of pasting it manually.
    - *User testing different API environments:* Creates "Stripe Test Keys
    - **Left Sidebar Navigation:** `Serversets` or `Credentials` link is active.
    - **" and "Stripe Prod Keys" Serversets -> Selects the appropriate Serverset in the Playground's Authentication section when testing StripeMain Content Area:**
        1. Page Title & Introduction.
        2. "Create New Serverset" Button.
        3. List/Table of existing Serversets.
        4. (Potentially) tools.
    - *User updating a shared credential:* Edits the `DATABASE_PASSWORD` secret within a Modal or separate sub-page for viewing/editing a specific Serverset's credentials.
- **Key UI Components & Elements (Detailed):**
    1. **Page Title:** `<h1>` "Serversets & Credentials".
2 team-shared Serverset -> Acknowledges the warning that linked servers will restart/redeploy upon save.
*.  **Introduction Text:** Explain the purpose: "Securely store and manage API keys, tokens, and other secrets   **Layout & Structure:** Standard Settings Page Layout.
    - **Left Sidebar Navigation:** `Serversets & needed by your hosted MCP Servers or for testing in the Playground. Group related credentials into reusable Serversets for easier configuration." Link Credentials` link is active.
    - **Main Content Area:**
        1. Page Title & Introduction to relevant security docs.
    1. **Create New Serverset Button:** `[+ Icon] Create New. 2.  "Create New Serverset" Button. 3.  List/Table of Existing Serverset`. Opens the Serverset Editor view/modal.
    2. **Serverset List/Table:**
Serversets.
- **Key UI Components & Elements (Detailed):**
    1. **Page Title        *   **UI:** Display as cards or table rows.
        - **Columns/Data per Serverset:**
:** `<h1>` "Serversets & Credentials".
    1. **Introduction Section:**
        - `Explanation            *   `Name:` User-defined name (e.g., "Stripe Production Keys"). Clickable link to:` "Manage secure credentials and configuration variables needed by your hosted Servers or for Playground testing. Group related items into reusable Serversets." Edit view.
            - `Description:` Optional brief description.
            - `Credentials Count:` `# Secrets
        - `Security Note:` "Secret values are stored encrypted and masked after entry. Manage access carefully, especially for / # Total` (e.g., "2 Secrets / 3 Total Vars").
            - `Used shared Serversets (Team+ plans)."
        - `Usage Link:` "Learn how Serversets are used during By:` Indicate how many hosted Servers currently reference this Serverset (e.g., "Used by 2 Hosted Servers"). Tool [Server Hosting](link-to-docs) and in the [Playground](link)."
    1. **"tip lists server names.
*   `Last Modified:` Date/Time.
*   `Actions:` `Create New Serverset" Button:** Primary action button, opens the Create/Edit Modal/Pane.
    2. **Server[Edit Icon] Edit`, `[Trash Icon] Delete` (with confirmation).
        - **Empty State:** "No Serversets created yet. Create one to securely store and reuse credentials." CTA: "Create New Serverset".
set List/Table:**
        - **UI:** Display existing Serversets in a table or grid of cards.
    1. **Serverset Editor View (Modal or Sub-Page - Triggered by Create/Edit):**        *   **Columns/Card Content:**
*   `Serverset Name:` User-defined name.
*
        - **Title:** "Create New Serverset" or "Edit Serverset: [Name]".
*`# Variables:` Total number of keys stored.
            - `# Secrets:` Number of keys marked as secret.   **Fields:**
            - `Serverset Name:` Text Input (`*` Required). Unique validation.
            - `Last Updated:` Date/Time.
            - `Used By:` Indicator/Count of   `Description:` Textarea (Optional).
        - **Credentials Section:**
            - `Heading:` "Credentials how many hosted Servers currently reference this Serverset (Tooltip lists server names). Crucial for warning context.
            - / Environment Variables".
            - `Credentials Table/List:` Key-Value editor component:
```other
`Actions:` `[Edit Icon] Edit`, `[Trash Icon] Delete` (with confirmation).
```
        - Columns: `Name` (Text Input), `Value` (Text Input/Textarea, masked if Secret), `Secret**Empty State:** Message "No Serversets created yet. Create one to securely store and reuse credentials." with Create button?` (Checkbox), `Actions` (Remove Icon).
*   Validation: Name required, unique within Server.
        - **Pagination:** If list can become long.
    1. **Create/Edit Serversetset, valid ENV VAR format. Value required.
*   Masking/Visibility Toggle for Secret values.
* Modal or Pane:**
        - **Triggered By:** "Create New Serverset" button or "Edit" action   **Add Variable Buttons:**
*   `[+] Add Custom Variable`: Adds empty row.
*   `[ on an existing Serverset.
        - **Title:** "Create New Serverset" / "Edit ServersetList Icon] Add Common Variable`: Opens dropdown/modal with suggestions (`OPENAI_API_KEY`, `GITHUB_TOKEN`, etc: [Name]".
        - **`Serverset Name Field:`** Text input (`*` Required). Validation.). Selecting pre-fills the Name field.
        - **Action Buttons:** `Save Serverset`, `Cancel: Unique name within user/org scope.
        - **`Credentials Table (Key-Value Editor):`**
`.
        - **Warning Area (Visible on Edit):** Persistent text `⚠️ Modifying credentials may require rede*   **UI:** Table allowing addition/editing/deletion of rows.
            - **Columns:** `Name` (Text Input), `Value` (Text Input/Textarea - masked if Secret), `Secret?` (Checkboxploying hosted servers using this Serverset.` When Save is clicked, if changes detected, show confirmation modal listing affected servers before proceeding.
    1. **Deletion Confirmation Modal:** Triggered by clicking Delete icon. Title: "Delete Server Toggle), `Remove` (`[Trash Icon]`).
*   **Name Input:** Validation for valid ENV VAR names. Autoset '[Name]'?". Body: "Are you sure? This cannot be undone. Hosted servers using this Serverset may-uppercase suggested.
*   **Value Input:** Switches to `type="password"` and masks display when `Secret` is checked. Includes `[Eye Icon]` visibility toggle (shows value briefly).
*   **Secret fail if these credentials are removed. Currently used by: [List affected servers or count]." Input confirmation ("DELETE") required Toggle:** Checkbox to mark the value as sensitive.
*   **Remove Action:** Deletes the specific variable row.
to enable final "Permanently Delete Serverset" button. `Cancel` button.
- **Information Architecture & Content:**
    - `Serverset` entity: `id`, `name`, `description`, `owner_id/        *   **Action Buttons within Editor:** *   **`+ Add Variable Manually`:** Adds a new empty roworg_id`, `last_modified`.
    - `Credential` entity: `id`, `serverset to the table. *   **`[List Icon] Add from Presets`:** Opens a modal:_id`, `name`, `encrypted_value`, `is_secret` flag.
    - Requires strong
*   *Preset Modal:* Searchable list of common ENV VAR names relevant to popular APIs/services (e.g encryption at rest for `encrypted_value`.
    - Need relationships mapping which `Hosted Server` deployments use which `Server., `OPENAI_API_KEY`, `GITHUB_TOKEN`, `AWS_ACCESS_KEY_ID`, `STRIPEset`(s).
- **Interaction & User Flows:**
    - **Create:** User clicks "Create New Server_SECRET_KEY`, `DATABASE_URL`, `PORT`). Maybe categorized. *   *Functionality:* Selectingset" -> Enters Name/Desc -> Clicks "Add Common Variable" -> Selects `OPENAI_API_ presets adds rows to the main table with the `Name` pre-filled, ready for the user to enter the `ValueKEY` -> Pastes key -> Checks "Secret?" -> Clicks "Add Custom Variable" -> Enters `MY` and mark as `Secret`. Allows adding multiple presets at once.
        - **Action Buttons (Modal Footer_CONFIG_VAR`, value `test`, leaves Secret unchecked -> Clicks Save -> New Serverset appears in list.
    - **Use in Hosting:** User configures new Hosted Server -> In ENV VAR section, clicks "Import from Serverset):**
*   `Save Serverset` Button: Primary action. Enabled when Name is valid. **Crucial Warning:** If editing an existing Serverset that is "Used By" > 0 hosted Servers, display a prominent warning message next" -> Selects "OpenAI Key Set" -> Chooses `OPENAI_API_KEY` -> Variable added to the Save button: `⚠️ Saving changes will trigger a restart/redeploy for [N] hosted Servers using this Server (value masked, source indicated).
    - **Use in Playground:** User opens Playground -> In Auth section,set.`The Save button text might change to "Save & Trigger Restarts". Requires confirmation step potentially. Shows loading state selects`Use Serverset`-> Chooses "Playground Test Keys" -> Relevant credentials loaded for connection/tool calls. . Displays success/error feedback. *  `Cancel` Button: Closes modal without saving changes.
- **Edit:** User clicks Edit on "Stripe Keys" Serverset -> Updates `STRIPE_SECRET_KEY` value    6.  **Delete Confirmation Modal:** Triggered by Delete action. Title: "Delete Serverset '[Name]'?". -> Clicks Save -> Sees confirmation modal listing servers `invoice-processor`, `payment-webhook` -> Confirms Save Body: "Are you sure? This Serverset contains [# Variables] variable(s), including [# Secrets]. Deleting -> (User now knows to redeploy those servers).
    - **Delete:** User clicks Delete on unused Serverset -> Conf it may break hosted Servers currently using it. This action cannot be undone." Input field to type Serverset name to confirm. "irms -> Serverset removed.
- **Security Considerations:**
    - **Encryption:** All secret values MUSTCancel", "Permanently Delete" buttons.
- **Information Architecture & Content:**
    - Requires ` be encrypted at rest using strong, modern algorithms and key management practices.
    - **Access Control:** Editing/DeletingServerset` entity associated with User/Organization.
    - Requires `Credential` entity (or similar Key-Value storage Serversets requires appropriate permissions (User owns it, or Admin role in Org). Sharing Serversets requires RBAC.
) associated with a Serverset, including fields for `key`, `encrypted_value`, `is_secret` flag.
    - **Masking:** Secret values MUST NOT be displayed unmasked in the UI after initial entry (except possibly via temporary visibility toggle with explicit user action).
    - **Logs:** Avoid logging raw secret values. Log credential creation/modification/*   Needs secure encryption mechanism for storing secret values at rest.
    - Needs relationship tracking between `Hosted Serverdeletion events in Audit Logs (who, what, when).
    - **Least Privilege:** Ensure the backend processes Deployments`and the`Serversets` (or specific credentials) they reference to provide usage counts and trigger warnings/ that inject these credentials into hosted server environments or the Playground have minimal necessary privileges.
- **Creative Enhancements & Considerations:**
redeployments.
    - Requires a curated list of common ENV VAR names for the "Add from Presets" feature.
- **Interaction & User Flows:**
    - **Create:** User clicks "Create New" -> En    *   **Secret Rotation Reminders:** Allow setting an optional expiry/reminder date for secrets, notifying the user whenters Name -> Clicks "Add from Presets" -> Selects `OPENAI_API_KEY` and `STR it's time to rotate keys.
    - **Value Source Linking:** Option to link a variable's value toIPE_SECRET_KEY` -> Enters values, marks both as Secret -> Clicks "+ Add Variable Manually" -> Adds *another* secure source (e.g., AWS Secrets Manager, HashiCorp Vault - likely Enterprise feature).
    - **Usage Auditing:** Show which specific hosted servers or Playground sessions last used credentials from a Serverset (helps `CUSTOM_CONFIG_URL` (not secret) -> Clicks "Save Serverset".
    - **Use identify impact of changes).
    - **Serverset Versioning:** Allow creating versions of Serversets to manage changes more gracefully:** User configures a new Hosted Server -> In ENV VAR section, selects "Import from Serverset" -> Chooses the (advanced).

---

These detailed specifications for the Platform API Tokens and Serversets/Credentials pages provide the necessary foundation Serverset created above -> Selects which specific keys (`OPENAI_API_KEY`, `STRIPE_SECRET_KEY`, `CUSTOM_CONFIG_URL`) to apply to *this* deployment -> Values (masked for secrets) are linked.
* for secure and usable management of automation access and sensitive runtime configuration within MCP Omni, directly supporting the core hosting value proposition.
